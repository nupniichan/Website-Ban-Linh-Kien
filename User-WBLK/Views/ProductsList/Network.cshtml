@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị mạng";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new[] {
                    ("router", "Router"),
                    ("lan-card", "Card mạng")
                };
            }
            @foreach (var (value, text) in categories)
            {
                var parameters = new Dictionary<string, string>
                {
                    { "category", value }
                };
                var url = Url.Action("Network", parameters);
                var isSelected = Model?.Category?.ToLower() == value;
                <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(isSelected ? "bg-blue-600 text-white" : "")">
                    @text
                </a>
            }
        </div>
    </div>

    <!-- Dynamic Filters based on category -->
    <div class="bg-white rounded-lg p-4 mt-4">
        <h2 class="font-semibold mb-4">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "router":
            {
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var routerBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "asus", Text = "ASUS" },
                                    new { Value = "netgear", Text = "Netgear" },
                                    new { Value = "tp-link", Text = "TP-LINK" },
                                    new { Value = "linksys", Text = "Linksys" },
                                    new { Value = "d-link", Text = "D-Link" },
                                    new { Value = "huawei", Text = "Huawei" },
                                    new { Value = "ubiquiti", Text = "Ubiquiti" },
                                    new { Value = "google", Text = "Google" },
                                    new { Value = "mikrotik", Text = "MikroTik" },
                                    new { Value = "synology", Text = "Synology" }
                                };
                            }
                            @foreach (var brand in routerBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                {
                                    parameters.Add("brand", brand.Value);
                                }
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                {
                                    parameters.Add("priceRange", Model.PriceRange);
                                }
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                                {
                                    parameters.Add("type", Model.AdditionalFilters["type"]);
                                }
                                
                                var url = Url.Action("Network", parameters);
                                if (Model.Brand == brand.Value)
                                {
                                    <option value="@url" selected>@brand.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@brand.Text</option>
                                }
                            }
                        </select>

                        <!-- Type Filter -->
                        <select id="type" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var routerTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "wifi 6", Text = "Wifi 6" },
                                    new { Value = "wifi 5", Text = "Wifi 5" }
                                };
                            }
                            @foreach (var type in routerTypes)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                {
                                    parameters.Add("brand", Model.Brand);
                                }
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                {
                                    parameters.Add("priceRange", Model.PriceRange);
                                }
                                if (!string.IsNullOrEmpty(type.Value))
                                {
                                    parameters.Add("type", type.Value);
                                }
                                
                                var url = Url.Action("Network", parameters);
                                if (Model.AdditionalFilters?.GetValueOrDefault("type") == type.Value)
                                {
                                    <option value="@url" selected>@type.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@type.Text</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                break;
            }
            case "lan-card":
            {
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var lanBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "asus", Text = "ASUS" },
                                    new { Value = "tp-link", Text = "TP-LINK" },
                                    new { Value = "intel", Text = "Intel" },
                                    new { Value = "gigabyte", Text = "Gigabyte" },
                                    new { Value = "msi", Text = "MSI" },
                                    new { Value = "samson", Text = "Samson" }
                                };
                            }
                            @foreach (var brand in lanBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                {
                                    parameters.Add("brand", brand.Value);
                                }
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                {
                                    parameters.Add("priceRange", Model.PriceRange);
                                }
                                // Preserve 'type' filter if exists
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                                {
                                    parameters.Add("type", Model.AdditionalFilters["type"]);
                                }
                                
                                var url = Url.Action("Network", parameters);
                                if (Model.Brand == brand.Value)
                                {
                                    <option value="@url" selected>@brand.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@brand.Text</option>
                                }
                            }
                        </select>

                        <!-- Type Filter (same as router) -->
                        <select id="type" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var lanTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "wifi 6", Text = "Wifi 6" },
                                    new { Value = "wifi 5", Text = "Wifi 5" }
                                };
                            }
                            @foreach (var t in lanTypes)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                {
                                    parameters.Add("brand", Model.Brand);
                                }
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                {
                                    parameters.Add("priceRange", Model.PriceRange);
                                }
                                if (!string.IsNullOrEmpty(t.Value))
                                {
                                    parameters.Add("type", t.Value);
                                }
                                
                                var url = Url.Action("Network", parameters);
                                if (Model.AdditionalFilters?.GetValueOrDefault("type") == t.Value)
                                {
                                    <option value="@url" selected>@t.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@t.Text</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                break;
            }
            default:
                <script>
                    window.location.href = '@Url.Action("Network", "ProductsList", new { category = "router" })';
                </script>
                break;
        }

        <!-- Price Range -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @foreach (var range in new Dictionary<string, string>() {
                    {"duoi-500-nghin", "Dưới 500 nghìn"},
                    {"500-1-trieu", "500 nghìn - 1 triệu"},
                    {"1-2-trieu", "1 - 2 triệu"},
                    {"2-5-trieu", "2 - 5 triệu"},
                    {"tren-5-trieu", "Trên 5 triệu"}
                })
                {
                    var parameters = new Dictionary<string, string>();
                    if (!string.IsNullOrEmpty(Model.Category))
                    {
                        parameters.Add("category", Model.Category);
                    }
                    if (!string.IsNullOrEmpty(Model.Brand))
                    {
                        parameters.Add("brand", Model.Brand);
                    }
                    parameters.Add("priceRange", range.Key);
                    
                    if (Model.Category?.ToLower() == "router" || Model.Category?.ToLower() == "lan-card")
                    {
                        if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                        {
                            parameters.Add("type", Model.AdditionalFilters["type"]);
                        }
                    }
                    
                    var url = Url.Action("Network", parameters);
                    if (Model.PriceRange == range.Key)
                    {
                        <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 bg-blue-600 text-white">
                            @range.Value
                        </a>
                    }
                    else
                    {
                        <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200">
                            @range.Value
                        </a>
                    }
                }
            </div>
            <a href="@Url.Action("Network", new { category = Model.Category })" class="inline-block mt-3 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">
                Xóa bộ lọc
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "network"
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    const nextBatch = Array.from(products).slice(currentlyShown, currentlyShown + productsPerPage);
                    nextBatch.forEach(product => product.classList.remove('hidden'));
                    currentlyShown += productsPerPage;
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });
                    currentlyShown = productsPerPage;
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}
