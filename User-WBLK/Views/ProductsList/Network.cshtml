@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị mạng";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Network", new { category = "router" })" 
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "router" ? "bg-blue-600 text-white" : "")">
                Router
            </a>
            <a href="@Url.Action("Network", new { category = "switch" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "switch" ? "bg-blue-600 text-white" : "")">
                Switch
            </a>
            <a href="@Url.Action("Network", new { category = "lan-card" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "lan-card" ? "bg-blue-600 text-white" : "")">
                Card mạng
            </a>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "router":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md w-48" onchange="updateFilters(this)">
                            <option value="">Tất cả thương hiệu</option>
                            @foreach (var brand in new[] { "tp-link", "tenda", "asus", "linksys" })
                            {
                                <option value="@brand" selected="@(Model?.Brand == brand)">
                                    @(brand.ToUpper())
                                </option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md w-48" onchange="updateFilters(this)">
                            <option value="">Tất cả loại</option>
                            @foreach (var type in new[] { 
                                new { value = "wifi-6", text = "Wifi 6" },
                                new { value = "wifi-5", text = "Wifi 5" },
                                new { value = "4g", text = "4G" }
                            })
                            {
                                <option value="@type.value" 
                                        selected="@(Model?.AdditionalFilters?.GetValueOrDefault("type") == type.value)">
                                    @type.text
                                </option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "switch":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var switchBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "tp-link", Text = "TP-Link" },
                                    new { Value = "cisco", Text = "Cisco" },
                                    new { Value = "d-link", Text = "D-Link" },
                                    new { Value = "netgear", Text = "NETGEAR" }
                                };
                            }
                            @foreach (var brand in switchBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md">
                            @{
                                var switchTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "unmanaged", Text = "Unmanaged" },
                                    new { Value = "managed", Text = "Managed" },
                                    new { Value = "smart", Text = "Smart" }
                                };
                            }
                            @foreach (var type in switchTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("type") == true && Model.AdditionalFilters["type"] == type.Value)">@type.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "lan-card":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md w-48" onchange="updateFilters(this)">
                            <option value="">Tất cả thương hiệu</option>
                            @foreach (var brand in new[] { "tp-link", "intel", "asus" })
                            {
                                <option value="@brand" selected="@(Model?.Brand == brand)">
                                    @(brand.ToUpper())
                                </option>
                            }
                        </select>

                        <select id="connection" class="px-4 py-2 border rounded-md w-48" onchange="updateFilters(this)">
                            <option value="">Tất cả kết nối</option>
                            @foreach (var conn in new[] { 
                                new { value = "pci-e", text = "PCI-E" },
                                new { value = "usb", text = "USB" }
                            })
                            {
                                <option value="@conn.value" 
                                        selected="@(Model?.AdditionalFilters?.GetValueOrDefault("connection") == conn.value)">
                                    @conn.text
                                </option>
                            }
                        </select>
                    </div>
                </div>
                break;

            default:
                <div class="text-gray-500">Vui lòng chọn danh mục để xem các bộ lọc chi tiết</div>
                break;
        }
    </div>

    <!-- Price Range -->
    <div class="bg-white rounded-lg p-4 mb-6">
        <h2 class="font-semibold mb-2">Khoảng giá:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Network", new { category = Model?.Category, priceRange = "duoi-500-nghin" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "duoi-500-nghin" ? "bg-blue-600 text-white" : "")">
                Dưới 500 nghìn
            </a>
            <a href="@Url.Action("Network", new { category = Model?.Category, priceRange = "500-1-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "500-1-trieu" ? "bg-blue-600 text-white" : "")">
                500 nghìn - 1 triệu
            </a>
            <a href="@Url.Action("Network", new { category = Model?.Category, priceRange = "1-2-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "1-2-trieu" ? "bg-blue-600 text-white" : "")">
                1 - 2 triệu
            </a>
            <a href="@Url.Action("Network", new { category = Model?.Category, priceRange = "2-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "2-5-trieu" ? "bg-blue-600 text-white" : "")">
                2 - 5 triệu
            </a>
            <a href="@Url.Action("Network", new { category = Model?.Category, priceRange = "tren-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "tren-5-trieu" ? "bg-blue-600 text-white" : "")">
                Trên 5 triệu
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        @for (int i = 0; i < 15; i++)
        {
            <partial name="_ProductCard" />
        }
    </div>

    <!-- Pagination -->
    <div class="flex justify-center space-x-2 mt-6">
        @{
            string GetPageUrl(int pageNum)
            {
                var routeValues = new Dictionary<string, object>();
                
                if (!string.IsNullOrEmpty(Model?.Category))
                {
                    routeValues.Add("category", Model.Category);
                }
                
                if (!string.IsNullOrEmpty(Model?.Brand))
                {
                    routeValues.Add("brand", Model.Brand);
                }
                
                if (Model?.AdditionalFilters != null)
                {
                    foreach (var filter in Model.AdditionalFilters)
                    {
                        if (!string.IsNullOrEmpty(filter.Value))
                        {
                            routeValues.Add(filter.Key, filter.Value);
                        }
                    }
                }
                
                routeValues.Add("page", pageNum);
                
                return Url.Action("Network", routeValues);
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage - 1)" 
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == 1 ? "opacity-50 cursor-not-allowed" : "")"
           @(Model.CurrentPage == 1 ? "disabled" : "")>
            <span class="sr-only">Previous</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </a>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.CurrentPage)
            {
                <a href="@GetPageUrl(i)" class="px-4 py-2 bg-blue-600 text-white rounded-md">@i</a>
            }
            else if (i <= 3 || i == Model.TotalPages || Math.Abs(i - Model.CurrentPage) <= 1)
            {
                <a href="@GetPageUrl(i)" class="px-4 py-2 bg-white hover:bg-gray-50 rounded-md">@i</a>
            }
            else if (i == 4 || i == Model.TotalPages - 1)
            {
                <span class="px-4 py-2">...</span>
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage + 1)" 
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == Model.TotalPages ? "opacity-50 cursor-not-allowed" : "")"
           @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>
            <span class="sr-only">Next</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </a>
    </div>
</div>

@section Scripts {
    <script>
        function updateFilters(selectElement) {
            const params = new URLSearchParams(window.location.search);
            
            const category = '@Model?.Category';
            const priceRange = '@Model?.PriceRange';
            
            for (let param of params.keys()) {
                params.delete(param);
            }
            
            if (category) params.set('category', category);
            if (priceRange) params.set('priceRange', priceRange);
            
            document.querySelectorAll('select').forEach(select => {
                if (select.value) {
                    params.set(select.id, select.value);
                }
            });
            
            window.location.href = `${window.location.pathname}?${params.toString()}`;
        }
    </script>
}

