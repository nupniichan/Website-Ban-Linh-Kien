@model ProductListViewModel
@{
    ViewData["Title"] = "PC";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Nhu cầu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var defaultUrl = Url.Action("PC", "ProductsList", new { cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            var isDefaultSelected = string.IsNullOrEmpty(Model.Usage);
                        }
                        <option value="@defaultUrl" selected="@isDefaultSelected">Nhu cầu</option>
                        @foreach (var (value, text) in new[] {
                            ("gaming", "PC Gaming"),
                            ("graphics", "PC Đồ hoạ - Làm việc"),
                            ("ai", "PC AI - Trí tuệ nhân tạo"),
                            ("workstation", "PC Workstation"),
                            ("office", "PC Văn phòng")
                        })
                        {
                            var url = Url.Action("PC", "ProductsList", new { usage = value, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            var isSelected = Model.Usage == value;
                            <option value="@url" selected="@isSelected">@text</option>
                        }
                    </select>
                </div>

                <!-- CPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var cpuDefaultUrl = Url.Action("PC", "ProductsList", new { usage = Model.Usage, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            var isCpuDefaultSelected = string.IsNullOrEmpty(Model.CpuType);
                        }
                        <option value="@cpuDefaultUrl" selected="@isCpuDefaultSelected">Loại CPU</option>
                        @foreach (var (value, text) in new[] {
                            ("intel core i3", "Intel Core i3"),
                            ("intel core i5", "Intel Core i5"),
                            ("intel core i7", "Intel Core i7"),
                            ("intel core i9", "Intel Core i9"),
                            ("amd ryzen 3", "AMD Ryzen 3"),
                            ("amd ryzen 5", "AMD Ryzen 5"),
                            ("amd ryzen 7", "AMD Ryzen 7"),
                            ("amd ryzen 9", "AMD Ryzen 9")
                        })
                        {
                            var url = Url.Action("PC", "ProductsList", new { cpuType = value, usage = Model.Usage, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            var isSelected = Model.CpuType == value;
                            <option value="@url" selected="@isSelected">@text</option>
                        }
                    </select>
                </div>

                <!-- RAM -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var ramDefaultUrl = Url.Action("PC", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            var isRamDefaultSelected = string.IsNullOrEmpty(Model.Ram);
                        }
                        <option value="@ramDefaultUrl" selected="@isRamDefaultSelected">RAM</option>
                        @foreach (var (value, text) in new[] {
                            ("8gb", "8GB"),
                            ("16gb", "16GB"),
                            ("32gb", "32GB"),
                            ("64gb", "64GB"),
                            ("128gb", "128GB")
                        })
                        {
                            var url = Url.Action("PC", "ProductsList", new { ram = value, usage = Model.Usage, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            var isSelected = Model.Ram == value;
                            <option value="@url" selected="@isSelected">@text</option>
                        }
                    </select>
                </div>

                <!-- GPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var gpuDefaultUrl = Url.Action("PC", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                            var isGpuDefaultSelected = string.IsNullOrEmpty(Model.Gpu);
                        }
                        <option value="@gpuDefaultUrl" selected="@isGpuDefaultSelected">VGA</option>
                        @foreach (var (value, text) in new[] {
                            ("rtx 3060", "RTX 3060 12GB"),
                            ("rtx 3070", "RTX 3070 8GB"),
                            ("irtx 3080", "IRTX 3080 10GB"),
                            ("gtx 1660", "GTX 1660 Super")
                        })
                        {
                            var url = Url.Action("PC", "ProductsList", new { gpu = value, usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                            var isSelected = Model.Gpu == value;
                            <option value="@url" selected="@isSelected">@text</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-10-trieu", "Dưới 10 triệu"},
                        {"10-15-trieu", "10 - 15 triệu"},
                        {"15-20-trieu", "15 - 20 triệu"},
                        {"20-25-trieu", "20 - 25 triệu"},
                        {"25-35-trieu", "25 - 35 triệu"},
                        {"35-trieu", "Trên 35 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var url = Url.Action("PC", "ProductsList", new { priceRange = range.Key, usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu });
                    <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model.PriceRange == range.Key ? "bg-blue-600 text-white" : "")">
                        @range.Value
                    </a>
                }
            </div>
            <a href="@Url.Action("PC", "ProductsList", new { category = Model.Category })" class="inline-block mt-3 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">
                Xóa bộ lọc
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "pc"
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }

            // Giữ lại function updateProductTitles
            function updateProductTitles() {
                const titles = document.querySelectorAll('.product-title');            
                titles.forEach((title, index) => {
                    const fullText = title.getAttribute('data-full-text');
                    
                    title.textContent = fullText;
                    
                    if (fullText && fullText.length > 70) {
                        const truncatedText = fullText.substring(0, 70) + '...';
                        title.textContent = truncatedText;
                    }
                    
                    const tooltip = title.closest('.group').querySelector('.product-tooltip');
                    tooltip.textContent = fullText;
                });
            }

            updateProductTitles();
            setTimeout(updateProductTitles, 500);
        });
    </script>
}

