@model ProductListViewModel
@{
    ViewData["Title"] = "PC";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Nhu cầu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="@Url.Action("PC", "ProductsList")">Nhu cầu</option>
                        @{
                            var gamingUrl = Url.Action("PC", "ProductsList", new { usage = "gaming", priceRange = Model.PriceRange });
                            var graphicsUrl = Url.Action("PC", "ProductsList", new { usage = "graphics", priceRange = Model.PriceRange });
                            var aiUrl = Url.Action("PC", "ProductsList", new { usage = "ai", priceRange = Model.PriceRange });
                            var workstationUrl = Url.Action("PC", "ProductsList", new { usage = "workstation", priceRange = Model.PriceRange });
                            var officeUrl = Url.Action("PC", "ProductsList", new { usage = "office", priceRange = Model.PriceRange });
                        }
                        <option value="@gamingUrl" selected="@(Model.AdditionalFilters["usage"] == "gaming")" class="@(Model.AdditionalFilters["usage"] == "gaming" ? "font-bold" : "")">PC Gaming</option>
                        <option value="@graphicsUrl" selected="@(Model.AdditionalFilters["usage"] == "graphics")" class="@(Model.AdditionalFilters["usage"] == "graphics" ? "font-bold" : "")">PC Đồ hoạ - Làm việc</option>
                        <option value="@aiUrl" selected="@(Model.AdditionalFilters["usage"] == "ai")" class="@(Model.AdditionalFilters["usage"] == "ai" ? "font-bold" : "")">PC AI - Trí tuệ nhân tạo</option>
                        <option value="@workstationUrl" selected="@(Model.AdditionalFilters["usage"] == "workstation")" class="@(Model.AdditionalFilters["usage"] == "workstation" ? "font-bold" : "")">PC Workstation</option>
                        <option value="@officeUrl" selected="@(Model.AdditionalFilters["usage"] == "office")" class="@(Model.AdditionalFilters["usage"] == "office" ? "font-bold" : "")">PC Văn phòng</option>
                    </select>
                </div>

                <!-- CPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="">Loại CPU</option>
                        @{
                            var intelI3Url = Url.Action("PC", "ProductsList", new { cpuType = "intel-i3" });
                            var intelI5Url = Url.Action("PC", "ProductsList", new { cpuType = "intel-i5" });
                            var intelI7Url = Url.Action("PC", "ProductsList", new { cpuType = "intel-i7" });
                            var intelI9Url = Url.Action("PC", "ProductsList", new { cpuType = "intel-i9" });
                            var amdR3Url = Url.Action("PC", "ProductsList", new { cpuType = "amd-r3" });
                            var amdR5Url = Url.Action("PC", "ProductsList", new { cpuType = "amd-r5" });
                            var amdR7Url = Url.Action("PC", "ProductsList", new { cpuType = "amd-r7" });
                            var amdR9Url = Url.Action("PC", "ProductsList", new { cpuType = "amd-r9" });
                        }
                        <option value="@intelI3Url" selected="@(Model.AdditionalFilters["cpuType"] == "intel-i3")">Intel Core i3</option>
                        <option value="@intelI5Url" selected="@(Model.AdditionalFilters["cpuType"] == "intel-i5")">Intel Core i5</option>
                        <option value="@intelI7Url" selected="@(Model.AdditionalFilters["cpuType"] == "intel-i7")">Intel Core i7</option>
                        <option value="@intelI9Url" selected="@(Model.AdditionalFilters["cpuType"] == "intel-i9")">Intel Core i9</option>
                        <option value="@amdR3Url" selected="@(Model.AdditionalFilters["cpuType"] == "amd-r3")">AMD Ryzen 3</option>
                        <option value="@amdR5Url" selected="@(Model.AdditionalFilters["cpuType"] == "amd-r5")">AMD Ryzen 5</option>
                        <option value="@amdR7Url" selected="@(Model.AdditionalFilters["cpuType"] == "amd-r7")">AMD Ryzen 7</option>
                        <option value="@amdR9Url" selected="@(Model.AdditionalFilters["cpuType"] == "amd-r9")">AMD Ryzen 9</option>
                    </select>
                </div>

                <!-- RAM -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="">RAM</option>
                        @{
                            var ram8Url = Url.Action("PC", "ProductsList", new { ram = "8gb" });
                            var ram16Url = Url.Action("PC", "ProductsList", new { ram = "16gb" });
                            var ram32Url = Url.Action("PC", "ProductsList", new { ram = "32gb" });
                            var ram64Url = Url.Action("PC", "ProductsList", new { ram = "64gb" });
                            var ram128Url = Url.Action("PC", "ProductsList", new { ram = "128gb" });
                        }
                        <option value="@ram8Url" selected="@(Model.AdditionalFilters["ram"] == "8gb")">8GB</option>
                        <option value="@ram16Url" selected="@(Model.AdditionalFilters["ram"] == "16gb")">16GB</option>
                        <option value="@ram32Url" selected="@(Model.AdditionalFilters["ram"] == "32gb")">32GB</option>
                        <option value="@ram64Url" selected="@(Model.AdditionalFilters["ram"] == "64gb")">64GB</option>
                        <option value="@ram128Url" selected="@(Model.AdditionalFilters["ram"] == "128gb")">128GB</option>
                    </select>
                </div>

                <!-- GPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="">Card màn hình</option>
                        @{
                            var nvidiaUrl = Url.Action("PC", "ProductsList", new { gpu = "nvidia" });
                            var amdGpuUrl = Url.Action("PC", "ProductsList", new { gpu = "amd" });
                            var intelGpuUrl = Url.Action("PC", "ProductsList", new { gpu = "intel" });
                        }
                        <option value="@nvidiaUrl" selected="@(Model.AdditionalFilters["gpu"] == "nvidia")">NVIDIA</option>
                        <option value="@amdGpuUrl" selected="@(Model.AdditionalFilters["gpu"] == "amd")">AMD</option>
                        <option value="@intelGpuUrl" selected="@(Model.AdditionalFilters["gpu"] == "intel")">Intel</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>
                {
                {"5-15-trieu", "5 triệu - 15 triệu"},
                {"15-20-trieu", "15 triệu - 20 triệu"},
                {"20-30-trieu", "20 triệu - 30 triệu"},
                {"30-50-trieu", "30 triệu - 50 triệu"},
                {"50-100-trieu", "50 triệu - 100 triệu"},
                {"tren-100-trieu", "Trên 100 triệu"}
                };

                    foreach (var range in priceRanges)
                    {
                        var url = Url.Action("PC", "ProductsList", new { priceRange = range.Key, usage = Model.AdditionalFilters["usage"] });
                        var isSelected = Model.PriceRange == range.Key;
                        <a href="@url"
                           class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(isSelected ? "bg-blue-600 text-white" : "")">
                            @range.Value
                        </a>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Sort Options -->
    <div class="flex gap-4 mb-6">
        <button class="px-4 py-2 bg-white rounded-md hover:bg-gray-50">Tăng dần</button>
        <button class="px-4 py-2 bg-white rounded-md hover:bg-gray-50">Giảm dần</button>
        <button class="px-4 py-2 bg-white rounded-md hover:bg-gray-50">Từ A - Z</button>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        @for (int i = 0; i < 15; i++)
        {
            <partial name="_ProductCard" />
        }
    </div>

    <!-- Pagination -->
    <div class="flex justify-center items-center space-x-2 my-8">
        @{
            string GetPageUrl(int pageNum)
            {
                var routeValues = new Dictionary<string, object>();

                if (!string.IsNullOrEmpty(Model.Category))
                {
                    routeValues.Add("category", Model.Category);
                }

                if (!string.IsNullOrEmpty(Model.PriceRange))
                {
                    routeValues.Add("priceRange", Model.PriceRange);
                }

                routeValues.Add("page", pageNum);

                return Url.Action("PC", routeValues);
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage - 1)"
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == 1 ? "opacity-50 cursor-not-allowed" : "")"
        @(Model.CurrentPage == 1 ? "disabled" : "")>
            <span class="sr-only">Previous</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </a>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.CurrentPage)
            {
                <a href="@GetPageUrl(i)"
                   class="px-4 py-2 bg-blue-600 text-white rounded-md">@i</a>
            }
            else if (i <= 3 || i == Model.TotalPages || Math.Abs(i - Model.CurrentPage) <= 1)
            {
                <a href="@GetPageUrl(i)"
                   class="px-4 py-2 bg-white hover:bg-gray-50 rounded-md">@i</a>
            }
            else if (i == 4 || i == Model.TotalPages - 1)
            {
                <span class="px-4 py-2">...</span>
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage + 1)"
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == Model.TotalPages ? "opacity-50 cursor-not-allowed" : "")"
        @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>
            <span class="sr-only">Next</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </a>
    </div>
</div>

