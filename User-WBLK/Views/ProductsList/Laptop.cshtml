@model ProductListViewModel
@{
    ViewData["Title"] = "Laptop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        @* <div class="mb-4">
            <h2 class="font-semibold mb-2">Các bộ lọc đã chọn:</h2>
            <div class="flex flex-wrap gap-2 mb-4">
                @if (!string.IsNullOrEmpty(Model.Usage))
                {
                    var usageText = Model.Usage switch
                    {
                        "gaming" => "Laptop Gaming",
                        "graphics" => "Laptop Đồ hoạ",
                        "workstation" => "Laptop Workstation",
                        "office" => "Laptop Văn phòng",
                        _ => Model.Usage
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @usageText
                        <a href="@Url.Action("Laptop", "ProductsList", new { brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Brand))
                {
                    var brandText = Model.Brand.ToUpper();
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @brandText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.CpuType))
                {
                    var cpuText = Model.CpuType switch
                    {
                        "intel-i3" => "Intel Core i3",
                        "intel-i5" => "Intel Core i5",
                        "intel-i7" => "Intel Core i7",
                        "intel-i9" => "Intel Core i9",
                        "amd-r3" => "AMD Ryzen 3",
                        "amd-r5" => "AMD Ryzen 5",
                        "amd-r7" => "AMD Ryzen 7",
                        "amd-r9" => "AMD Ryzen 9",
                        _ => Model.CpuType
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @cpuText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Ram))
                {
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        RAM @Model.Ram.ToUpper()
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Gpu))
                {
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        GPU @Model.Gpu.ToUpper()
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.PriceRange))
                {
                    var priceText = Model.PriceRange switch
                    {
                        "duoi-10-trieu" => "Dưới 10 triệu",
                        "10-15-trieu" => "10 - 15 triệu",
                        "15-20-trieu" => "15 - 20 triệu",
                        "20-25-trieu" => "20 - 25 triệu",
                        "25-35-trieu" => "25 - 35 triệu",
                        "35-trieu" => "Trên 35 triệu",
                        _ => Model.PriceRange
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @priceText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Usage) || !string.IsNullOrEmpty(Model.Brand) || 
                     !string.IsNullOrEmpty(Model.CpuType) || !string.IsNullOrEmpty(Model.Ram) || 
                     !string.IsNullOrEmpty(Model.Gpu) || !string.IsNullOrEmpty(Model.PriceRange))
                {
                    <a href="@Url.Action("Laptop", "ProductsList")" 
                       class="px-3 py-1 bg-red-100 text-red-800 rounded-full hover:bg-red-200">
                        Xóa tất cả bộ lọc
                    </a>
                }
            </div>
        </div> *@

        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Nhu cầu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var defaultUrl = Url.Action("Laptop", "ProductsList", new { brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@defaultUrl" selected="@(string.IsNullOrEmpty(Model.Usage))">Nhu cầu</option>
                        @foreach (var (value, text) in new[] {
                            ("gaming", "Laptop Gaming"),
                            ("graphics", "Laptop Đồ hoạ"),
                            ("workstation", "Laptop Workstation"),
                            ("office", "Laptop Văn phòng")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { usage = value, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Usage == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- Hãng sản xuất -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var brandDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@brandDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Brand))">Hãng sản xuất</option>
                        @foreach (var (value, text) in new[] {
                            ("asus", "ASUS"),
                            ("acer", "Acer"),
                            ("msi", "MSI"),
                            ("lenovo", "Lenovo"),
                            ("dell", "Dell"),
                            ("hp", "HP"),
                            ("gigabyte", "Gigabyte")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { brand = value, usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Brand == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- CPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var cpuDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@cpuDefaultUrl" selected="@(string.IsNullOrEmpty(Model.CpuType))">Loại CPU</option>
                        @foreach (var (value, text) in new[] {
                            ("intel-i3", "Intel Core i3"),
                            ("intel-i5", "Intel Core i5"),
                            ("intel-i7", "Intel Core i7"),
                            ("intel-i9", "Intel Core i9"),
                            ("amd-r3", "AMD Ryzen 3"),
                            ("amd-r5", "AMD Ryzen 5"),
                            ("amd-r7", "AMD Ryzen 7"),
                            ("amd-r9", "AMD Ryzen 9")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { cpuType = value, usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.CpuType == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- RAM -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var ramDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@ramDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Ram))">RAM</option>
                        @foreach (var (value, text) in new[] {
                            ("8gb", "8GB"),
                            ("16gb", "16GB"),
                            ("32gb", "32GB"),
                            ("64gb", "64GB")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { ram = value, usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Ram == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- GPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var gpuDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                        }
                        <option value="@gpuDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Gpu))">Card màn hình</option>
                        @foreach (var (value, text) in new[] {
                            ("nvidia", "NVIDIA"),
                            ("amd", "AMD"),
                            ("intel", "Intel")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { gpu = value, usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Gpu == value)">@text</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-10-trieu", "Dưới 10 triệu"},
                        {"10-15-trieu", "10 - 15 triệu"},
                        {"15-20-trieu", "15 - 20 triệu"},
                        {"20-25-trieu", "20 - 25 triệu"},
                        {"25-35-trieu", "25 - 35 triệu"},
                        {"35-trieu", "Trên 35 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var url = Url.Action("Laptop", "ProductsList", new { 
                        priceRange = range.Key, 
                        usage = Model.Usage,
                        brand = Model.Brand,
                        cpuType = Model.CpuType,
                        ram = Model.Ram,
                        gpu = Model.Gpu
                    });
                    <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model.PriceRange == range.Key ? "bg-blue-600 text-white" : "")">
                        @range.Value
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "laptop"
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}

