@model ProductListViewModel
@{
    ViewData["Title"] = "Laptop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        @* <div class="mb-4">
            <h2 class="font-semibold mb-2">Các bộ lọc đã chọn:</h2>
            <div class="flex flex-wrap gap-2 mb-4">
                @if (!string.IsNullOrEmpty(Model.Usage))
                {
                    var usageText = Model.Usage switch
                    {
                        "gaming" => "Laptop Gaming",
                        "graphics" => "Laptop Đồ hoạ",
                        "workstation" => "Laptop Workstation",
                        "office" => "Laptop Văn phòng",
                        _ => Model.Usage
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @usageText
                        <a href="@Url.Action("Laptop", "ProductsList", new { brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Brand))
                {
                    var brandText = Model.Brand.ToUpper();
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @brandText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.CpuType))
                {
                    var cpuText = Model.CpuType switch
                    {
                        "intel-i3" => "Intel Core i3",
                        "intel-i5" => "Intel Core i5",
                        "intel-i7" => "Intel Core i7",
                        "intel-i9" => "Intel Core i9",
                        "amd-r3" => "AMD Ryzen 3",
                        "amd-r5" => "AMD Ryzen 5",
                        "amd-r7" => "AMD Ryzen 7",
                        "amd-r9" => "AMD Ryzen 9",
                        _ => Model.CpuType
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @cpuText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Ram))
                {
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        RAM @Model.Ram.ToUpper()
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Gpu))
                {
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        GPU @Model.Gpu.ToUpper()
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.PriceRange))
                {
                    var priceText = Model.PriceRange switch
                    {
                        "duoi-10-trieu" => "Dưới 10 triệu",
                        "10-15-trieu" => "10 - 15 triệu",
                        "15-20-trieu" => "15 - 20 triệu",
                        "20-25-trieu" => "20 - 25 triệu",
                        "25-35-trieu" => "25 - 35 triệu",
                        "35-trieu" => "Trên 35 triệu",
                        _ => Model.PriceRange
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @priceText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Usage) || !string.IsNullOrEmpty(Model.Brand) || 
                     !string.IsNullOrEmpty(Model.CpuType) || !string.IsNullOrEmpty(Model.Ram) || 
                     !string.IsNullOrEmpty(Model.Gpu) || !string.IsNullOrEmpty(Model.PriceRange))
                {
                    <a href="@Url.Action("Laptop", "ProductsList")" 
                       class="px-3 py-1 bg-red-100 text-red-800 rounded-full hover:bg-red-200">
                        Xóa tất cả bộ lọc
                    </a>
                }
            </div>
        </div> *@

        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Nhu cầu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var defaultUrl = Url.Action("Laptop", "ProductsList", new { brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@defaultUrl" selected="@(string.IsNullOrEmpty(Model.Usage))">Nhu cầu</option>
                        @foreach (var (value, text) in new[] {
                            ("gaming", "Laptop Gaming"),
                            ("graphics", "Laptop Đồ hoạ"),
                            ("workstation", "Laptop Workstation"),
                            ("office", "Laptop Văn phòng")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { usage = value, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Usage == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- Hãng sản xuất -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var brandDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@brandDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Brand))">Hãng sản xuất</option>
                        @foreach (var (value, text) in new[] {
                            ("asus", "ASUS"),
                            ("acer", "Acer"),
                            ("msi", "MSI"),
                            ("lenovo", "Lenovo"),
                            ("dell", "Dell"),
                            ("hp", "HP"),
                            ("gigabyte", "Gigabyte")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { brand = value, usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Brand == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- CPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var cpuDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@cpuDefaultUrl" selected="@(string.IsNullOrEmpty(Model.CpuType))">Loại CPU</option>
                        @foreach (var (value, text) in new[] {
                            ("intel-i3", "Intel Core i3"),
                            ("intel-i5", "Intel Core i5"),
                            ("intel-i7", "Intel Core i7"),
                            ("intel-i9", "Intel Core i9"),
                            ("amd-r3", "AMD Ryzen 3"),
                            ("amd-r5", "AMD Ryzen 5"),
                            ("amd-r7", "AMD Ryzen 7"),
                            ("amd-r9", "AMD Ryzen 9")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { cpuType = value, usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.CpuType == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- RAM -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var ramDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@ramDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Ram))">RAM</option>
                        @foreach (var (value, text) in new[] {
                            ("8gb", "8GB"),
                            ("16gb", "16GB"),
                            ("32gb", "32GB"),
                            ("64gb", "64GB")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { ram = value, usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Ram == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- GPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var gpuDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                        }
                        <option value="@gpuDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Gpu))">Card màn hình</option>
                        @foreach (var (value, text) in new[] {
                            ("nvidia", "NVIDIA"),
                            ("amd", "AMD"),
                            ("intel", "Intel")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { gpu = value, usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Gpu == value)">@text</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-10-trieu", "Dưới 10 triệu"},
                        {"10-15-trieu", "10 - 15 triệu"},
                        {"15-20-trieu", "15 - 20 triệu"},
                        {"20-25-trieu", "20 - 25 triệu"},
                        {"25-35-trieu", "25 - 35 triệu"},
                        {"35-trieu", "Trên 35 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var url = Url.Action("Laptop", "ProductsList", new { 
                        priceRange = range.Key, 
                        usage = Model.Usage,
                        brand = Model.Brand,
                        cpuType = Model.CpuType,
                        ram = Model.Ram,
                        gpu = Model.Gpu
                    });
                    <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model.PriceRange == range.Key ? "bg-blue-600 text-white" : "")">
                        @range.Value
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            @foreach (var product in Model.Products)
            {
                <div class="bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300">
                    <a href="/laptop/@product.IdSp" class="block">
                        <div class="p-3">
                            <img src="@product.Hinhanh" alt="@product.Tensanpham" 
                                 class="w-full h-40 object-cover rounded-lg mb-3">
                            <div class="relative group">
                                <h3 class="text-base font-semibold mb-2 product-title overflow-hidden"
                                    data-full-text="@product.Tensanpham">
                                    @product.Tensanpham
                                </h3>
                                <div class="absolute left-0 -top-12 bg-black text-white text-xs rounded-lg px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-nowrap product-tooltip">
                                    @product.Tensanpham
                                </div>
                            </div>
                            <p class="text-red-600 font-bold text-xl mb-4">@product.Gia.ToString("N0")đ</p>
                            <button class="w-full hover:opacity-80 transition-opacity duration-300">
                                <div class="flex items-center gap-2">
                                    <div class="bg-[#0066CC] p-2 rounded-full">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                        </svg>
                                    </div>
                                    <span class="text-gray-700">Thêm vào giỏ hàng</span>
                                </div>
                            </button>
                        </div>
                    </a>
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8">
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-xl font-semibold text-gray-700 mb-2">Không tìm thấy sản phẩm</h3>
                    <p class="text-gray-500">Không có sản phẩm nào phù hợp với tiêu chí tìm kiếm của bạn.</p>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <div class="mt-8 flex justify-center">
            <div class="flex space-x-2">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    var paginationUrl = Url.Action("Laptop", "ProductsList", new { 
                        page = i,
                        usage = Model.Usage,
                        brand = Model.Brand,
                        cpuType = Model.CpuType,
                        ram = Model.Ram,
                        gpu = Model.Gpu,
                        priceRange = Model.PriceRange
                    });
                    <a href="@paginationUrl" class="px-4 py-2 rounded @(Model.CurrentPage == i ? "bg-blue-500 text-white" : "bg-gray-200")">
                        @i
                    </a>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            function updateProductTitles() {
                const titles = document.querySelectorAll('.product-title');            
                titles.forEach((title, index) => {
                    const fullText = title.getAttribute('data-full-text');
                    
                    title.textContent = fullText;
                    
                    if (fullText && fullText.length > 70) {
                        const truncatedText = fullText.substring(0, 70) + '...';
                        title.textContent = truncatedText;
                    }
                    
                    const tooltip = title.closest('.group').querySelector('.product-tooltip');
                    tooltip.textContent = fullText;
                });
            }

            updateProductTitles();
            setTimeout(updateProductTitles, 500);
        });
    </script>
}

