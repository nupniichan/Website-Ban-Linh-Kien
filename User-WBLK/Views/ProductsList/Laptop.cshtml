@model ProductListViewModel
@{
    ViewData["Title"] = "Laptop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        @* <div class="mb-4">
            <h2 class="font-semibold mb-2">Các bộ lọc đã chọn:</h2>
            <div class="flex flex-wrap gap-2 mb-4">
                @if (!string.IsNullOrEmpty(Model.Usage))
                {
                    var usageText = Model.Usage switch
                    {
                        "gaming" => "Laptop Gaming",
                        "graphics" => "Laptop Đồ hoạ",
                        "workstation" => "Laptop Workstation",
                        "office" => "Laptop Văn phòng",
                        _ => Model.Usage
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @usageText
                        <a href="@Url.Action("Laptop", "ProductsList", new { brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Brand))
                {
                    var brandText = Model.Brand.ToUpper();
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @brandText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.CpuType))
                {
                    var cpuText = Model.CpuType switch
                    {
                        "intel-i3" => "Intel Core i3",
                        "intel-i5" => "Intel Core i5",
                        "intel-i7" => "Intel Core i7",
                        "intel-i9" => "Intel Core i9",
                        "amd-r3" => "AMD Ryzen 3",
                        "amd-r5" => "AMD Ryzen 5",
                        "amd-r7" => "AMD Ryzen 7",
                        "amd-r9" => "AMD Ryzen 9",
                        _ => Model.CpuType
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @cpuText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Ram))
                {
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        RAM @Model.Ram.ToUpper()
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Gpu))
                {
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        GPU @Model.Gpu.ToUpper()
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.PriceRange))
                {
                    var priceText = Model.PriceRange switch
                    {
                        "duoi-10-trieu" => "Dưới 10 triệu",
                        "10-15-trieu" => "10 - 15 triệu",
                        "15-20-trieu" => "15 - 20 triệu",
                        "20-25-trieu" => "20 - 25 triệu",
                        "25-35-trieu" => "25 - 35 triệu",
                        "35-trieu" => "Trên 35 triệu",
                        _ => Model.PriceRange
                    };
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full flex items-center">
                        @priceText
                        <a href="@Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu })" 
                           class="ml-2 text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </a>
                    </span>
                }

                @if (!string.IsNullOrEmpty(Model.Usage) || !string.IsNullOrEmpty(Model.Brand) || 
                     !string.IsNullOrEmpty(Model.CpuType) || !string.IsNullOrEmpty(Model.Ram) || 
                     !string.IsNullOrEmpty(Model.Gpu) || !string.IsNullOrEmpty(Model.PriceRange))
                {
                    <a href="@Url.Action("Laptop", "ProductsList")" 
                       class="px-3 py-1 bg-red-100 text-red-800 rounded-full hover:bg-red-200">
                        Xóa tất cả bộ lọc
                    </a>
                }
            </div>
        </div> *@

        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Nhu cầu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var defaultUrl = Url.Action("Laptop", "ProductsList", new { brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@defaultUrl" selected="@(string.IsNullOrEmpty(Model.Usage))">Nhu cầu</option>
                        @foreach (var (value, text) in new[] {
                            ("gaming", "Laptop Gaming"),
                            ("graphics", "Laptop Đồ hoạ"),
                            ("workstation", "Laptop Workstation"),
                            ("office", "Laptop Văn phòng")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { usage = value, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Usage == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- Hãng sản xuất -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var brandDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@brandDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Brand))">Hãng sản xuất</option>
                        @foreach (var (value, text) in new[] {
                            ("asus", "ASUS"),
                            ("acer", "Acer"),
                            ("msi", "MSI"),
                            ("lenovo", "Lenovo"),
                            ("dell", "Dell"),
                            ("hp", "HP"),
                            ("gigabyte", "Gigabyte")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { brand = value, usage = Model.Usage, cpuType = Model.CpuType, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Brand == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- CPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var cpuDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@cpuDefaultUrl" selected="@(string.IsNullOrEmpty(Model.CpuType))">Loại CPU</option>
                        @foreach (var (value, text) in new[] {
                            ("intel core i3", "Intel Core i3"),
                            ("intel core i5", "Intel Core i5"),
                            ("intel core i7", "Intel Core i7"),
                            ("intel core i9", "Intel Core i9"),
                            ("amd ryzen 3", "AMD Ryzen 3"),
                            ("amd ryzen 5", "AMD Ryzen 5"),
                            ("amd ryzen 7", "AMD Ryzen 7"),
                            ("amd ryzen 9", "AMD Ryzen 9")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { cpuType = value, usage = Model.Usage, brand = Model.Brand, ram = Model.Ram, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.CpuType == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- RAM -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var ramDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                        }
                        <option value="@ramDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Ram))">RAM</option>
                        @foreach (var (value, text) in new[] {
                            ("8gb", "8GB"),
                            ("16gb", "16GB"),
                            ("32gb", "32GB"),
                            ("64gb", "64GB")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { ram = value, usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, gpu = Model.Gpu, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Ram == value)">@text</option>
                        }
                    </select>
                </div>

                <!-- GPU -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var gpuDefaultUrl = Url.Action("Laptop", "ProductsList", new { usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                        }
                        <option value="@gpuDefaultUrl" selected="@(string.IsNullOrEmpty(Model.Gpu))">VGA</option>
                        @foreach (var (value, text) in new[] {
                            ("rtx 3060", "RTX 3060"),
                            ("gtx 1650", "GTX 1650"),
                            ("rtx 3080", "RTX 3080"),
                            ("rtx 3070", "RTX 3070"),
                            ("intel iris xe", "Intel Iris Xe"),
                            ("gtx 1660 ti", "GTX 1660 Ti"),
                            ("rtx 3050", "RTX 3050"),
                            ("nvidia mx250", "NVIDIA MX250")
                        })
                        {
                            var url = Url.Action("Laptop", "ProductsList", new { gpu = value, usage = Model.Usage, brand = Model.Brand, cpuType = Model.CpuType, ram = Model.Ram, priceRange = Model.PriceRange });
                            <option value="@url" selected="@(Model.Gpu == value)">@text</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            
            <!-- Price Range Buttons -->
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-10-trieu", "Dưới 10 triệu"},
                        {"10-15-trieu", "10 - 15 triệu"},
                        {"15-20-trieu", "15 - 20 triệu"},
                        {"20-25-trieu", "20 - 25 triệu"},
                        {"25-35-trieu", "25 - 35 triệu"},
                        {"35-trieu", "Trên 35 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var url = Url.Action("Laptop", "ProductsList", new { 
                        priceRange = range.Key, 
                        usage = Model.Usage,
                        brand = Model.Brand,
                        cpuType = Model.CpuType,
                        ram = Model.Ram,
                        gpu = Model.Gpu
                    });
                    var isSelected = Model.PriceRange == range.Key;
                    <a href="@url" class="price-range-btn flex-1 text-center px-3 py-2 rounded-lg transition-all duration-200 @(isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-100 hover:bg-gray-200")">
                        @range.Value
                    </a>
                }
            </div>
            
            <!-- Clear Filters Button -->
            <div class="mt-4 text-center">
                @if (!string.IsNullOrEmpty(Model.Brand) || !string.IsNullOrEmpty(Model.PriceRange) || !string.IsNullOrEmpty(Model.Usage) || !string.IsNullOrEmpty(Model.CpuType) || !string.IsNullOrEmpty(Model.Ram) || !string.IsNullOrEmpty(Model.Gpu))
                {
                    <a href="@Url.Action("Laptop", "ProductsList", new { category = Model.Category })" 
                       class="inline-block bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-all duration-200 shadow-md">
                        <i class="fas fa-times-circle mr-2"></i>Xóa bộ lọc
                    </a>
                }
            </div>
        </div>
    </div>
    
    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "laptop"
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Xử lý thanh trượt giá
            const priceSlider = document.getElementById('priceRangeSlider');
            if (priceSlider) {
                // Tùy chỉnh giao diện thanh trượt
                priceSlider.addEventListener('input', function() {
                    // Cập nhật giao diện khi người dùng kéo thanh trượt
                    updateSliderBackground(this);
                });
                
                // Xử lý khi người dùng thả thanh trượt
                priceSlider.addEventListener('change', function() {
                    const value = parseInt(this.value);
                    let priceRange = '';
                    
                    // Chuyển đổi giá trị thanh trượt thành tham số URL
                    switch(value) {
                        case 0:
                            // Không có bộ lọc giá
                            navigateWithoutPriceFilter();
                            return;
                        case 1:
                            priceRange = 'duoi-10-trieu';
                            break;
                        case 2:
                            priceRange = '10-15-trieu';
                            break;
                        case 3:
                            priceRange = '15-20-trieu';
                            break;
                        case 4:
                            priceRange = '20-25-trieu';
                            break;
                        case 5:
                            priceRange = '25-35-trieu';
                            break;
                        case 6:
                            priceRange = 'tren-35-trieu';
                            break;
                    }
                    
                    // Chuyển hướng đến URL với bộ lọc giá mới
                    navigateWithPriceFilter(priceRange);
                });
                
                // Khởi tạo giao diện thanh trượt
                updateSliderBackground(priceSlider);
            }
            
            // Hàm cập nhật giao diện thanh trượt
            function updateSliderBackground(slider) {
                const value = slider.value;
                const max = slider.max;
                const percentage = (value / max) * 100;
                slider.style.background = `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${percentage}%, #e5e7eb ${percentage}%, #e5e7eb 100%)`;
            }
            
            // Hàm chuyển hướng không có bộ lọc giá
            function navigateWithoutPriceFilter() {
                const currentUrl = new URL(window.location.href);
                const params = new URLSearchParams(currentUrl.search);
                params.delete('priceRange');
                
                // Tạo URL mới và chuyển hướng
                currentUrl.search = params.toString();
                AppLoading.showBeforeRedirect(currentUrl.toString());
            }
            
            // Hàm chuyển hướng với bộ lọc giá
            function navigateWithPriceFilter(priceRange) {
                const currentUrl = new URL(window.location.href);
                const params = new URLSearchParams(currentUrl.search);
                params.set('priceRange', priceRange);
                
                // Tạo URL mới và chuyển hướng
                currentUrl.search = params.toString();
                AppLoading.showBeforeRedirect(currentUrl.toString());
            }
            
            // Thêm hiệu ứng hover cho các nút danh mục
            const categoryButtons = document.querySelectorAll('.category-btn');
            categoryButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            // Thêm hiệu ứng hover cho các nút lọc giá
            const priceButtons = document.querySelectorAll('.price-range-btn');
            priceButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            // Xử lý nút "Xem thêm" và "Thu gọn"
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });
                    
                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
    
    <style>
        /* Hiệu ứng chuyển đổi cho các nút */
        .price-range-btn, .category-btn {
            transition: all 0.2s ease;
        }
    </style>
}

