@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị lưu trữ";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Storage", new { category = "hdd" })" 
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "hdd" ? "bg-blue-600 text-white" : "")">
                HDD
            </a>
            <a href="@Url.Action("Storage", new { category = "ssd" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "ssd" ? "bg-blue-600 text-white" : "")">
                SSD
            </a>
            <a href="@Url.Action("Storage", new { category = "usb" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "usb" ? "bg-blue-600 text-white" : "")">
                USB
            </a>
            <a href="@Url.Action("Storage", new { category = "estorage" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "estorage" ? "bg-blue-600 text-white" : "")">
                Ổ cứng di động
            </a>
        </div>
    </div>

    <!-- Dynamic Filters based on category -->
    <div class="bg-white rounded-lg p-4">
    <h2 class="font-semibold mb-2">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "hdd":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var hddBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "seagate", Text = "Seagate" },
                                    new { Value = "western-digital", Text = "Western Digital" },
                                    new { Value = "toshiba", Text = "Toshiba" }
                                };
                            }
                            @foreach (var brand in hddBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="capacity" class="px-4 py-2 border rounded-md">
                            @{
                                var hddCapacities = new[] {
                                    new { Value = "", Text = "Tất cả dung lượng" },
                                    new { Value = "1tb", Text = "1TB" },
                                    new { Value = "2tb", Text = "2TB" },
                                    new { Value = "4tb", Text = "4TB" },
                                    new { Value = "6tb", Text = "6TB" },
                                    new { Value = "8tb", Text = "8TB" }
                                };
                            }
                            @foreach (var capacity in hddCapacities)
                            {
                                <option value="@capacity.Value" selected="@(Model?.Capacity == capacity.Value)">@capacity.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "ssd":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var ssdBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "samsung", Text = "Samsung" },
                                    new { Value = "crucial", Text = "Crucial" },
                                    new { Value = "kingston", Text = "Kingston" },
                                    new { Value = "wd-black", Text = "WD Black" }
                                };
                            }
                            @foreach (var brand in ssdBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="capacity" class="px-4 py-2 border rounded-md">
                            @{
                                var ssdCapacities = new[] {
                                    new { Value = "", Text = "Tất cả dung lượng" },
                                    new { Value = "250gb", Text = "250GB" },
                                    new { Value = "500gb", Text = "500GB" },
                                    new { Value = "1tb", Text = "1TB" },
                                    new { Value = "2tb", Text = "2TB" }
                                };
                            }
                            @foreach (var capacity in ssdCapacities)
                            {
                                <option value="@capacity.Value" selected="@(Model?.Capacity == capacity.Value)">@capacity.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md">
                            @{
                                var ssdTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "sata", Text = "SATA" },
                                    new { Value = "nvme", Text = "NVMe" }
                                };
                            }
                            @foreach (var type in ssdTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.Type == type.Value)">@type.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "usb":
            case "estorage":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var usbBrands = Model?.Category == "usb" ? new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "kingston", Text = "Kingston" },
                                    new { Value = "sandisk", Text = "SanDisk" },
                                    new { Value = "samsung", Text = "Samsung" }
                                } : new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "seagate", Text = "Seagate" },
                                    new { Value = "western-digital", Text = "Western Digital" },
                                    new { Value = "toshiba", Text = "Toshiba" }
                                };
                            }
                            @foreach (var brand in usbBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="capacity" class="px-4 py-2 border rounded-md">
                            @{
                                var portableCapacities = Model?.Category == "usb" ? new[] {
                                    new { Value = "", Text = "Tất cả dung lượng" },
                                    new { Value = "32gb", Text = "32GB" },
                                    new { Value = "64gb", Text = "64GB" },
                                    new { Value = "128gb", Text = "128GB" },
                                    new { Value = "256gb", Text = "256GB" }
                                } : new[] {
                                    new { Value = "", Text = "Tất cả dung lượng" },
                                    new { Value = "1tb", Text = "1TB" },
                                    new { Value = "2tb", Text = "2TB" },
                                    new { Value = "4tb", Text = "4TB" },
                                    new { Value = "5tb", Text = "5TB" }
                                };
                            }
                            @foreach (var capacity in portableCapacities)
                            {
                                <option value="@capacity.Value" selected="@(Model?.Capacity == capacity.Value)">@capacity.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;
        }

        <!-- Price Range -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                <a href="#" data-price-range="duoi-1-trieu" 
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "duoi-1-trieu" ? "bg-blue-600 text-white" : "")">
                    Dưới 1 triệu
                </a>
                <a href="#" data-price-range="1-2-trieu" 
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "1-2-trieu" ? "bg-blue-600 text-white" : "")">
                    1 - 2 triệu
                </a>
                <a href="#" data-price-range="2-5-trieu" 
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "2-5-trieu" ? "bg-blue-600 text-white" : "")">
                    2 - 5 triệu
                </a>
                <a href="#" data-price-range="5-10-trieu" 
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "5-10-trieu" ? "bg-blue-600 text-white" : "")">
                    5 - 10 triệu
                </a>
                <a href="#" data-price-range="tren-10-trieu" 
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "tren-10-trieu" ? "bg-blue-600 text-white" : "")">
                    Trên 10 triệu
                </a>
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "storage"
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.querySelectorAll('[data-price-range]').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const priceRange = this.getAttribute('data-price-range');
                const currentPriceRange = '@Model?.AdditionalFilters?.GetValueOrDefault("priceRange")';
                
                if (priceRange === currentPriceRange) {
                    const params = new URLSearchParams(window.location.search);
                    params.delete('priceRange');
                    
                    document.querySelectorAll('select').forEach(select => {
                        if (select.value) {
                            params.set(select.id, select.value);
                        }
                    });
                    
                    window.location.href = `${window.location.pathname}?${params.toString()}`;
                } else {
                    const params = new URLSearchParams(window.location.search);
                    params.set('priceRange', priceRange);
                    
                    document.querySelectorAll('select').forEach(select => {
                        if (select.value) {
                            params.set(select.id, select.value);
                        }
                    });
                    
                    window.location.href = `${window.location.pathname}?${params.toString()}`;
                }
            });
        });

        document.querySelectorAll('select').forEach(select => {
            select.addEventListener('change', function() {
                const params = new URLSearchParams(window.location.search);
                const currentCategory = '@Model?.Category';
                
                params.delete('brand');
                params.delete('capacity');
                params.delete('type');
                
                if (currentCategory) {
                    params.set('category', currentCategory);
                }
                
                document.querySelectorAll('select').forEach(s => {
                    if (s.value) {
                        params.set(s.id, s.value);
                    }
                });
                
                const currentPriceRange = '@Model?.AdditionalFilters?.GetValueOrDefault("priceRange")';
                if (currentPriceRange) {
                    params.set('priceRange', currentPriceRange);
                }
                
                window.location.href = `${window.location.pathname}?${params.toString()}`;
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}

