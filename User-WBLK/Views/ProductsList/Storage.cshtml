@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị lưu trữ";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new Dictionary<string, string>() {
                    {"ssd", "SSD"},
                    {"hdd", "HDD"}
                };
            }
            @foreach (var category in categories)
            {
                var parameters = new Dictionary<string, string>
                {
                    { "category", category.Key }
                };
                var url = Url.Action("Storage", parameters);
                var isSelected = Model.Category?.ToLower() == category.Key;
                <a href="@url" class="category-btn flex-1 text-center px-3 py-2 rounded-lg transition-all duration-200 @(isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-100 hover:bg-gray-200")">
                    @category.Value
                </a>
            }
        </div>
    </div>

    <!-- Dynamic Filters based on category -->
    <div class="bg-white rounded-lg p-4 mt-4">
        <h2 class="font-semibold mb-4">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "ssd":
                {
                    <div class="space-y-4">
                        <div class="flex flex-wrap gap-2">
                            <!-- Brand Filter -->
                            <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var ssdBrands = new[]
                                    {
                                        new { Value = "", Text = "Tất cả thương hiệu" },
                                        new { Value = "samsung", Text = "Samsung" },
                                        new { Value = "crucial", Text = "Crucial" },
                                        new { Value = "wd", Text = "Western Digital" },
                                        new { Value = "kingston", Text = "Kingston" },
                                        new { Value = "seagate", Text = "Seagate" },
                                        new { Value = "intel", Text = "Intel" },
                                        new { Value = "adata", Text = "ADATA" },
                                        new { Value = "corsair", Text = "Corsair" },
                                        new { Value = "pny", Text = "PNY" },
                                        new { Value = "sandisk", Text = "SanDisk" }
                                    };
                                }
                                @foreach (var brand in ssdBrands)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", "ssd" }
                                    };
                                    if (!string.IsNullOrEmpty(brand.Value))
                                        parameters.Add("brand", brand.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);
                                    if (Model.AdditionalFilters != null)
                                    {
                                        if (Model.AdditionalFilters.ContainsKey("capacity"))
                                            parameters.Add("capacity", Model.AdditionalFilters["capacity"]);
                                        if (Model.AdditionalFilters.ContainsKey("type"))
                                            parameters.Add("type", Model.AdditionalFilters["type"]);
                                    }
                                    
                                    var url = Url.Action("Storage", parameters);
                                    var isSelected = Model.Brand?.ToLower() == brand.Value.ToLower();
                                    <option value="@url" selected="@isSelected">@brand.Text</option>
                                }
                            </select>

                            <!-- Capacity Filter -->
                            <select id="capacity" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var ssdCapacities = new[]
                                    {
                                        new { Value = "", Text = "Tất cả dung lượng" },
                                        new { Value = "480gb", Text = "480GB" },
                                        new { Value = "500gb", Text = "500GB" },
                                        new { Value = "512gb", Text = "512GB" },
                                        new { Value = "1tb", Text = "1TB" },
                                        new { Value = "2tb", Text = "2TB" }
                                    };
                                }
                                @foreach (var capacity in ssdCapacities)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", "ssd" }
                                    };
                                    if (!string.IsNullOrEmpty(Model.Brand))
                                        parameters.Add("brand", Model.Brand);
                                    if (!string.IsNullOrEmpty(capacity.Value))
                                        parameters.Add("capacity", capacity.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);
                                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                                        parameters.Add("type", Model.AdditionalFilters["type"]);
                                    
                                    var url = Url.Action("Storage", parameters);
                                    var isSelected = Model.AdditionalFilters?.GetValueOrDefault("capacity") == capacity.Value;
                                    <option value="@url" selected="@isSelected">@capacity.Text</option>
                                }
                            </select>

                            <!-- Interface Type Filter -->
                            <select id="type" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var ssdTypes = new[]
                                    {
                                        new { Value = "", Text = "Tất cả chuẩn kết nối" },
                                        new { Value = "sata", Text = "SATA" },
                                        new { Value = "pcie nvme", Text = "PCIe NVMe" }
                                    };
                                }
                                @foreach (var type in ssdTypes)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", "ssd" }
                                    };
                                    if (!string.IsNullOrEmpty(Model.Brand))
                                        parameters.Add("brand", Model.Brand);
                                    if (!string.IsNullOrEmpty(type.Value))
                                        parameters.Add("type", type.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);
                                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("capacity"))
                                        parameters.Add("capacity", Model.AdditionalFilters["capacity"]);
                                    
                                    var url = Url.Action("Storage", parameters);
                                    var isSelected = Model.AdditionalFilters?.GetValueOrDefault("type") == type.Value;
                                    <option value="@url" selected="@isSelected">@type.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    break;
                }
            case "hdd":
                {
                    <div class="space-y-4">
                        <div class="flex flex-wrap gap-2">
                            <!-- Brand Filter -->
                            <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var hddBrands = new[]
                                    {
                                        new { Value = "", Text = "Tất cả thương hiệu" },
                                        new { Value = "seagate", Text = "Seagate" },
                                        new { Value = "wd", Text = "Western Digital" },
                                        new { Value = "toshiba", Text = "Toshiba" }
                                    };
                                }
                                @foreach (var brand in hddBrands)
                                {
                                    var parameters = new Dictionary<string, string>();
                                    parameters.Add("category", Model.Category);
                                    if (!string.IsNullOrEmpty(brand.Value))
                                    {
                                        parameters.Add("brand", brand.Value);
                                    }
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                    {
                                        parameters.Add("priceRange", Model.PriceRange);
                                    }
                                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("capacity"))
                                    {
                                        parameters.Add("capacity", Model.AdditionalFilters["capacity"]);
                                    }
                                    var url = Url.Action("Storage", parameters);
                                    if (Model.Brand == brand.Value)
                                    {
                                        <option value="@url" selected>@brand.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@url">@brand.Text</option>
                                    }
                                }
                            </select>

                            <!-- Capacity Filter -->
                            <select id="capacity" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var hddCapacities = new[]
                                    {
                                        new { Value = "", Text = "Tất cả dung lượng" },
                                        new { Value = "1tb", Text = "1TB" },
                                        new { Value = "2tb", Text = "2TB" },
                                        new { Value = "4tb", Text = "4TB" },
                                        new { Value = "6tb", Text = "6TB" },
                                        new { Value = "8tb", Text = "8TB" },
                                        new { Value = "10tb", Text = "10TB" }
                                    };
                                }
                                @foreach (var capacity in hddCapacities)
                                {
                                    var parameters = new Dictionary<string, string>();
                                    parameters.Add("category", Model.Category);
                                    if (!string.IsNullOrEmpty(Model.Brand))
                                    {
                                        parameters.Add("brand", Model.Brand);
                                    }
                                    if (!string.IsNullOrEmpty(capacity.Value))
                                    {
                                        parameters.Add("capacity", capacity.Value);
                                    }
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                    {
                                        parameters.Add("priceRange", Model.PriceRange);
                                    }
                                    var url = Url.Action("Storage", parameters);
                                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.GetValueOrDefault("capacity") == capacity.Value)
                                    {
                                        <option value="@url" selected>@capacity.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@url">@capacity.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    break;
                }
            default:
                <script>
                    window.location.href = '@Url.Action("Storage", "ProductsList", new { category = "hdd" })';
                </script>
                break;
        }

        <!-- Price Range -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            
            <!-- Price Range Buttons -->
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-1-trieu", "Dưới 1 triệu"},
                        {"1-2-trieu", "1 - 2 triệu"},
                        {"2-5-trieu", "2 - 5 triệu"},
                        {"5-10-trieu", "5 - 10 triệu"},
                        {"tren-10-trieu", "Trên 10 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var parameters = new Dictionary<string, string>();
                    
                    // Thêm các tham số cơ bản
                    if (!string.IsNullOrEmpty(Model.Brand))
                        parameters.Add("brand", Model.Brand);
                    if (!string.IsNullOrEmpty(Model.Type))
                        parameters.Add("type", Model.Type);
                    parameters.Add("priceRange", range.Key);
                    
                    // Kiểm tra và thêm các bộ lọc bổ sung (nếu có)
                    if (Model.AdditionalFilters != null)
                    {
                        if (Model.AdditionalFilters.ContainsKey("capacity"))
                            parameters.Add("capacity", Model.AdditionalFilters["capacity"]);
                        if (Model.AdditionalFilters.ContainsKey("type"))
                            parameters.Add("type", Model.AdditionalFilters["type"]);
                    }
                    
                    var url = Url.Action("Storage", "ProductsList", parameters);
                    var isSelected = Model.PriceRange == range.Key;
                    <a href="@url" class="price-range-btn flex-1 text-center px-3 py-2 rounded-lg transition-all duration-200 @(isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-100 hover:bg-gray-200")">
                        @range.Value
                    </a>
                }
            </div>
            
            <!-- Clear Filters Button -->
            <div class="mt-4 text-center">
                @if (!string.IsNullOrEmpty(Model.Brand) || !string.IsNullOrEmpty(Model.PriceRange) || (Model.AdditionalFilters != null && Model.AdditionalFilters.Count > 0))
                {
                    <a href="@Url.Action("Storage", "ProductsList", new { category = Model.Category })" 
                       class="inline-block bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-all duration-200 shadow-md">
                        <i class="fas fa-times-circle mr-2"></i>Xóa bộ lọc
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model="@(new ProductCardViewModel {
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "storage"
                    })" />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Thêm hiệu ứng hover cho các nút lọc giá
            const priceButtons = document.querySelectorAll('.price-range-btn');
            priceButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            // Thêm hiệu ứng hover cho các nút danh mục
            const categoryButtons = document.querySelectorAll('.category-btn');
            categoryButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            // Xử lý nút "Xem thêm" và "Thu gọn"
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });
                    
                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
    
    <style>
        /* Hiệu ứng chuyển đổi cho các nút */
        .price-range-btn, .category-btn {
            transition: all 0.2s ease;
        }
    </style>
}
