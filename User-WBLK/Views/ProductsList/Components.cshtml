@model ProductListViewModel
@{
    ViewData["Title"] = "Linh kiện";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Định nghĩa các danh sách options
    var cpuSeries = new[] {
        new { Value = "", Text = "Dòng CPU" },
        new { Value = "Intel core", Text = "Intel Core" },
        new { Value = "Amd R4yzen", Text = "AMD Ryzen" }
    };
    
    var cores = new[] {
        new { Value = "", Text = "Số nhân" },
        new { Value = "4", Text = "4 nhân" },
        new { Value = "6", Text = "6 nhân" },
        new { Value = "8", Text = "8 nhân" }
    };
}
<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new[] {
                    ("cpu", "CPU"),
                    ("vga", "Card đồ họa"),
                    ("mainboard", "Bo mạch chủ"),
                    ("ram", "RAM"),
                    ("psu", "Nguồn máy tính"),
                    ("case", "Case máy tính")
                };
            }
            @foreach (var (value, text) in categories)
            {
                var parameters = new Dictionary<string, string>
                {
                    { "category", value }
                };
                
                var url = Url.Action("Components", "ProductsList", parameters);
                var isSelected = Model.Category == value;
                <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(isSelected ? "bg-blue-600 text-white" : "")">
                    @text
                </a>
            }
        </div>
    </div>

    <!-- Dynamic Filters based on category -->
    <div class="bg-white rounded-lg p-4 mt-4">
        <h2 class="font-semibold mb-4">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "cpu":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var brands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "intel", Text = "Intel" },
                                    new { Value = "amd", Text = "AMD" }
                                };
                            }
                            @foreach (var brand in brands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null)
                                {
                                    if (Model.AdditionalFilters.ContainsKey("cpuSeries"))
                                        parameters.Add("cpuSeries", Model.AdditionalFilters["cpuSeries"]);
                                    if (Model.AdditionalFilters.ContainsKey("cores"))
                                        parameters.Add("cores", Model.AdditionalFilters["cores"]);
                                }
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand == brand.Value;
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- CPU Series Filter -->
                        <select id="cpuSeries" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @foreach (var series in cpuSeries)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(series.Value))
                                    parameters.Add("cpuSeries", series.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("cores") == true)
                                    parameters.Add("cores", Model.AdditionalFilters["cores"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("cpuSeries") == series.Value;
                                <option value="@url" selected="@isSelected">@series.Text</option>
                            }
                        </select>

                        <!-- Cores Filter -->
                        <select id="cores" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @foreach (var core in cores)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(core.Value))
                                    parameters.Add("cores", core.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("cpuSeries") == true)
                                    parameters.Add("cpuSeries", Model.AdditionalFilters["cpuSeries"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("cores") == core.Value;
                                <option value="@url" selected="@isSelected">@core.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "vga":
                <!-- (Other cases remain the same) -->
                break;

            // ... other category cases ...

            default:
                <div class="text-gray-500">Vui lòng chọn danh mục để xem các bộ lọc chi tiết</div>
                break;
        }

        <!-- Price Range -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-2-trieu", "Dưới 2 triệu"},
                        {"2-5-trieu", "2 - 5 triệu"},
                        {"5-10-trieu", "5 - 10 triệu"},
                        {"10-20-trieu", "10 - 20 triệu"},
                        {"20-50-trieu", "20 - 50 triệu"},
                        {"tren-50-trieu", "Trên 50 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var parameters = new Dictionary<string, string>();
                    
                    // Thêm các tham số cơ bản
                    if (!string.IsNullOrEmpty(Model.Category))
                        parameters.Add("category", Model.Category);
                    if (!string.IsNullOrEmpty(Model.Brand))
                        parameters.Add("brand", Model.Brand);
                    parameters.Add("priceRange", range.Key);
                    
                    // Kiểm tra và thêm các bộ lọc bổ sung (nếu có)
                    if (Model.AdditionalFilters != null)
                    {
                        if (Model.AdditionalFilters.ContainsKey("cpuSeries"))
                            parameters.Add("cpuSeries", Model.AdditionalFilters["cpuSeries"]);
                        if (Model.AdditionalFilters.ContainsKey("cores"))
                            parameters.Add("cores", Model.AdditionalFilters["cores"]);
                    }
                    
                    var url = Url.Action("Components", "ProductsList", parameters);
                    <a href="@url" class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model.PriceRange == range.Key ? "bg-blue-600 text-white" : "")">
                        @range.Value
                    </a>
                }
            </div>
            <a href="@Url.Action("Components", "ProductsList", new { category = Model.Category })" class="inline-block mt-3 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">
                Xóa bộ lọc
            </a>
        </div>
            

    </div>

    <!-- Products Grid (remains unchanged) -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = Model.Category
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Removed the updateFilters function and its event listeners to avoid conflicting behavior.
        // We rely solely on the inline onchange handlers (which navigate to the URL generated by each option).

        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}
