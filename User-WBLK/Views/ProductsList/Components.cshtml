@model ProductListViewModel
@{
    ViewData["Title"] = "Linh kiện";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Định nghĩa các danh sách options
    var cpuSeries = new[] {
        new { Value = "", Text = "Dòng CPU" },
        new { Value = "Intel core", Text = "Intel Core" },
        new { Value = "Amd R4yzen", Text = "AMD Ryzen" }
    };
    
    var cores = new[] {
        new { Value = "", Text = "Số nhân" },
        new { Value = "4", Text = "4 nhân" },
        new { Value = "6", Text = "6 nhân" },
        new { Value = "8", Text = "8 nhân" }
    };
}
<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new Dictionary<string, string>() {
                    {"cpu", "CPU"},
                    {"vga", "Card đồ họa"},
                    {"mainboard", "Bo mạch chủ"},
                    {"ram", "RAM"},
                    {"psu", "Nguồn máy tính"},
                    {"case", "Case máy tính"}
                };
            }
            @foreach (var category in categories)
            {
                var parameters = new Dictionary<string, string>
                {
                    { "category", category.Key }
                };
                
                var url = Url.Action("Components", "ProductsList", parameters);
                var isSelected = Model.Category == category.Key;
                <a href="@url" class="category-btn flex-1 text-center px-3 py-2 rounded-lg transition-all duration-200 @(isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-100 hover:bg-gray-200")">
                    @category.Value
                </a>
            }
        </div>
    </div>

    <!-- Dynamic Filters based on category -->
    <div class="bg-white rounded-lg p-4 mt-4">
        <h2 class="font-semibold mb-4">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "cpu":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var cpuBrandOptions = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "intel", Text = "Intel" },
                                    new { Value = "amd", Text = "AMD" }
                                };
                            }
                            @foreach (var brand in cpuBrandOptions)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "cpu" }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (Model.AdditionalFilters != null)
                                {
                                    if (Model.AdditionalFilters.ContainsKey("cpuSeries"))
                                        parameters.Add("cpuSeries", Model.AdditionalFilters["cpuSeries"]);
                                    if (Model.AdditionalFilters.ContainsKey("coreCount"))
                                        parameters.Add("coreCount", Model.AdditionalFilters["coreCount"]);
                                }
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand?.ToLower() == brand.Value.ToLower();
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- CPU Series Filter -->
                        <select id="cpuSeries" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var cpuSeriesOptions = new[] {
                                    new { Value = "", Text = "Tất cả dòng CPU" },
                                    new { Value = "intel core i9", Text = "Intel Core i9" },
                                    new { Value = "intel core i7", Text = "Intel Core i7" },
                                    new { Value = "intel core i5", Text = "Intel Core i5" },
                                    new { Value = "intel core i3", Text = "Intel Core i3" },
                                    new { Value = "amd ryzen 9", Text = "AMD Ryzen 9" },
                                    new { Value = "amd ryzen 7", Text = "AMD Ryzen 7" },
                                    new { Value = "amd ryzen 5", Text = "AMD Ryzen 5" },
                                    new { Value = "amd ryzen 3", Text = "AMD Ryzen 3" }
                                };
                            }
                            @foreach (var series in cpuSeriesOptions)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "cpu" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(series.Value))
                                    parameters.Add("cpuSeries", series.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("coreCount"))
                                    parameters.Add("coreCount", Model.AdditionalFilters["coreCount"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("cpuSeries")?.ToLower() == series.Value.ToLower();
                                <option value="@url" selected="@isSelected">@series.Text</option>
                            }
                        </select>

                        <!-- Core Count Filter -->
                        <select id="coreCount" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var coreCountOptions = new[] {
                                    new { Value = "", Text = "Tất cả số nhân" },
                                    new { Value = "4", Text = "4 nhân" },
                                    new { Value = "6", Text = "6 nhân" },
                                    new { Value = "8", Text = "8 nhân" },
                                    new { Value = "12", Text = "12 nhân" },
                                    new { Value = "16", Text = "16 nhân" },
                                    new { Value = "24", Text = "24 nhân" },
                                    new { Value = "32", Text = "32 nhân" }
                                };
                            }
                            @foreach (var coreOption in coreCountOptions)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "cpu" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(coreOption.Value))
                                    parameters.Add("cores", coreOption.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("cpuSeries"))
                                    parameters.Add("cpuSeries", Model.AdditionalFilters["cpuSeries"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("cores") == coreOption.Value;
                                <option value="@url" selected="@isSelected">@coreOption.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "vga":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var vgaBrandOptions = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "nvidia", Text = "NVIDIA" },
                                    new { Value = "amd", Text = "AMD" },
                                    new { Value = "asus", Text = "ASUS" },
                                    new { Value = "msi", Text = "MSI" },
                                    new { Value = "gigabyte", Text = "Gigabyte" },
                                    new { Value = "zotac", Text = "Zotac" },
                                    new { Value = "intel", Text = "Intel" }
                                };
                            }
                            @foreach (var brand in vgaBrandOptions)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "vga" }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("memory"))
                                    parameters.Add("memory", Model.AdditionalFilters["memory"]);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand?.ToLower() == brand.Value.ToLower();
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- Memory Filter -->
                        <select id="memory" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var memoryOptions = new[] {
                                    new { Value = "", Text = "Tất cả dung lượng" },
                                    new { Value = "8", Text = "8GB" },
                                    new { Value = "12", Text = "12GB" },
                                    new { Value = "16", Text = "16GB" },
                                    new { Value = "24", Text = "24GB" }
                                };
                            }
                            @foreach (var mem in memoryOptions)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "vga" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(mem.Value))
                                    parameters.Add("memory", mem.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("memory") == mem.Value;
                                <option value="@url" selected="@isSelected">@mem.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "mainboard":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var mainboardBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "asus", Text = "ASUS" },
                                    new { Value = "msi", Text = "MSI" },
                                    new { Value = "gigabyte", Text = "Gigabyte" },
                                    new { Value = "asrock", Text = "ASRock" }
                                };
                            }
                            @foreach (var brand in mainboardBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "mainboard" }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null)
                                {
                                    if (Model.AdditionalFilters.ContainsKey("socket"))
                                        parameters.Add("socket", Model.AdditionalFilters["socket"]);
                                    if (Model.AdditionalFilters.ContainsKey("formFactor"))
                                        parameters.Add("formFactor", Model.AdditionalFilters["formFactor"]);
                                }
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand?.ToLower() == brand.Value.ToLower();
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- Socket Filter -->
                        <select id="socket" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var sockets = new[] {
                                    new { Value = "", Text = "Tất cả socket" },
                                    new { Value = "LGA1700", Text = "LGA 1700" },
                                    new { Value = "AM5", Text = "AM5" },
                                    new { Value = "AM4", Text = "AM4" },
                                    new { Value = "LGA1200", Text = "LGA 1200" }
                                };
                            }
                            @foreach (var socket in sockets)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "mainboard" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(socket.Value))
                                    parameters.Add("socket", socket.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("formFactor") == true)
                                    parameters.Add("formFactor", Model.AdditionalFilters["formFactor"]);
                                if (Model.AdditionalFilters?.ContainsKey("ramSlots") == true)
                                    parameters.Add("ramSlots", Model.AdditionalFilters["ramSlots"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("socket") == socket.Value;
                                <option value="@url" selected="@isSelected">@socket.Text</option>
                            }
                        </select>

                        <!-- Form Factor Filter -->
                        <select id="formFactor" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var formFactors = new[] {
                                    new { Value = "", Text = "Tất cả kích thước" },
                                    new { Value = "ATX", Text = "ATX" },
                                    new { Value = "Micro-ATX", Text = "Micro-ATX" },
                                    new { Value = "E-ATX", Text = "E-ATX" }
                                };
                            }
                            @foreach (var factor in formFactors)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "mainboard" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(factor.Value))
                                    parameters.Add("formFactor", factor.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("socket") == true)
                                    parameters.Add("socket", Model.AdditionalFilters["socket"]);
                                if (Model.AdditionalFilters?.ContainsKey("ramSlots") == true)
                                    parameters.Add("ramSlots", Model.AdditionalFilters["ramSlots"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("formFactor") == factor.Value;
                                <option value="@url" selected="@isSelected">@factor.Text</option>
                            }
                        </select>

                        <!-- RAM Slots Filter -->
                        <select id="ramSlots" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var ramSlots = new[] {
                                    new { Value = "", Text = "Tất cả số khe RAM" },
                                    new { Value = "2", Text = "2 khe" },
                                    new { Value = "4", Text = "4 khe" },
                                    new { Value = "8", Text = "8 khe" }
                                };
                            }
                            @foreach (var slots in ramSlots)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "mainboard" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(slots.Value))
                                    parameters.Add("ramSlots", slots.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("socket") == true)
                                    parameters.Add("socket", Model.AdditionalFilters["socket"]);
                                if (Model.AdditionalFilters?.ContainsKey("formFactor") == true)
                                    parameters.Add("formFactor", Model.AdditionalFilters["formFactor"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("ramSlots") == slots.Value;
                                <option value="@url" selected="@isSelected">@slots.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "ram":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var ramBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "corsair", Text = "Corsair" },
                                    new { Value = "gskill", Text = "G.Skill" },
                                    new { Value = "kingston", Text = "Kingston" },
                                    new { Value = "crucial", Text = "Crucial" }
                                };
                            }
                            @foreach (var brand in ramBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "ram" }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("capacity") == true)
                                    parameters.Add("capacity", Model.AdditionalFilters["capacity"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand?.ToLower() == brand.Value.ToLower();
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- Capacity Filter -->
                        <select id="capacity" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var capacities = new[] {
                                    new { Value = "", Text = "Tất cả dung lượng" },
                                    new { Value = "8", Text = "8GB" },
                                    new { Value = "16", Text = "16GB" },
                                    new { Value = "32", Text = "32GB" },
                                    new { Value = "64", Text = "64GB" },
                                    new { Value = "128", Text = "128GB" }
                                };
                            }
                            @foreach (var capacity in capacities)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "ram" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(capacity.Value))
                                    parameters.Add("capacity", capacity.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("capacity") == capacity.Value;
                                <option value="@url" selected="@isSelected">@capacity.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "psu":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var psuBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "corsair", Text = "Corsair" },
                                    new { Value = "seasonic", Text = "Seasonic" },
                                    new { Value = "evga", Text = "EVGA" },
                                    new { Value = "cooler master", Text = "Cooler Master" }
                                };
                            }
                            @foreach (var brand in psuBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("wattage") == true)
                                    parameters.Add("wattage", Model.AdditionalFilters["wattage"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand == brand.Value;
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- Wattage Filter -->
                        <select id="wattage" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var wattages = new[] {
                                    new { Value = "", Text = "Tất cả công suất" },
                                    new { Value = "550", Text = "550W" },
                                    new { Value = "650", Text = "650W" },
                                    new { Value = "750", Text = "750W" },
                                    new { Value = "850", Text = "850W" },
                                    new { Value = "1000", Text = "1000W" }
                                };
                            }
                            @foreach (var wattage in wattages)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(wattage.Value))
                                    parameters.Add("wattage", wattage.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("wattage") == wattage.Value;
                                <option value="@url" selected="@isSelected">@wattage.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "case":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var caseBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "nzxt", Text = "NZXT" },
                                    new { Value = "lian li", Text = "Lian Li" },
                                    new { Value = "phanteks", Text = "Phanteks" },
                                    new { Value = "cooler master", Text = "Cooler Master" }
                                };
                            }
                            @foreach (var brand in caseBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "case" }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters?.ContainsKey("size") == true)
                                    parameters.Add("size", Model.AdditionalFilters["size"]);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.Brand?.ToLower() == brand.Value.ToLower();
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- Size Filter -->
                        <select id="size" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var sizes = new[] {
                                    new { Value = "", Text = "Tất cả kích thước" },
                                    new { Value = "full tower", Text = "Full Tower" },
                                    new { Value = "mid tower", Text = "Mid Tower" },
                                    new { Value = "mini tower", Text = "Mini Tower" }
                                };
                            }
                            @foreach (var size in sizes)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", "case" }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(size.Value))
                                    parameters.Add("size", size.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                
                                var url = Url.Action("Components", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("size") == size.Value;
                                <option value="@url" selected="@isSelected">@size.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case null:
            case "":
                <script>
                    window.location.href = '@Url.Action("Components", "ProductsList", new { category = "cpu" })';
                </script>
                break;

            default:
                <div class="text-center py-4 text-gray-500">
                    Không tìm thấy danh mục phù hợp
                </div>
                break;
        }

        <!-- Price Range -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            
            <!-- Price Range Buttons -->
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-2-trieu", "Dưới 2 triệu"},
                        {"2-5-trieu", "2 - 5 triệu"},
                        {"5-10-trieu", "5 - 10 triệu"},
                        {"10-20-trieu", "10 - 20 triệu"},
                        {"20-50-trieu", "20 - 50 triệu"},
                        {"tren-50-trieu", "Trên 50 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var parameters = new Dictionary<string, string>();
                    
                    // Thêm các tham số cơ bản
                    if (!string.IsNullOrEmpty(Model.Category))
                        parameters.Add("category", Model.Category);
                    if (!string.IsNullOrEmpty(Model.Brand))
                        parameters.Add("brand", Model.Brand);
                    parameters.Add("priceRange", range.Key);
                    
                    // Kiểm tra và thêm các bộ lọc bổ sung (nếu có)
                    if (Model.AdditionalFilters != null)
                    {
                        if (Model.AdditionalFilters.ContainsKey("cpuSeries"))
                            parameters.Add("cpuSeries", Model.AdditionalFilters["cpuSeries"]);
                        if (Model.AdditionalFilters.ContainsKey("cores"))
                            parameters.Add("cores", Model.AdditionalFilters["cores"]);
                        if (Model.AdditionalFilters.ContainsKey("memory"))
                            parameters.Add("memory", Model.AdditionalFilters["memory"]);
                        if (Model.AdditionalFilters.ContainsKey("chipset"))
                            parameters.Add("chipset", Model.AdditionalFilters["chipset"]);
                        if (Model.AdditionalFilters.ContainsKey("wattage"))
                            parameters.Add("wattage", Model.AdditionalFilters["wattage"]);
                        if (Model.AdditionalFilters.ContainsKey("size"))
                            parameters.Add("size", Model.AdditionalFilters["size"]);
                    }
                    
                    var url = Url.Action("Components", "ProductsList", parameters);
                    var isSelected = Model.PriceRange == range.Key;
                    <a href="@url" class="price-range-btn flex-1 text-center px-3 py-2 rounded-lg transition-all duration-200 @(isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-100 hover:bg-gray-200")">
                        @range.Value
                    </a>
                }
            </div>
            
            <!-- Clear Filters Button -->
            <div class="mt-4 text-center">
                @if (!string.IsNullOrEmpty(Model.Brand) || !string.IsNullOrEmpty(Model.PriceRange) || (Model.AdditionalFilters != null && Model.AdditionalFilters.Count > 0))
                {
                    <a href="@Url.Action("Components", "ProductsList", new { category = Model.Category })" 
                       class="inline-block bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-all duration-200 shadow-md">
                        <i class="fas fa-times-circle mr-2"></i>Xóa bộ lọc
                    </a>
                }
            </div>
        </div>
            

    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model="@(new ProductCardViewModel {
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "components"
                    })" />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Thêm hiệu ứng hover cho các nút danh mục
            const categoryButtons = document.querySelectorAll('.category-btn');
            categoryButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            // Thêm hiệu ứng hover cho các nút lọc giá
            const priceButtons = document.querySelectorAll('.price-range-btn');
            priceButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
    
    <style>
        /* Hiệu ứng chuyển đổi cho các nút */
        .category-btn,
        .price-range-btn {
            transition: all 0.2s ease;
        }
    </style>
}
