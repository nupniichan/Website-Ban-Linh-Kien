@model ProductListViewModel
@{
    ViewData["Title"] = "Linh kiện";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Components", new { category = "cpu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "cpu" ? "bg-blue-600 text-white" : "")">
                CPU
            </a>
            <a href="@Url.Action("Components", new { category = "vga" })"
               id="category-vga"
               class="category-link px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "vga" ? "bg-blue-600 text-white" : "")">
                Card đồ họa
            </a>
            <a href="@Url.Action("Components", new { category = "mainboard" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "mainboard" ? "bg-blue-600 text-white" : "")">
                Bo mạch chủ
            </a>
            <a href="@Url.Action("Components", new { category = "ram" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "ram" ? "bg-blue-600 text-white" : "")">
                RAM
            </a>
            <a href="@Url.Action("Components", new { category = "psu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "psu" ? "bg-blue-600 text-white" : "")">
                Nguồn máy tính
            </a>
            <a href="@Url.Action("Components", new { category = "case" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "case" ? "bg-blue-600 text-white" : "")">
                Case máy tính
            </a>
        </div>
    </div>

    <!-- Dynamic Filters based on category -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "cpu":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var brands = new[] {
                    new { Value = "", Text = "Tất cả thương hiệu" },
                    new { Value = "intel", Text = "Intel" },
                    new { Value = "amd", Text = "AMD" }
                    };
                            }
                            @foreach (var brand in brands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="cpuSeries" class="px-4 py-2 border rounded-md">
                            @{
                                var series = new[] {
                    new { Value = "", Text = "Tất cả dòng CPU" },
                    new { Value = "core-i3", Text = "CORE I3" },
                    new { Value = "core-i5", Text = "CORE I5" },
                    new { Value = "core-i7", Text = "CORE I7" },
                    new { Value = "core-i9", Text = "CORE I9" },
                    new { Value = "ryzen-3", Text = "RYZEN 3" },
                    new { Value = "ryzen-5", Text = "RYZEN 5" },
                    new { Value = "ryzen-7", Text = "RYZEN 7" },
                    new { Value = "ryzen-9", Text = "RYZEN 9" }
                    };
                            }
                            @foreach (var s in series)
                            {
                                <option value="@s.Value" selected="@(Model?.AdditionalFilters?["cpuSeries"] == s.Value)">@s.Text</option>
                            }
                        </select>

                        <select id="cores" class="px-4 py-2 border rounded-md">
                            @{
                                var coreOptions = new[] {
                    new { Value = "", Text = "Tất cả số nhân" },
                    new { Value = "4", Text = "4 nhân" },
                    new { Value = "6", Text = "6 nhân" },
                    new { Value = "8", Text = "8 nhân" },
                    new { Value = "10", Text = "10 nhân" },
                    new { Value = "12", Text = "12 nhân" },
                    new { Value = "14", Text = "14 nhân" },
                    new { Value = "16-plus", Text = "16+ nhân" }
                    };
                            }
                            @foreach (var core in coreOptions)
                            {
                                <option value="@core.Value" selected="@(Model?.AdditionalFilters?["cores"] == core.Value)">@core.Text</option>
                            }
                        </select>

                        <select id="threads" class="px-4 py-2 border rounded-md">
                            @{
                                var threadOptions = new[] {
                    new { Value = "", Text = "Tất cả số luồng" },
                    new { Value = "8", Text = "8 luồng" },
                    new { Value = "12", Text = "12 luồng" },
                    new { Value = "16", Text = "16 luồng" },
                    new { Value = "20", Text = "20 luồng" },
                    new { Value = "24", Text = "24 luồng" },
                    new { Value = "28", Text = "28 luồng" },
                    new { Value = "32-plus", Text = "32+ luồng" }
                    };
                            }
                            @foreach (var thread in threadOptions)
                            {
                                <option value="@thread.Value" selected="@(Model?.AdditionalFilters?["threads"] == thread.Value)">@thread.Text</option>
                            }
                        </select>

                        <select id="socket" class="px-4 py-2 border rounded-md">
                            @{
                                var sockets = new[] {
                    new { Value = "", Text = "Tất cả Socket" },
                    new { Value = "lga-1700", Text = "LGA 1700" },
                    new { Value = "am5", Text = "AM5" },
                    new { Value = "am4", Text = "AM4" },
                    new { Value = "lga-1200", Text = "LGA 1200" },
                    new { Value = "lga-2066", Text = "LGA 2066" },
                    new { Value = "tr4", Text = "TR4" },
                    new { Value = "sp3", Text = "SP3" },
                    new { Value = "sTRX4", Text = "sTRX4" }
                    };
                            }
                            @foreach (var socket in sockets)
                            {
                                <option value="@socket.Value" selected="@(Model?.AdditionalFilters?["socket"] == socket.Value)">@socket.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "vga":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var vgaBrands = new[] {
                    new { Value = "", Text = "Tất cả thương hiệu" },
                    new { Value = "nvidia", Text = "NVIDIA" },
                    new { Value = "amd", Text = "AMD" }
                    };
                            }
                            @foreach (var brand in vgaBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="manufacturer" class="px-4 py-2 border rounded-md">
                            @{
                                var manufacturers = new[] {
                    new { Value = "", Text = "Tất cả nhà sản xuất" },
                    new { Value = "asus", Text = "ASUS" },
                    new { Value = "msi", Text = "MSI" },
                    new { Value = "gigabyte", Text = "Gigabyte" },
                    new { Value = "zotac", Text = "ZOTAC" }
                    };
                            }
                            @foreach (var mfr in manufacturers)
                            {
                                <option value="@mfr.Value" selected="@(Model?.AdditionalFilters?["manufacturer"] == mfr.Value)">@mfr.Text</option>
                            }
                        </select>

                        <select id="memory" class="px-4 py-2 border rounded-md">
                            @{
                                var memories = new[] {
                    new { Value = "", Text = "VRAM" },
                    new { Value = "4gb", Text = "4GB" },
                    new { Value = "6gb", Text = "6GB" },
                    new { Value = "8gb", Text = "8GB" },
                    new { Value = "12gb", Text = "12GB" },
                    new { Value = "16gb", Text = "16GB" }
                    };
                            }
                            @foreach (var mem in memories)
                            {
                                <option value="@mem.Value" selected="@(Model?.AdditionalFilters?["memory"] == mem.Value)">@mem.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "mainboard":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var mbBrands = new[] {
                    new { Value = "", Text = "Tất cả thương hiệu" },
                    new { Value = "asus", Text = "ASUS" },
                    new { Value = "msi", Text = "MSI" },
                    new { Value = "gigabyte", Text = "Gigabyte" },
                    new { Value = "asrock", Text = "ASRock" }
                    };
                            }
                            @foreach (var brand in mbBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="formFactor" class="px-4 py-2 border rounded-md">
                            @{
                                var formFactors = new[] {
                    new { Value = "", Text = "Tất cả kích thước" },
                    new { Value = "atx", Text = "ATX" },
                    new { Value = "micro-atx", Text = "Micro-ATX" },
                    new { Value = "mini-itx", Text = "Mini-ITX" }
                    };
                            }
                            @foreach (var ff in formFactors)
                            {
                                <option value="@ff.Value" selected="@(Model?.AdditionalFilters?["formFactor"] == ff.Value)">@ff.Text</option>
                            }
                        </select>

                        <select id="socket" class="px-4 py-2 border rounded-md">
                            @{
                                var mbSockets = new[] {
                    new { Value = "", Text = "Tất cả Socket" },
                    new { Value = "lga-1700", Text = "LGA 1700" },
                    new { Value = "am5", Text = "AM5" },
                    new { Value = "am4", Text = "AM4" }
                    };
                            }
                            @foreach (var socket in mbSockets)
                            {
                                <option value="@socket.Value" selected="@(Model?.AdditionalFilters?["socket"] == socket.Value)">@socket.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "ram":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var ramBrands = new[] {
                    new { Value = "", Text = "Tất cả thương hiệu" },
                    new { Value = "gskill", Text = "G.SKILL" },
                    new { Value = "corsair", Text = "Corsair" },
                    new { Value = "kingston", Text = "Kingston" },
                    new { Value = "crucial", Text = "Crucial" },
                    new { Value = "samsung", Text = "Samsung" }
                    };
                            }
                            @foreach (var brand in ramBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="capacity" class="px-4 py-2 border rounded-md">
                            @{
                                var capacities = new[] {
                    new { Value = "", Text = "Tất cả dung lượng" },
                    new { Value = "8gb", Text = "8GB" },
                    new { Value = "16gb", Text = "16GB" },
                    new { Value = "32gb", Text = "32GB" },
                    new { Value = "64gb", Text = "64GB" }
                    };
                            }
                            @foreach (var cap in capacities)
                            {
                                <option value="@cap.Value" selected="@(Model?.AdditionalFilters?["capacity"] == cap.Value)">@cap.Text</option>
                            }
                        </select>

                        <select id="ramType" class="px-4 py-2 border rounded-md">
                            @{
                                var ramTypes = new[] {
                    new { Value = "", Text = "Tất cả chuẩn RAM" },
                    new { Value = "ddr3", Text = "DDR3" },
                    new { Value = "ddr4", Text = "DDR4" },
                    new { Value = "ddr5", Text = "DDR5" }
                    };
                            }
                            @foreach (var type in ramTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.AdditionalFilters?["ramType"] == type.Value)">@type.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "psu":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var psuBrands = new[] {
                    new { Value = "", Text = "Tất cả thương hiệu" },
                    new { Value = "corsair", Text = "Corsair" },
                    new { Value = "evga", Text = "EVGA" },
                    new { Value = "seasonic", Text = "Seasonic" },
                    new { Value = "bequiet", Text = "be quiet!" }
                    };
                            }
                            @foreach (var brand in psuBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="wattage" class="px-4 py-2 border rounded-md">
                            @{
                                var wattages = new[] {
                    new { Value = "", Text = "Tất cả công suất" },
                    new { Value = "550w", Text = "550W" },
                    new { Value = "650w", Text = "650W" },
                    new { Value = "750w", Text = "750W" },
                    new { Value = "850w", Text = "850W" },
                    new { Value = "1000w", Text = "1000W" }
                    };
                            }
                            @foreach (var w in wattages)
                            {
                                <option value="@w.Value" selected="@(Model?.AdditionalFilters?["wattage"] == w.Value)">@w.Text</option>
                            }
                        </select>

                        <select id="efficiency" class="px-4 py-2 border rounded-md">
                            @{
                                var efficiencies = new[] {
                    new { Value = "", Text = "Tất cả chuẩn hiệu suất" },
                    new { Value = "80plus-white", Text = "80+ White" },
                    new { Value = "80plus-bronze", Text = "80+ Bronze" },
                    new { Value = "80plus-gold", Text = "80+ Gold" },
                    new { Value = "80plus-platinum", Text = "80+ Platinum" }
                    };
                            }
                            @foreach (var eff in efficiencies)
                            {
                                <option value="@eff.Value" selected="@(Model?.AdditionalFilters?["efficiency"] == eff.Value)">@eff.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "case":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var caseBrands = new[] {
                    new { Value = "", Text = "Tất cả thương hiệu" },
                    new { Value = "nzxt", Text = "NZXT" },
                    new { Value = "lianli", Text = "Lian Li" },
                    new { Value = "corsair", Text = "Corsair" },
                    new { Value = "phanteks", Text = "Phanteks" }
                    };
                            }
                            @foreach (var brand in caseBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="caseSize" class="px-4 py-2 border rounded-md">
                            @{
                                var caseSizes = new[] {
                    new { Value = "", Text = "Tất cả kích thước" },
                    new { Value = "atx", Text = "ATX" },
                    new { Value = "micro-atx", Text = "Micro-ATX" },
                    new { Value = "mini-itx", Text = "Mini-ITX" }
                    };
                            }
                            @foreach (var size in caseSizes)
                            {
                                <option value="@size.Value" selected="@(Model?.AdditionalFilters?["caseSize"] == size.Value)">@size.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            default:
                <div class="text-gray-500">Vui lòng chọn danh mục để xem các bộ lọc chi tiết</div>
                break;
        }
    </div>

    <div class="bg-white rounded-lg p-4 mb-2">
        <h2 class="font-semibold mb-2">Khoảng giá:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Components", new { category = Model?.Category, priceRange = "duoi-2-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.AdditionalFilters?.GetValueOrDefault("priceRange") == "duoi-2-trieu" ? "bg-blue-600 text-white" : "") price-filter"
               data-price-range="duoi-2-trieu">
                Dưới 1 triệu
            </a>
            <a href="@Url.Action("Components", new { category = Model?.Category, priceRange = "2-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.AdditionalFilters?.GetValueOrDefault("priceRange") == "2-5-trieu" ? "bg-blue-600 text-white" : "") price-filter"
               data-price-range="2-5-trieu">
                1 - 2 triệu
            </a>
            <a href="@Url.Action("Components", new { category = Model?.Category, priceRange = "5-10-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.AdditionalFilters?.GetValueOrDefault("priceRange") == "5-10-trieu" ? "bg-blue-600 text-white" : "") price-filter"
               data-price-range="5-10-trieu">
                2 - 5 triệu
            </a>
            <a href="@Url.Action("Components", new { category = Model?.Category, priceRange = "10-20-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.AdditionalFilters?.GetValueOrDefault("priceRange") == "10-20-trieu" ? "bg-blue-600 text-white" : "") price-filter"
               data-price-range="10-20-trieu">
                5 - 10 triệu
            </a>
            <a href="@Url.Action("Components", new { category = Model?.Category, priceRange = "20-50-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.AdditionalFilters?.GetValueOrDefault("priceRange") == "20-50-trieu" ? "bg-blue-600 text-white" : "") price-filter"
               data-price-range="20-50-trieu">
                10 - 20 triệu
            </a>
            <a href="@Url.Action("Components", new { category = Model?.Category, priceRange = "tren-50-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.AdditionalFilters?.GetValueOrDefault("priceRange") == "tren-50-trieu" ? "bg-blue-600 text-white" : "") price-filter"
               data-price-range="tren-50-trieu">
                Trên 20 triệu
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        @for (int i = 0; i < 15; i++)
        {
            <partial name="_ProductCard" />
        }
    </div>

    <!-- Pagination -->
    <div class="flex justify-center space-x-2 mt-6">
        @{
            string GetPageUrl(int pageNum)
            {
                var routeValues = new Dictionary<string, object>();

                if (!string.IsNullOrEmpty(Model?.Category))
                {
                    routeValues.Add("category", Model.Category);
                }

                if (!string.IsNullOrEmpty(Model?.Brand))
                {
                    routeValues.Add("brand", Model.Brand);
                }

                if (Model?.AdditionalFilters != null)
                {
                    foreach (var filter in Model.AdditionalFilters)
                    {
                        if (!string.IsNullOrEmpty(filter.Value))
                        {
                            routeValues.Add(filter.Key, filter.Value);
                        }
                    }
                }

                routeValues.Add("page", pageNum);

                return Url.Action("Components", routeValues);
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage - 1)"
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == 1 ? "opacity-50 cursor-not-allowed" : "")"
        @(Model.CurrentPage == 1 ? "disabled" : "")>
            <span class="sr-only">Previous</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </a>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.CurrentPage)
            {
                <a href="@GetPageUrl(i)" class="px-4 py-2 bg-blue-600 text-white rounded-md">@i</a>
            }
            else if (i <= 3 || i == Model.TotalPages || Math.Abs(i - Model.CurrentPage) <= 1)
            {
                <a href="@GetPageUrl(i)" class="px-4 py-2 bg-white hover:bg-gray-50 rounded-md">@i</a>
            }
            else if (i == 4 || i == Model.TotalPages - 1)
            {
                <span class="px-4 py-2">...</span>
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage + 1)"
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == Model.TotalPages ? "opacity-50 cursor-not-allowed" : "")"
        @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>
            <span class="sr-only">Next</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </a>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.price-filter').forEach(filter => {
            filter.addEventListener('click', function(e) {
                e.preventDefault();
                const priceRange = this.getAttribute('data-price-range');
                const currentPriceRange = '@Model?.AdditionalFilters?.GetValueOrDefault("priceRange")';

                if (priceRange === currentPriceRange) {
                    const params = new URLSearchParams(window.location.search);
                    params.delete('priceRange');
                    params.delete('category');

                    document.querySelectorAll('select').forEach(select => {
                        if (select.value) {
                            params.set(select.id, select.value);
                        }
                    });

                    window.location.href = `${window.location.pathname}?${params.toString()}`;
                } else {
                    const params = new URLSearchParams(window.location.search);
                    params.set('priceRange', priceRange);
                    params.delete('category');

                    document.querySelectorAll('select').forEach(select => {
                        if (select.value) {
                            params.set(select.id, select.value);
                        }
                    });

                    window.location.href = `${window.location.pathname}?${params.toString()}`;
                }
            });
        });

        document.querySelectorAll('select').forEach(select => {
            select.addEventListener('change', function() {
                const params = new URLSearchParams(window.location.search);
                                params.delete('brand');
                params.delete('manufacturer');
                params.delete('memory');
                params.delete('formFactor');
                params.delete('socket');
                params.delete('capacity');
                params.delete('ramType');
                params.delete('wattage');
                params.delete('efficiency');
                params.delete('caseSize');
                params.delete('category');

                document.querySelectorAll('select').forEach(s => {
                    if (s.value) {
                        params.set(s.id, s.value);
                    }
                });

                const currentPriceRange = '@Model?.AdditionalFilters?.GetValueOrDefault("priceRange")';
                if (currentPriceRange) {
                    params.set('priceRange', currentPriceRange);
                }

                window.location.href = `${window.location.pathname}?${params.toString()}`;
            });
        });
    </script>
}

