@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị ngoại vi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new[] {
                    ("keyboard", "Bàn phím"),
                    ("mouse", "Chuột"),
                    ("headphone", "Tai nghe"),
                    ("webcam", "Webcam")
                };
            }
            @foreach (var (value, text) in categories)
            {
                var isActive = Model?.Category == value;
                <a href="@Url.Action("Peripherals", new { category = value })"
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(isActive ? "bg-blue-600 text-white" : "")">
                    @text
                </a>
            }
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "keyboard":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var keyboardBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "corsair", Text = "Corsair" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "steelseries", Text = "SteelSeries" }
                                };
                            }
                            @foreach (var brand in keyboardBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md">
                            @{
                                var keyboardTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "mechanical", Text = "Cơ học" },
                                    new { Value = "membrane", Text = "Membrane" },
                                    new { Value = "optical", Text = "Optical" }
                                };
                            }
                            @foreach (var type in keyboardTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("type") == true && Model.AdditionalFilters["type"] == type.Value)">@type.Text</option>
                            }
                        </select>

                        <select id="connection" class="px-4 py-2 border rounded-md">
                            @{
                                var connections = new[] {
                                    new { Value = "", Text = "Tất cả kết nối" },
                                    new { Value = "wired", Text = "Có dây" },
                                    new { Value = "wireless", Text = "Không dây" },
                                    new { Value = "bluetooth", Text = "Bluetooth" }
                                };
                            }
                            @foreach (var conn in connections)
                            {
                                <option value="@conn.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("connection") == true && Model.AdditionalFilters["connection"] == conn.Value)">@conn.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "mouse":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var mouseBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "steelseries", Text = "SteelSeries" },
                                    new { Value = "corsair", Text = "Corsair" }
                                };
                            }
                            @foreach (var brand in mouseBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md">
                            @{
                                var mouseTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "gaming", Text = "Gaming" },
                                    new { Value = "office", Text = "Văn phòng" },
                                    new { Value = "ergonomic", Text = "Công thái học" }
                                };
                            }
                            @foreach (var type in mouseTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("type") == true && Model.AdditionalFilters["type"] == type.Value)">@type.Text</option>
                            }
                        </select>

                        <select id="connection" class="px-4 py-2 border rounded-md">
                            @{
                                var mouseConnections = new[] {
                                    new { Value = "", Text = "Tất cả kết nối" },
                                    new { Value = "wired", Text = "Có dây" },
                                    new { Value = "wireless", Text = "Không dây" },
                                    new { Value = "bluetooth", Text = "Bluetooth" }
                                };
                            }
                            @foreach (var conn in mouseConnections)
                            {
                                <option value="@conn.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("connection") == true && Model.AdditionalFilters["connection"] == conn.Value)">@conn.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "headphone":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var headphoneBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "steelseries", Text = "SteelSeries" },
                                    new { Value = "hyperx", Text = "HyperX" }
                                };
                            }
                            @foreach (var brand in headphoneBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md">
                            @{
                                var headphoneTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "over-ear", Text = "Over-ear" },
                                    new { Value = "in-ear", Text = "In-ear" },
                                    new { Value = "on-ear", Text = "On-ear" }
                                };
                            }
                            @foreach (var type in headphoneTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("type") == true && Model.AdditionalFilters["type"] == type.Value)">@type.Text</option>
                            }
                        </select>

                        <select id="connection" class="px-4 py-2 border rounded-md">
                            @{
                                var headphoneConnections = new[] {
                                    new { Value = "", Text = "Tất cả kết nối" },
                                    new { Value = "wired", Text = "Có dây" },
                                    new { Value = "wireless", Text = "Không dây" },
                                    new { Value = "bluetooth", Text = "Bluetooth" }
                                };
                            }
                            @foreach (var conn in headphoneConnections)
                            {
                                <option value="@conn.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("connection") == true && Model.AdditionalFilters["connection"] == conn.Value)">@conn.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "webcam":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var webcamBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "microsoft", Text = "Microsoft" },
                                    new { Value = "razer", Text = "Razer" }
                                };
                            }
                            @foreach (var brand in webcamBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            default:
                <div class="text-gray-500">Vui lòng chọn danh mục để xem các bộ lọc chi tiết</div>
                break;
        }
    </div>

    <!-- Price Range -->
    <div class="bg-white rounded-lg p-4 mb-6">
        <h2 class="font-semibold mb-2">Khoảng giá:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Peripherals", new { category = Model?.Category, priceRange = "duoi-500-nghin" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "duoi-500-nghin" ? "bg-blue-600 text-white" : "")">
                Dưới 500 nghìn
            </a>
            <a href="@Url.Action("Peripherals", new { category = Model?.Category, priceRange = "500-1-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "500-1-trieu" ? "bg-blue-600 text-white" : "")">
                500 nghìn - 1 triệu
            </a>
            <a href="@Url.Action("Peripherals", new { category = Model?.Category, priceRange = "1-2-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "1-2-trieu" ? "bg-blue-600 text-white" : "")">
                1 - 2 triệu
            </a>
            <a href="@Url.Action("Peripherals", new { category = Model?.Category, priceRange = "2-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "2-5-trieu" ? "bg-blue-600 text-white" : "")">
                2 - 5 triệu
            </a>
            <a href="@Url.Action("Peripherals", new { category = Model?.Category, priceRange = "tren-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "tren-5-trieu" ? "bg-blue-600 text-white" : "")">
                Trên 5 triệu
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = Model.Category
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}

