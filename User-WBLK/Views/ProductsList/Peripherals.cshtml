@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị ngoại vi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new[] {
                    ("keyboard", "Bàn phím"),
                    ("mouse", "Chuột"),
                    ("headphone", "Tai nghe"),
                    ("webcam", "Webcam")
                };
            }
            @foreach (var (value, text) in categories)
            {
                var isActive = Model?.Category == value;
                <a href="@Url.Action("Peripherals", new { category = value })"
                   class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(isActive ? "bg-blue-600 text-white" : "")">
                    @text
                </a>
            }
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "keyboard":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Keyboard Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var keyboardBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "corsair", Text = "Corsair" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "steelseries", Text = "SteelSeries" }
                                };
                            }
                            @foreach (var brand in keyboardBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("switches"))
                                    parameters.Add("switches", Model.AdditionalFilters["switches"]);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("connection"))
                                    parameters.Add("connection", Model.AdditionalFilters["connection"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = (Model?.Brand ?? "").ToLower() == brand.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@brand.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@brand.Text</option>
                                }
                            }
                        </select>

                        <!-- Keyboard Switches Filter -->
                        <select id="switches" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var keyboardSwitches = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "cherry mx red", Text = "Cherry MX Red" },
                                    new { Value = "cherry mx blue", Text = "Cherry MX Blue" },
                                    new { Value = "romer-g", Text = "Romer-G" },
                                    new { Value = "razer green", Text = "Razer Green" },
                                    new { Value = "custom", Text = "Custom" },
                                    new { Value = "outemu", Text = "Outemu" },
                                    new { Value = "opto-mechanical", Text = "Opto-mechanical" },
                                    new { Value = "hot-swappable", Text = "Hot-swappable" }
                                };
                            }
                            @foreach (var sw in keyboardSwitches)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(sw.Value))
                                    parameters.Add("switches", sw.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("connection"))
                                    parameters.Add("connection", Model.AdditionalFilters["connection"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                  Model.AdditionalFilters.GetValueOrDefault("switches") == sw.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@sw.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@sw.Text</option>
                                }
                            }
                        </select>

                        <!-- Keyboard Connection Filter -->
                        <select id="connection" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var keyboardConnections = new[] {
                                    new { Value = "", Text = "Tất cả kết nối" },
                                    new { Value = "wired", Text = "Có dây" },
                                    new { Value = "wireless", Text = "Không dây" }
                                };
                            }
                            @foreach (var conn in keyboardConnections)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (!string.IsNullOrEmpty(conn.Value))
                                    parameters.Add("connection", conn.Value);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("switches"))
                                    parameters.Add("switches", Model.AdditionalFilters["switches"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                  Model.AdditionalFilters.GetValueOrDefault("connection") == conn.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@conn.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@conn.Text</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                break;

            case "mouse":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Mouse Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var mouseBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "steelseries", Text = "SteelSeries" },
                                    new { Value = "corsair", Text = "Corsair" }
                                };
                            }
                            @foreach (var brand in mouseBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("dpi"))
                                    parameters.Add("dpi", Model.AdditionalFilters["dpi"]);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("connection"))
                                    parameters.Add("connection", Model.AdditionalFilters["connection"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = (Model?.Brand ?? "").ToLower() == brand.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@brand.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@brand.Text</option>
                                }
                            }
                        </select>

                        <!-- Mouse DPI Filter -->
                        <select id="dpi" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var mouseDPIs = new[] {
                                    new { Value = "", Text = "Tất cả DPI" },
                                    new { Value = "16000", Text = "16,000" },
                                    new { Value = "20000", Text = "20,000" },
                                    new { Value = "25000", Text = "25,000" },
                                    new { Value = "8500", Text = "8,500" },
                                    new { Value = "19000", Text = "19,000" },
                                    new { Value = "12000", Text = "12,000" }
                                };
                            }
                            @foreach (var dpi in mouseDPIs)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(dpi.Value))
                                    parameters.Add("dpi", dpi.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("connection"))
                                    parameters.Add("connection", Model.AdditionalFilters["connection"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                  Model.AdditionalFilters.GetValueOrDefault("dpi") == dpi.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@dpi.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@dpi.Text</option>
                                }
                            }
                        </select>

                        <!-- Mouse Connection Filter -->
                        <select id="connection" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var mouseConnections = new[] {
                                    new { Value = "", Text = "Tất cả kết nối" },
                                    new { Value = "no", Text = "Có dây" },
                                    new { Value = "yes", Text = "Không dây" }
                                };
                            }
                            @foreach (var conn in mouseConnections)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (!string.IsNullOrEmpty(conn.Value))
                                    parameters.Add("connection", conn.Value);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("dpi"))
                                    parameters.Add("dpi", Model.AdditionalFilters["dpi"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                  Model.AdditionalFilters.GetValueOrDefault("connection") == conn.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@conn.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@conn.Text</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                break;

            case "headphone":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Headphone Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var headphoneBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "steelseries", Text = "SteelSeries" },
                                    new { Value = "hyperx", Text = "HyperX" }
                                };
                            }
                            @foreach (var brand in headphoneBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("driver"))
                                    parameters.Add("driver", Model.AdditionalFilters["driver"]);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("connection"))
                                    parameters.Add("connection", Model.AdditionalFilters["connection"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = (Model?.Brand ?? "").ToLower() == brand.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@brand.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@brand.Text</option>
                                }
                            }
                        </select>

                        <!-- Headphone Driver Filter -->
                        <select id="driver" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var headphoneDrivers = new[] {
                                    new { Value = "", Text = "Tất cả" },
                                    new { Value = "40mm", Text = "40mm" },
                                    new { Value = "45mm", Text = "45mm" },
                                    new { Value = "50mm", Text = "50mm" }
                                };
                            }
                            @foreach (var drv in headphoneDrivers)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(drv.Value))
                                    parameters.Add("driver", drv.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("connection"))
                                    parameters.Add("connection", Model.AdditionalFilters["connection"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                  Model.AdditionalFilters.GetValueOrDefault("driver") == drv.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@drv.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@drv.Text</option>
                                }
                            }
                        </select>

                        <!-- Headphone Connection Filter -->
                        <select id="connection" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var headphoneConnections = new[] {
                                    new { Value = "", Text = "Tất cả kết nối" },
                                    new { Value = "wired", Text = "Có dây" },
                                    new { Value = "wireless", Text = "Không dây" }
                                };
                            }
                            @foreach (var conn in headphoneConnections)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (!string.IsNullOrEmpty(conn.Value))
                                    parameters.Add("connection", conn.Value);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("driver"))
                                    parameters.Add("driver", Model.AdditionalFilters["driver"]);

                                var url = Url.Action("Peripherals", "ProductsList", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                  Model.AdditionalFilters.GetValueOrDefault("connection") == conn.Value;
                                if (isSelected)
                                {
                                    <option value="@url" selected>@conn.Text</option>
                                }
                                else
                                {
                                    <option value="@url">@conn.Text</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                break;

            case "webcam":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <!-- Webcam Brand Filter -->
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var webcamBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "microsoft", Text = "Microsoft" },
                                    new { Value = "razer", Text = "Razer" },
                                    new { Value = "dell", Text = "Dell" },
                                    new { Value = "a4tech", Text = "A4Tech" },
                                    new { Value = "creative", Text = "Creative" },
                                    new { Value = "ausdom", Text = "AUSDOM" }
                                };
                            }
                            @foreach (var brand in webcamBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("framerate"))
                                    parameters.Add("framerate", Model.AdditionalFilters["framerate"]);
                                
                                var url = Url.Action("Peripherals", parameters);
                                bool isSelected = Model?.Brand?.ToLower() == brand.Value.ToLower();
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <!-- Webcam Framerate Filter -->
                        <select id="framerate" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var framerates = new[] {
                                    new { Value = "", Text = "Tất cả FPS" },
                                    new { Value = "30", Text = "30 FPS" },
                                    new { Value = "60", Text = "60 FPS" }
                                };
                            }
                            @foreach (var fps in framerates)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(fps.Value))
                                    parameters.Add("framerate", fps.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);

                                var url = Url.Action("Peripherals", parameters);
                                bool isSelected = Model?.AdditionalFilters != null &&
                                                Model.AdditionalFilters.GetValueOrDefault("framerate") == fps.Value;
                                <option value="@url" selected="@isSelected">@fps.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            default:
                <script>
                    window.location.href = '@Url.Action("Peripherals", "ProductsList", new { category = "keyboard" })';
                </script>
                break;
        }
    </div>

    <!-- Price Range -->
    <div class="mt-4">
        <h2 class="font-semibold mb-2">Khoảng giá:</h2>
        
        <!-- Price Range Buttons -->
        <div class="flex flex-wrap gap-2">
            @{
                var priceRanges = new Dictionary<string, string>() {
                    {"duoi-500-nghin", "Dưới 500 nghìn"},
                    {"500-1-trieu", "500 nghìn - 1 triệu"},
                    {"1-2-trieu", "1 - 2 triệu"},
                    {"2-5-trieu", "2 - 5 triệu"},
                    {"tren-5-trieu", "Trên 5 triệu"}
                };
            }
            @foreach (var range in priceRanges)
            {
                var parameters = new Dictionary<string, string>();
                
                // Thêm các tham số cơ bản
                if (!string.IsNullOrEmpty(Model.Category))
                    parameters.Add("category", Model.Category);
                if (!string.IsNullOrEmpty(Model.Brand))
                    parameters.Add("brand", Model.Brand);
                parameters.Add("priceRange", range.Key);
                
                // Kiểm tra và thêm các bộ lọc bổ sung (nếu có)
                if (Model.AdditionalFilters != null)
                {
                    foreach (var filter in Model.AdditionalFilters)
                    {
                        if (!parameters.ContainsKey(filter.Key))
                            parameters.Add(filter.Key, filter.Value);
                    }
                }
                
                var url = Url.Action("Peripherals", "ProductsList", parameters);
                var isSelected = Model.PriceRange == range.Key;
                <a href="@url" class="price-range-btn flex-1 text-center px-3 py-2 rounded-lg transition-all duration-200 @(isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-100 hover:bg-gray-200")">
                    @range.Value
                </a>
            }
        </div>
        
        <!-- Clear Filters Button -->
        <div class="mt-4 text-center">
            @if (!string.IsNullOrEmpty(Model.Brand) || !string.IsNullOrEmpty(Model.PriceRange) || (Model.AdditionalFilters != null && Model.AdditionalFilters.Count > 0))
            {
                <a href="@Url.Action("Peripherals", "ProductsList", new { category = Model.Category })" 
                   class="inline-block bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-all duration-200 shadow-md">
                    <i class="fas fa-times-circle mr-2"></i>Xóa bộ lọc
                </a>
            }
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model="@(new ProductCardViewModel {
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "peripherals"
                    })" />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Thêm hiệu ứng hover cho các nút lọc giá
            const priceButtons = document.querySelectorAll('.price-range-btn');
            priceButtons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.add('shadow-sm', 'scale-105');
                    }
                });
                
                btn.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('bg-blue-600')) {
                        this.classList.remove('shadow-sm', 'scale-105');
                    }
                });
            });
            
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });
                    
                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
    
    <style>
        /* Hiệu ứng chuyển đổi cho các nút lọc giá */
        .price-range-btn {
            transition: all 0.2s ease;
        }
    </style>
}
