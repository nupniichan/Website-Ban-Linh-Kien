@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị âm thanh";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Audio", new { category = "speaker" })" 
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "speaker" ? "bg-blue-600 text-white" : "")">
                Loa máy tính
            </a>
            <a href="@Url.Action("Audio", new { category = "microphone" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "microphone" ? "bg-blue-600 text-white" : "")">
                Micro
            </a>
            <a href="@Url.Action("Audio", new { category = "webcam" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.Category == "webcam" ? "bg-blue-600 text-white" : "")">
                Webcam
            </a>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg p-4>
        <h2 class="font-semibold mb-2">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "speaker":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var speakerBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "jbl", Text = "JBL" },
                                    new { Value = "edifier", Text = "Edifier" },
                                    new { Value = "sony", Text = "Sony" }
                                };
                            }
                            @foreach (var brand in speakerBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "microphone":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="type" class="px-4 py-2 border rounded-md">
                            @{
                                var micTypes = new[] {
                                    new { Value = "", Text = "Tất cả loại" },
                                    new { Value = "thu-am", Text = "Micro thu âm" },
                                    new { Value = "khong-day", Text = "Micro không dây" },
                                    new { Value = "co-day", Text = "Micro có dây" },
                                    new { Value = "karaoke", Text = "Micro karaoke" }
                                };
                            }
                            @foreach (var type in micTypes)
                            {
                                <option value="@type.Value" selected="@(Model?.AdditionalFilters?.ContainsKey("type") == true && Model.AdditionalFilters["type"] == type.Value)">@type.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "webcam":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md">
                            @{
                                var webcamBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "microsoft", Text = "Microsoft" },
                                    new { Value = "rapoo", Text = "Rapoo" }
                                };
                            }
                            @foreach (var brand in webcamBrands)
                            {
                                <option value="@brand.Value" selected="@(Model?.Brand == brand.Value)">@brand.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            default:
                <div class="text-gray-500">Vui lòng chọn danh mục để xem các bộ lọc chi tiết</div>
                break;
        }
    </div>

    <!-- Price Range -->
    <div class="bg-white rounded-lg p-4 mb-6">
        <h2 class="font-semibold mb-2">Khoảng giá:</h2>
        <div class="flex flex-wrap gap-2">
            <a href="@Url.Action("Audio", new { category = Model?.Category, brand = Model?.Brand, priceRange = "duoi-500-nghin" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "duoi-500-nghin" ? "bg-blue-600 text-white" : "")">
                Dưới 500 nghìn
            </a>
            <a href="@Url.Action("Audio", new { category = Model?.Category, brand = Model?.Brand, priceRange = "500-nghin-1-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "500-nghin-1-trieu" ? "bg-blue-600 text-white" : "")">
                500 nghìn - 1 triệu
            </a>
            <a href="@Url.Action("Audio", new { category = Model?.Category, brand = Model?.Brand, priceRange = "1-2-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "1-2-trieu" ? "bg-blue-600 text-white" : "")">
                1 triệu - 2 triệu
            </a>
            <a href="@Url.Action("Audio", new { category = Model?.Category, brand = Model?.Brand, priceRange = "2-3-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "2-3-trieu" ? "bg-blue-600 text-white" : "")">
                2 triệu - 3 triệu
            </a>
            <a href="@Url.Action("Audio", new { category = Model?.Category, brand = Model?.Brand, priceRange = "3-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "3-5-trieu" ? "bg-blue-600 text-white" : "")">
                3 triệu - 5 triệu
            </a>
            <a href="@Url.Action("Audio", new { category = Model?.Category, brand = Model?.Brand, priceRange = "tren-5-trieu" })"
               class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model?.PriceRange == "tren-5-trieu" ? "bg-blue-600 text-white" : "")">
                Trên 5 triệu
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        @for (int i = 0; i < 15; i++)
        {
            <partial name="_ProductCard" />
        }
    </div>

    <!-- Pagination -->
    <div class="flex justify-center space-x-2 mt-6">
        @{
            string GetPageUrl(int pageNum)
            {
                var routeValues = new Dictionary<string, object>();
                
                if (!string.IsNullOrEmpty(Model?.Category))
                {
                    routeValues.Add("category", Model.Category);
                }
                
                if (!string.IsNullOrEmpty(Model?.Brand))
                {
                    routeValues.Add("brand", Model.Brand);
                }
                
                routeValues.Add("page", pageNum);
                
                return Url.Action("Audio", routeValues);
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage - 1)" 
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == 1 ? "opacity-50 cursor-not-allowed" : "")"
           @(Model.CurrentPage == 1 ? "disabled" : "")>
            <span class="sr-only">Previous</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </a>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.CurrentPage)
            {
                <a href="@GetPageUrl(i)" class="px-4 py-2 bg-blue-600 text-white rounded-md">@i</a>
            }
            else if (i <= 3 || i == Model.TotalPages || Math.Abs(i - Model.CurrentPage) <= 1)
            {
                <a href="@GetPageUrl(i)" class="px-4 py-2 bg-white hover:bg-gray-50 rounded-md">@i</a>
            }
            else if (i == 4 || i == Model.TotalPages - 1)
            {
                <span class="px-4 py-2">...</span>
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage + 1)" 
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == Model.TotalPages ? "opacity-50 cursor-not-allowed" : "")"
           @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>
            <span class="sr-only">Next</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </a>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('select').forEach(select => {
            select.addEventListener('change', function() {
                const params = new URLSearchParams(window.location.search);
                
                // Xóa tất cả các tham số cũ
                params.delete('brand');
                params.delete('type');
                params.delete('category');
                
                // Lấy tất cả giá trị mới từ các dropdown
                document.querySelectorAll('select').forEach(s => {
                    if (s.value) {
                        params.set(s.id, s.value);
                    }
                });
                
                window.location.href = `${window.location.pathname}?${params.toString()}`;
            });
        });
    </script>
}


