@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị âm thanh";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new[] {
                    ("speaker", "Loa"),
                    ("microphone", "Micro"),
                    ("webcam", "Webcam")
                };
            }
            @foreach (var (value, text) in categories)
            {
                var isActive = Model.Category == value;
                <a href="@Url.Action("Audio", "ProductsList", new { category = value })"
                   class="px-4 py-2 rounded-md @(isActive ? "bg-blue-500 text-white" : "bg-gray-100 hover:bg-gray-200")">
                    @text
                </a>
            }
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg p-4 mt-4">
        @switch (Model.Category?.ToLower())
        {
            case "speaker":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var speakerBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "jbl", Text = "JBL" },
                                    new { Value = "sony", Text = "Sony" },
                                    new { Value = "bose", Text = "Bose" }
                                };
                            }
                            @foreach (var brand in speakerBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                                    parameters.Add("type", Model.AdditionalFilters["type"]);

                                var url = Url.Action("Audio", "ProductsList", parameters);
                                var isSelected = Model.Brand == brand.Value;
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var speakerTypes = new[] {
                                    new { Value = "", Text = "Loại loa" },
                                    new { Value = "bluetooth", Text = "Loa Bluetooth" },
                                    new { Value = "wired", Text = "Loa có dây" },
                                    new { Value = "gaming", Text = "Loa Gaming" }
                                };
                            }
                            @foreach (var type in speakerTypes)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(type.Value))
                                    parameters.Add("type", type.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);

                                var url = Url.Action("Audio", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("type") == type.Value;
                                <option value="@url" selected="@isSelected">@type.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "microphone":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var micBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "shure", Text = "Shure" },
                                    new { Value = "rode", Text = "RODE" },
                                    new { Value = "blue", Text = "Blue Microphones" },
                                    new { Value = "hyperx", Text = "HyperX" }
                                };
                            }
                            @foreach (var brand in micBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);
                                if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                                    parameters.Add("type", Model.AdditionalFilters["type"]);

                                var url = Url.Action("Audio", "ProductsList", parameters);
                                var isSelected = Model.Brand == brand.Value;
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>

                        <select id="type" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var micTypes = new[] {
                                    new { Value = "", Text = "Loại micro" },
                                    new { Value = "thu-am", Text = "Micro thu âm" },
                                    new { Value = "khong-day", Text = "Micro không dây" },
                                    new { Value = "co-day", Text = "Micro có dây" },
                                    new { Value = "karaoke", Text = "Micro karaoke" }
                                };
                            }
                            @foreach (var type in micTypes)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(Model.Brand))
                                    parameters.Add("brand", Model.Brand);
                                if (!string.IsNullOrEmpty(type.Value))
                                    parameters.Add("type", type.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);

                                var url = Url.Action("Audio", "ProductsList", parameters);
                                var isSelected = Model.AdditionalFilters?.GetValueOrDefault("type") == type.Value;
                                <option value="@url" selected="@isSelected">@type.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            case "webcam":
                <div class="space-y-4">
                    <div class="flex flex-wrap gap-2">
                        <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                            @{
                                var webcamBrands = new[] {
                                    new { Value = "", Text = "Tất cả thương hiệu" },
                                    new { Value = "logitech", Text = "Logitech" },
                                    new { Value = "microsoft", Text = "Microsoft" },
                                    new { Value = "razer", Text = "Razer" }
                                };
                            }
                            @foreach (var brand in webcamBrands)
                            {
                                var parameters = new Dictionary<string, string>
                                {
                                    { "category", Model.Category }
                                };
                                
                                if (!string.IsNullOrEmpty(brand.Value))
                                    parameters.Add("brand", brand.Value);
                                if (!string.IsNullOrEmpty(Model.PriceRange))
                                    parameters.Add("priceRange", Model.PriceRange);

                                var url = Url.Action("Audio", "ProductsList", parameters);
                                var isSelected = Model.Brand == brand.Value;
                                <option value="@url" selected="@isSelected">@brand.Text</option>
                            }
                        </select>
                    </div>
                </div>
                break;

            default:
                <div class="text-gray-500">Vui lòng chọn danh mục để xem các bộ lọc chi tiết</div>
                break;
        }

        <!-- Price Range -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new[] {
                        new { Value = "", Text = "Tất cả" },
                        new { Value = "duoi-2-trieu", Text = "Dưới 2 triệu" },
                        new { Value = "2-5-trieu", Text = "2 - 5 triệu" },
                        new { Value = "5-10-trieu", Text = "5 - 10 triệu" },
                        new { Value = "10-20-trieu", Text = "10 - 20 triệu" },
                        new { Value = "tren-20-trieu", Text = "Trên 20 triệu" }
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var parameters = new Dictionary<string, string>();
                    if (!string.IsNullOrEmpty(Model.Category))
                        parameters.Add("category", Model.Category);
                    if (!string.IsNullOrEmpty(Model.Brand))
                        parameters.Add("brand", Model.Brand);
                    if (!string.IsNullOrEmpty(range.Value))
                        parameters.Add("priceRange", range.Value);
                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                        parameters.Add("type", Model.AdditionalFilters["type"]);

                    var isActive = Model.PriceRange == range.Value;
                    <a href="@Url.Action("Audio", "ProductsList", parameters)"
                       class="px-4 py-2 rounded-md @(isActive ? "bg-blue-500 text-white" : "bg-gray-100 hover:bg-gray-200")">
                        @range.Text
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            @foreach (var product in Model.Products)
            {
                <div class="bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300">
                    <a href="/components/@product.IdSp" class="block">
                        <div class="p-3">
                            <img src="@product.Hinhanh" alt="@product.Tensanpham" 
                                 class="w-full h-40 object-cover rounded-lg mb-3">
                            <div class="relative group">
                                <h3 class="text-base font-semibold mb-2 product-title overflow-hidden"
                                    data-full-text="@product.Tensanpham">
                                    @product.Tensanpham
                                </h3>
                                <div class="absolute left-0 -top-12 bg-black text-white text-xs rounded-lg px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-nowrap product-tooltip">
                                    @product.Tensanpham
                                </div>
                            </div>
                            <p class="text-red-600 font-bold text-xl mb-4">@product.Gia.ToString("N0")đ</p>
                            <button class="w-full hover:opacity-80 transition-opacity duration-300">
                                <div class="flex items-center gap-2">
                                    <div class="bg-[#0066CC] p-2 rounded-full">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                        </svg>
                                    </div>
                                    <span class="text-gray-700">Thêm vào giỏ hàng</span>
                                </div>
                            </button>
                        </div>
                    </a>
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <div class="mt-8 flex justify-center">
            <div class="flex space-x-2">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    var parameters = new Dictionary<string, string>
                    {
                        { "page", i.ToString() }
                    };
                    if (!string.IsNullOrEmpty(Model.Category))
                        parameters.Add("category", Model.Category);
                    if (!string.IsNullOrEmpty(Model.Brand))
                        parameters.Add("brand", Model.Brand);
                    if (!string.IsNullOrEmpty(Model.PriceRange))
                        parameters.Add("priceRange", Model.PriceRange);
                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                        parameters.Add("type", Model.AdditionalFilters["type"]);

                    <a href="@Url.Action("Audio", "ProductsList", parameters)"
                       class="px-4 py-2 rounded-md @(Model.CurrentPage == i ? "bg-blue-500 text-white" : "bg-gray-100 hover:bg-gray-200")">
                        @i
                    </a>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            function updateProductTitles() {
                const titles = document.querySelectorAll('.product-title');            
                titles.forEach((title, index) => {
                    const fullText = title.getAttribute('data-full-text');
                    
                    title.textContent = fullText;
                    
                    if (fullText && fullText.length > 70) {
                        const truncatedText = fullText.substring(0, 70) + '...';
                        title.textContent = truncatedText;
                    }
                });
            }
            
            updateProductTitles();
        });
    </script>
}


