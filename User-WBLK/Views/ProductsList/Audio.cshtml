@model ProductListViewModel
@{
    ViewData["Title"] = "Thiết bị âm thanh";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Categories -->
    <div class="bg-white rounded-lg p-4">
        <h2 class="font-semibold mb-2">Danh mục:</h2>
        <div class="flex flex-wrap gap-2">
            @{
                var categories = new[] {
                    ("speaker", "Loa"),
                    ("microphone", "Micro")
                };
            }
            @foreach (var (value, text) in categories)
            {
                var isActive = Model?.Category?.ToLower() == value;
                <a href="@Url.Action("Audio", "ProductsList", new { category = value })"
                   class="px-4 py-2 rounded-md @(isActive ? "bg-blue-500 text-white" : "bg-gray-100 hover:bg-gray-200")">
                    @text
                </a>
            }
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg p-4 mt-4">
        <h2 class="font-semibold mb-2">Bộ lọc:</h2>
        @switch (Model?.Category?.ToLower())
        {
            case "speaker":
                {
                    <div class="space-y-4">
                        <div class="flex flex-wrap gap-2">
                            <!-- Brand Filter for speakers -->
                            <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var speakerBrands = new[] {
                                        new { Value = "", Text = "Tất cả thương hiệu" },
                                        new { Value = "logitech", Text = "Logitech" },
                                        new { Value = "jbl", Text = "JBL" },
                                        new { Value = "sony", Text = "Sony" },
                                        new { Value = "bose", Text = "Bose" }
                                    };
                                }
                                @foreach (var brand in speakerBrands)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", Model.Category }
                                    };
                                    if (!string.IsNullOrEmpty(brand.Value))
                                        parameters.Add("brand", brand.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);
                                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("type"))
                                        parameters.Add("type", Model.AdditionalFilters["type"]);

                                    var url = Url.Action("Audio", "ProductsList", parameters);
                                    var isSelected = Model?.Brand?.ToLower() == brand.Value;
                                    <option value="@url" selected="@isSelected">@brand.Text</option>
                                }
                            </select>

                            <!-- Speaker Type Filter -->
                            <select id="type" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var speakerTypes = new[] {
                                        new { Value = "", Text = "Loại loa" },
                                        new { Value = "bluetooth", Text = "Loa Bluetooth" },
                                        new { Value = "subwoofer", Text = "Subwoofer" },
                                        new { Value = "active", Text = "Active" },
                                        new { Value = "stereo", Text = "Stereo" },
                                        new { Value = "studio monitor", Text = "Studio Monitor" },
                                        new { Value = "multimedia", Text = "Multimedia" },
                                        new { Value = "bookshelf", Text = "Bookshelf" },
                                        new { Value = "desktop", Text = "Desktop" },
                                        new { Value = "soundbar", Text = "Soundbar" },
                                        new { Value = "surround", Text = "Surround" }
                                    };
                                }
                                @foreach (var type in speakerTypes)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", Model.Category }
                                    };
                                    if (!string.IsNullOrEmpty(Model.Brand))
                                        parameters.Add("brand", Model.Brand);
                                    if (!string.IsNullOrEmpty(type.Value))
                                        parameters.Add("type", type.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);

                                    var url = Url.Action("Audio", "ProductsList", parameters);
                                    var isSelected = Model.AdditionalFilters != null &&
                                                     Model.AdditionalFilters.GetValueOrDefault("type")?.ToLower() == type.Value;
                                    <option value="@url" selected="@isSelected">@type.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    break;
                }
            case "microphone":
                {
                    <div class="space-y-4">
                        <div class="flex flex-wrap gap-2">
                            <!-- Brand Filter for microphones -->
                            <select id="brand" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var micBrands = new[] {
                                        new { Value = "", Text = "Tất cả thương hiệu" },
                                        new { Value = "shure", Text = "Shure" },
                                        new { Value = "rode", Text = "RODE" },
                                        new { Value = "blue", Text = "Blue Microphones" },
                                        new { Value = "hyperx", Text = "HyperX" }
                                    };
                                }
                                @foreach (var brand in micBrands)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", Model.Category }
                                    };
                                    if (!string.IsNullOrEmpty(brand.Value))
                                        parameters.Add("brand", brand.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);
                                    if (Model.AdditionalFilters != null && Model.AdditionalFilters.ContainsKey("sampleBitrate"))
                                        parameters.Add("sampleBitrate", Model.AdditionalFilters["sampleBitrate"]);

                                    var url = Url.Action("Audio", "ProductsList", parameters);
                                    var isSelected = Model?.Brand?.ToLower() == brand.Value;
                                    <option value="@url" selected="@isSelected">@brand.Text</option>
                                }
                            </select>

                            <!-- Sample / Bit rate Filter -->
                            <select id="sampleBitrate" class="px-4 py-2 border rounded-md" onchange="window.location.href=this.value">
                                @{
                                    var sampleRates = new[] {
                                        new { Value = "", Text = "Sample/Bit rate" },
                                        new { Value = "24-bit/96kHz", Text = "24-bit/96kHz" },
                                        new { Value = "16-bit/48kHz", Text = "16-bit/48kHz" }
                                    };
                                }
                                @foreach (var rate in sampleRates)
                                {
                                    var parameters = new Dictionary<string, string>
                                    {
                                        { "category", Model.Category }
                                    };
                                    if (!string.IsNullOrEmpty(Model.Brand))
                                        parameters.Add("brand", Model.Brand);
                                    if (!string.IsNullOrEmpty(rate.Value))
                                        parameters.Add("sampleBitrate", rate.Value);
                                    if (!string.IsNullOrEmpty(Model.PriceRange))
                                        parameters.Add("priceRange", Model.PriceRange);

                                    var url = Url.Action("Audio", "ProductsList", parameters);
                                    var isSelected = Model.AdditionalFilters != null &&
                                                     Model.AdditionalFilters.GetValueOrDefault("sampleBitrate")?.ToLower() == rate.Value.ToLower();
                                    <option value="@url" selected="@isSelected">@rate.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    break;
                }
            default:
                <script>
                    window.location.href = '@Url.Action("Audio", "ProductsList", new { category = "speaker" })';
                </script>
                break;
        }

        <!-- Price Range Filter -->
        <div class="mt-4">
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new[] {
                        new { Value = "", Text = "Tất cả" },
                        new { Value = "duoi-2-trieu", Text = "Dưới 2 triệu" },
                        new { Value = "2-5-trieu", Text = "2 - 5 triệu" },
                        new { Value = "5-10-trieu", Text = "5 - 10 triệu" },
                        new { Value = "10-20-trieu", Text = "10 - 20 triệu" },
                        new { Value = "tren-20-trieu", Text = "Trên 20 triệu" }
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var parameters = new Dictionary<string, string>();
                    if (!string.IsNullOrEmpty(Model.Category))
                        parameters.Add("category", Model.Category);
                    if (!string.IsNullOrEmpty(Model.Brand))
                        parameters.Add("brand", Model.Brand);
                    if (!string.IsNullOrEmpty(range.Value))
                        parameters.Add("priceRange", range.Value);
                    if (Model.AdditionalFilters != null)
                    {
                        if (Model.AdditionalFilters.ContainsKey("type"))
                            parameters.Add("type", Model.AdditionalFilters["type"]);
                        if (Model.AdditionalFilters.ContainsKey("sampleBitrate"))
                            parameters.Add("sampleBitrate", Model.AdditionalFilters["sampleBitrate"]);
                    }
                    
                    var url = Url.Action("Audio", "ProductsList", parameters);
                    var isActive = Model?.PriceRange == range.Value;
                    <a href="@url" class="px-4 py-2 rounded-md @(isActive ? "bg-blue-500 text-white" : "bg-gray-100 hover:bg-gray-200")">
                        @range.Text
                    </a>
                }
            </div>
            <a href="@Url.Action("Audio", "ProductsList", new { category = Model.Category })" class="inline-block mt-3 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">
                Xóa bộ lọc
            </a>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model="@(new ProductCardViewModel {
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "audio"
                    })" />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    const nextBatch = Array.from(products).slice(currentlyShown, currentlyShown + productsPerPage);
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });
                    currentlyShown += productsPerPage;
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });
                    currentlyShown = productsPerPage;
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}
