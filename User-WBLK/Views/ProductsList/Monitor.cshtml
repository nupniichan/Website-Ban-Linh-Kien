@model ProductListViewModel
@{
    ViewData["Title"] = "Màn hình";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Thương hiệu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var defaultUrl = Url.Action("Monitor", "ProductsList", new { size = Model.Size, resolution = Model.Resolution, refreshRate = Model.RefreshRate, priceRange = Model.PriceRange });
                            var brands = new Dictionary<string, string>() {
                                {"", "Tất cả thương hiệu"},
                                {"aoc", "AOC"},
                                {"asus", "ASUS"},
                                {"benq", "BenQ"},
                                {"dell", "Dell"},
                                {"lg", "LG"},
                                {"msi", "MSI"},
                                {"samsung", "Samsung"},
                                {"viewsonic", "ViewSonic"}
                            };
                        }
                        @foreach (var brand in brands)
                        {
                            var url = Url.Action("Monitor", "ProductsList", new { 
                                brand = brand.Key,
                                size = Model.Size,
                                resolution = Model.Resolution,
                                refreshRate = Model.RefreshRate,
                                priceRange = Model.PriceRange
                            });
                            <option value="@url" selected="@(Model.Brand == brand.Key)">@brand.Value</option>
                        }
                    </select>
                </div>

                <!-- Kích thước -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var sizes = new Dictionary<string, string>() {
                                {"", "Tất cả kích thước"},
                                {"24", "24 inch"},
                                {"27", "27 inch"},
                                {"32", "32 inch"},
                                {"34", "34 inch"}
                            };
                        }
                        @foreach (var size in sizes)
                        {
                            var url = Url.Action("Monitor", "ProductsList", new { 
                                size = size.Key,
                                brand = Model.Brand,
                                resolution = Model.Resolution,
                                refreshRate = Model.RefreshRate,
                                priceRange = Model.PriceRange
                            });
                            <option value="@url" selected="@(Model.Size == size.Key)">@size.Value</option>
                        }
                    </select>
                </div>

                <!-- Độ phân giải -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var resolutions = new Dictionary<string, string>() {
                                {"", "Tất cả độ phân giải"},
                                {"1080p", "1080p (Full HD)"},
                                {"1440p", "1440p (2K)"},
                                {"4k", "4K (Ultra HD)"}
                            };
                        }
                        @foreach (var resolution in resolutions)
                        {
                            var url = Url.Action("Monitor", "ProductsList", new { 
                                resolution = resolution.Key,
                                brand = Model.Brand,
                                size = Model.Size,
                                refreshRate = Model.RefreshRate,
                                priceRange = Model.PriceRange
                            });
                            <option value="@url" selected="@(Model.Resolution == resolution.Key)">@resolution.Value</option>
                        }
                    </select>
                </div>

                <!-- Tần số quét -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        @{
                            var refreshRates = new Dictionary<string, string>() {
                                {"", "Tất cả tần số quét"},
                                {"60", "60Hz"},
                                {"75", "75Hz"},
                                {"144", "144Hz"},
                                {"165", "165Hz"},
                                {"240", "240Hz"}
                            };
                        }
                        @foreach (var rate in refreshRates)
                        {
                            var url = Url.Action("Monitor", "ProductsList", new { 
                                refreshRate = rate.Key,
                                brand = Model.Brand,
                                size = Model.Size,
                                resolution = Model.Resolution,
                                priceRange = Model.PriceRange
                            });
                            <option value="@url" selected="@(Model.RefreshRate == rate.Key)">@rate.Value</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-2-trieu", "Dưới 2 triệu"},
                        {"2-5-trieu", "2 - 5 triệu"},
                        {"5-10-trieu", "5 - 10 triệu"},
                        {"10-15-trieu", "10 - 15 triệu"},
                        {"tren-15-trieu", "Trên 15 triệu"}
                    };
                }
                @foreach (var range in priceRanges)
                {
                    var url = Url.Action("Monitor", "ProductsList", new { 
                        priceRange = range.Key,
                        brand = Model.Brand,
                        size = Model.Size,
                        resolution = Model.Resolution,
                        refreshRate = Model.RefreshRate
                    });
                    <a href="@url" 
                       class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model.PriceRange == range.Key ? "bg-blue-600 text-white" : "")">
                        @range.Value
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mt-6">
        @if (Model.Products != null && Model.Products.Any())
        {
            var allProducts = Model.Products.ToList();
            
            for (int i = 0; i < allProducts.Count; i++)
            {
                var product = allProducts[i];
                var isHidden = i >= 10;
                
                <div class="product-item @(isHidden ? "hidden" : "")" data-index="@i">
                    <partial name="_ProductCard" model='new ProductCardViewModel 
                    { 
                        IdSp = product.IdSp,
                        TenSp = product.Tensanpham,
                        Gia = product.Gia,
                        ImageUrl = product.Hinhanh,
                        LoaiSp = "monitor"
                    }' />
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-8 text-gray-500">
                Không tìm thấy sản phẩm nào phù hợp với tiêu chí tìm kiếm
            </div>
        }
    </div>

    @if (Model.Products != null && Model.Products.Count() > 10)
    {
        <div class="text-center mt-6">
            <button id="loadMoreBtn" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-300">
                Xem thêm
            </button>
            <button id="collapseBtn" class="hidden bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-300 ml-2">
                Thu gọn
            </button>
        </div>
    }

</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const collapseBtn = document.getElementById('collapseBtn');
            const products = document.querySelectorAll('.product-item');
            const productsPerPage = 10;
            let currentlyShown = productsPerPage;

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    // Calculate next batch of products to show
                    const nextBatch = Array.from(products)
                        .slice(currentlyShown, currentlyShown + productsPerPage);
                    
                    // Show next batch of products
                    nextBatch.forEach(product => {
                        product.classList.remove('hidden');
                    });

                    // Update counter
                    currentlyShown += productsPerPage;

                    // Hide "Xem thêm" button and show "Thu gọn" button if we've shown all products
                    if (currentlyShown >= products.length) {
                        loadMoreBtn.classList.add('hidden');
                        collapseBtn.classList.remove('hidden');
                    }
                });
            }

            if (collapseBtn) {
                collapseBtn.addEventListener('click', function() {
                    // Hide all products after the first 10
                    Array.from(products).forEach((product, index) => {
                        if (index >= productsPerPage) {
                            product.classList.add('hidden');
                        }
                    });

                    // Reset counter
                    currentlyShown = productsPerPage;

                    // Show "Xem thêm" button and hide "Thu gọn" button
                    loadMoreBtn.classList.remove('hidden');
                    collapseBtn.classList.add('hidden');

                    // Scroll back to the top of the products section
                    products[0].scrollIntoView({ behavior: 'smooth' });
                });
            }
        });
    </script>
}

