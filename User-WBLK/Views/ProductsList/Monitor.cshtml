@model ProductListViewModel
@{
    ViewData["Title"] = "Monitor";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mx-auto px-4">
    <!-- Filters -->
    <div class="bg-white rounded-lg p-4">
        <div class="mb-4">
            <h2 class="font-semibold mb-2">Chọn theo tiêu chí:</h2>
            <div class="flex flex-wrap gap-2">
                <!-- Thương hiệu -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="@Url.Action("Monitor", "ProductsList")">Thương hiệu</option>
                        @{
                            var brands = new Dictionary<string, string>() {
                                {"aoc", "AOC"},
                                {"asus", "ASUS"},
                                {"benq", "BenQ"},
                                {"dell", "Dell"},
                                {"lg", "LG"},
                                {"msi", "MSI"},
                                {"samsung", "Samsung"},
                                {"viewsonic", "ViewSonic"}
                            };

                            foreach (var brand in brands)
                            {
                                var url = Url.Action("Monitor", "ProductsList", new { 
                                    brand = brand.Key,
                                    priceRange = Model.PriceRange,
                                    size = Model.Size,
                                    resolution = Model.Resolution,
                                    refreshRate = Model.RefreshRate
                                });
                                <option value="@url" selected="@(Model.Brand == brand.Key)">
                                    @brand.Value
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Kích thước -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="@Url.Action("Monitor", "ProductsList")">Kích thước</option>
                        @{
                            var sizes = new Dictionary<string, string>() {
                                {"24", "24 inch"},
                                {"27", "27 inch"},
                                {"32", "32 inch"},
                                {"34", "34 inch"}
                            };

                            foreach (var size in sizes)
                            {
                                var url = Url.Action("Monitor", "ProductsList", new { 
                                    size = size.Key,
                                    priceRange = Model.PriceRange,
                                    brand = Model.Brand,
                                    resolution = Model.Resolution,
                                    refreshRate = Model.RefreshRate
                                });
                                <option value="@url" selected="@(Model.Size == size.Key)">
                                    @size.Value
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Độ phân giải -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="@Url.Action("Monitor", "ProductsList")">Độ phân giải</option>
                        @{
                            var resolutions = new Dictionary<string, string>() {
                                {"1080p", "1080p"},
                                {"1440p", "1440p"},
                                {"4k", "4K"}
                            };

                            foreach (var resolution in resolutions)
                            {
                                var url = Url.Action("Monitor", "ProductsList", new { 
                                    resolution = resolution.Key,
                                    priceRange = Model.PriceRange,
                                    brand = Model.Brand,
                                    size = Model.Size,
                                    refreshRate = Model.RefreshRate
                                });
                                <option value="@url" selected="@(Model.Resolution == resolution.Key)">
                                    @resolution.Value
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Tần số quét -->
                <div class="relative">
                    <select class="px-4 py-2 border rounded-md w-48" onchange="window.location.href=this.value">
                        <option value="@Url.Action("Monitor", "ProductsList")">Tần số quét</option>
                        @{
                            var refreshRates = new Dictionary<string, string>() {
                                {"60", "60Hz"},
                                {"75", "75Hz"},
                                {"120", "120Hz"},
                                {"144", "144Hz"},
                                {"165", "165Hz"},
                                {"240", "240Hz"}
                            };

                            foreach (var rate in refreshRates)
                            {
                                var url = Url.Action("Monitor", "ProductsList", new { 
                                    refreshRate = rate.Key,
                                    priceRange = Model.PriceRange,
                                    brand = Model.Brand,
                                    size = Model.Size,
                                    resolution = Model.Resolution
                                });
                                <option value="@url" selected="@(Model.RefreshRate == rate.Key)">
                                    @rate.Value
                                </option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Price Range -->
        <div>
            <h2 class="font-semibold mb-2">Khoảng giá:</h2>
            <div class="flex flex-wrap gap-2">
                @{
                    var priceRanges = new Dictionary<string, string>() {
                        {"duoi-2-trieu", "Dưới 2 triệu"},
                        {"2-5-trieu", "2 - 5 triệu"},
                        {"5-10-trieu", "5 - 10 triệu"},
                        {"10-15-trieu", "10 - 15 triệu"},
                        {"tren-20-trieu", "Trên 20 triệu"}
                    };

                    foreach (var range in priceRanges)
                    {
                        var url = Url.Action("Monitor", "ProductsList", new { 
                            priceRange = range.Key,
                            brand = Model.Brand,
                            size = Model.Size,
                            resolution = Model.Resolution,
                            refreshRate = Model.RefreshRate
                        });

                        <a href="@url" 
                           class="px-4 py-2 bg-gray-100 rounded-md hover:bg-gray-200 @(Model.PriceRange == range.Key ? "bg-blue-600 text-white" : "")">
                            @range.Value
                        </a>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Sort Options -->
    <div class="flex gap-4 mb-6">
        <button class="px-4 py-2 bg-white rounded-md hover:bg-gray-50">Tăng dần</button>
        <button class="px-4 py-2 bg-white rounded-md hover:bg-gray-50">Giảm dần</button>
        <button class="px-4 py-2 bg-white rounded-md hover:bg-gray-50">Từ A - Z</button>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        @for (int i = 0; i < 15; i++)
        {
            <partial name="_ProductCard" model="new ProductCardViewModel()"/>
        }
    </div>

    <!-- Pagination -->
    <div class="flex justify-center items-center space-x-2 my-8">
        @{
            string GetPageUrl(int pageNum)
            {
                var routeValues = new Dictionary<string, object>();
                
                if (!string.IsNullOrEmpty(Model.Brand))
                {
                    routeValues.Add("brand", Model.Brand);
                }
                
                if (!string.IsNullOrEmpty(Model.Size))
                {
                    routeValues.Add("size", Model.Size);
                }
                
                if (!string.IsNullOrEmpty(Model.Resolution))
                {
                    routeValues.Add("resolution", Model.Resolution);
                }
                
                if (!string.IsNullOrEmpty(Model.RefreshRate))
                {
                    routeValues.Add("refreshRate", Model.RefreshRate);
                }
                
                if (!string.IsNullOrEmpty(Model.PriceRange))
                {
                    routeValues.Add("priceRange", Model.PriceRange);
                }
                
                routeValues.Add("page", pageNum);
                
                return Url.Action("Monitor", routeValues);
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage - 1)" 
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == 1 ? "opacity-50 cursor-not-allowed" : "")"
           @(Model.CurrentPage == 1 ? "disabled" : "")>
            <span class="sr-only">Previous</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </a>
        
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.CurrentPage)
            {
                <a href="@GetPageUrl(i)" 
                   class="px-4 py-2 bg-blue-600 text-white rounded-md">@i</a>
            }
            else if (i <= 3 || i == Model.TotalPages || Math.Abs(i - Model.CurrentPage) <= 1)
            {
                <a href="@GetPageUrl(i)" 
                   class="px-4 py-2 bg-white hover:bg-gray-50 rounded-md">@i</a>
            }
            else if (i == 4 || i == Model.TotalPages - 1)
            {
                <span class="px-4 py-2">...</span>
            }
        }

        <a href="@GetPageUrl(Model.CurrentPage + 1)" 
           class="px-4 py-2 bg-white rounded-md hover:bg-gray-50 @(Model.CurrentPage == Model.TotalPages ? "opacity-50 cursor-not-allowed" : "")"
           @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>
            <span class="sr-only">Next</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </a>
    </div>
</div>

