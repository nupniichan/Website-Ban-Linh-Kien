@model CheckoutViewModel

<div class="container mx-auto px-4 md:px-8 lg:px-32">
    <div class="max-w-[700px] mx-auto py-5">
        <h4 class="text-xl font-normal mb-4">Thông tin đặt hàng</h4>

        <form id="checkoutForm" method="post" action="@Url.Action("Index", "Checkout")">
            <!-- Thông tin khách hàng -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-3 font-bold">Thông tin người nhận</h5>
                <div class="border-b border-gray-100 py-2 last:border-b-0">
                    <input asp-for="ReceiverName" placeholder="Tên người nhận" 
                           class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                    <span asp-validation-for="ReceiverName" class="text-red-500 text-sm"></span>
                </div>
                <div class="border-b border-gray-100 py-2 last:border-b-0">
                    <input asp-for="Email" type="email" placeholder="Email" 
                           class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                    <span asp-validation-for="Email" class="text-red-500 text-sm"></span>
                </div>
                <div class="border-b border-gray-100 py-2 last:border-b-0">
                    <input asp-for="ReceiverPhone" placeholder="Số điện thoại" 
                           class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                    <span asp-validation-for="ReceiverPhone" class="text-red-500 text-sm"></span>
                </div>
            </div>

            <!-- Sản phẩm -->
            <div id="checkoutItems" class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    @foreach (var item in Model.Items)
                    {
                        <div class="cart-item" 
                             data-product-id="@item.ProductId"
                             data-product-name="@item.ProductName"
                             data-image-url="@item.ImageUrl"
                             data-quantity="@item.Quantity"
                             data-price="@item.Price">
                            <div class="flex items-center mb-4 last:mb-0">
                                <img src="http://localhost:5177/@item.ImageUrl" alt="@item.ProductName" 
                                     class="w-20 h-20 object-cover rounded">
                                <div class="ml-4">
                                    <div>@item.ProductName</div>
                                    <div>Số lượng: @item.Quantity</div>
                                    <div class="text-red-500">Giá: @item.Price.ToString("N0") VNĐ</div>
                                </div>
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].ProductId" value="${item.ProductId}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].ProductName" value="${item.ProductName}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].ImageUrl" value="${item.ImageUrl}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].Quantity" value="${item.Quantity}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].Price" value="${item.Price}" />
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Thông tin nhận hàng -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-3 font-bold">Thông tin giao - nhận hàng</h5>
                <!-- Phương thức nhận hàng -->
                <div class="bg-gray-100 p-4 rounded-lg mb-6">
                    <div class="flex justify-between">
                        <label class="flex items-center cursor-pointer">
                            <input type="radio" name="DeliveryMethod" value="0" id="store-pickup" class="hidden peer">
                            <span class="w-4 h-4 border border-gray-300 rounded-full inline-block mr-2 relative
                                       peer-checked:border-blue-500 peer-checked:before:content-[''] 
                                       peer-checked:before:absolute peer-checked:before:w-2 peer-checked:before:h-2 
                                       peer-checked:before:bg-blue-500 peer-checked:before:rounded-full 
                                       peer-checked:before:top-1/2 peer-checked:before:left-1/2 
                                       peer-checked:before:-translate-x-1/2 peer-checked:before:-translate-y-1/2">
                            </span>
                            <span class="text-gray-700">Nhận tại cửa hàng</span>
                        </label>
                        <label class="flex items-center cursor-pointer">
                            <input type="radio" name="DeliveryMethod" value="1" id="home-delivery" checked class="hidden peer">
                            <span class="w-4 h-4 border border-gray-300 rounded-full inline-block mr-2 relative
                                       peer-checked:border-blue-500 peer-checked:before:content-[''] 
                                       peer-checked:before:absolute peer-checked:before:w-2 peer-checked:before:h-2 
                                       peer-checked:before:bg-blue-500 peer-checked:before:rounded-full 
                                       peer-checked:before:top-1/2 peer-checked:before:left-1/2 
                                       peer-checked:before:-translate-x-1/2 peer-checked:before:-translate-y-1/2">
                            </span>
                            <span class="text-gray-700">Giao hàng tận nơi</span>
                        </label>
                    </div>
                </div>
                <!-- Địa chỉ cửa hàng (ẩn mặc định) -->
                <div id="store-address" class="bg-gray-50 p-4 rounded-lg mb-4 hidden">
                    <p class="font-medium mb-2">Địa chỉ cửa hàng:</p>
                    <p class="text-gray-600">123 Nguyễn Văn A, Phường 1, Quận 1, TP.HCM</p>
                    <p class="text-gray-600 mt-2">Thời gian làm việc: 8:00 - 21:00 (Thứ 2 - Chủ nhật)</p>
                </div>
                <!-- Form địa chỉ giao hàng -->
                <div id="delivery-address" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Tỉnh/Thành phố</label>
                            <input type="text" name="City" placeholder="Nhập tỉnh/thành phố"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Quận/Huyện</label>
                            <input type="text" name="District" placeholder="Nhập quận/huyện"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Phường/Xã</label>
                            <input type="text" name="Ward" placeholder="Nhập phường/xã"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Số nhà, tên đường</label>
                            <input type="text" name="StreetAddress" placeholder="Nhập số nhà, tên đường"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Ghi chú -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-2 font-bold">Ghi chú (nếu có):</h5>
                <textarea name="Note" 
                          class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all resize-none" 
                          rows="2" 
                          placeholder="Nhập ghi chú"></textarea>
            </div>

            <!-- Phương thức thanh toán -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-2 font-bold">Phương thức thanh toán</h5>
                <select id="paymentMethod" name="PaymentMethod" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all appearance-none bg-white bg-[url('data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 20 20\'%3e%3cpath stroke=\'%236b7280\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'M6 8l4 4 4-4\'/%3e%3c/svg%3e')] bg-[length:1.5em_1.5em] bg-no-repeat bg-[right_0.5rem_center] cursor-pointer">
                    <option value="COD">Thanh toán khi nhận hàng</option>
                    <option value="Momo">Momo</option>
                    <option value="Paypal">Paypal</option>
                </select>
            </div>

            <!-- Mã giảm giá -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-2 font-bold">Mã giảm giá</h5>
                <input type="text" name="DiscountCode" list="discountCodes" placeholder="Nhập mã giảm giá hoặc chọn"
                    class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                <datalist id="discountCodes">
                    @foreach(var discount in Model.AvailableDiscounts)
                    {
                        <option value="@discount.IdMgg">
                            @discount.Ten - @discount.Tilechietkhau% 
                            (Từ @discount.Ngaysudung.ToString("yyyy-MM-dd") đến @discount.Ngayhethan.ToString("yyyy-MM-dd"))
                        </option>
                    }
                </datalist>
            </div>

            <!-- Tổng tiền -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg">
                <div class="flex justify-between items-center">
                    <span class="text-lg">Tổng tiền ban đầu:</span>
                    <span id="originalTotal" class="text-xl text-gray-700 font-medium">
                        @Model.TotalAmount.ToString("N0")đ
                    </span>
                </div>
                @if (User.Identity?.IsAuthenticated == true && Model.VipDiscountPercentage > 0)
                {
                    <div id="vipDiscountBlock" class="flex justify-between items-center mt-2">
                        <span class="text-lg">
                            Tổng tiền sau VIP discount (<span id="vipDiscountPercentage">@Model.VipDiscountPercentage</span>%):
                        </span>
                        <span id="vipPrice" class="text-xl text-blue-500 font-medium">
                            @(Model.TotalAmount * (1 - Model.VipDiscountPercentage / 100)).ToString("N0")đ
                        </span>
                    </div>
                }
                <div id="discountCodeBlock" class="flex justify-between items-center mt-2" style="display: none;">
                    <span class="text-lg">
                        Tổng tiền sau mã giảm giá (<span id="codeDiscountPercentage">0</span>%):
                    </span>
                    <span id="finalPrice" class="text-xl text-red-500 font-medium">
                        @(User.Identity?.IsAuthenticated == true && Model.VipDiscountPercentage > 0 
                            ? (Model.TotalAmount * (1 - Model.VipDiscountPercentage / 100)).ToString("N0") 
                            : Model.TotalAmount.ToString("N0"))đ
                    </span>
                </div>
            </div>

            <!-- Modal xác nhận đặt hàng cho khách đã đăng nhập -->
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div id="loggedInOrderConfirmModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
                    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
                        <h3 class="text-lg font-bold mb-4">Xác nhận đơn hàng</h3>
                        <div class="mb-4">
                            <p class="font-medium">Thông tin giao hàng:</p>
                            <div class="mt-2 text-gray-600">
                                <p>Người nhận: <span id="confirmName"></span></p>
                                <p>Số điện thoại: <span id="confirmPhone"></span></p>
                                <p>Địa chỉ: <span id="confirmAddress"></span></p>
                            </div>
                        </div>
                        <div class="mb-4">
                            <p class="font-medium">Tổng giá trị đơn hàng:</p>
                            <p class="text-red-500 text-lg font-medium" id="confirmTotal"></p>
                        </div>
                        <div class="flex justify-end gap-4">
                            <button type="button" onclick="closeOrderConfirm()" 
                                    class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                                Hủy
                            </button>
                            <button type="button" onclick="submitOrder()" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                                Xác nhận đặt hàng
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Modal xác nhận đặt hàng (khách vãng lai) -->
            @if (!(User.Identity?.IsAuthenticated ?? false))
            {
                <div id="orderConfirmModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
                    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
                        <h3 class="text-lg font-bold mb-4">Xác nhận đặt hàng</h3>
                        <p class="mb-4">Bạn có muốn đặt hàng với tư cách khách vãng lai?</p>
                        <p class="text-sm text-gray-600 mb-4">
                            Nếu đăng nhập, bạn sẽ được tích điểm khi mua hàng thành công:
                            <br>- Bạc (500-999 điểm): Giảm 3%
                            <br>- Vàng (1000-4999 điểm): Giảm 7%
                            <br>- Kim cương (5000+ điểm): Giảm 10%
                        </p>
                        <div class="flex justify-end gap-4">
                            <button type="button" onclick="showLoginPopup()" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                                Đăng nhập
                            </button>
                            <button type="button" onclick="submitOrder()" class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                                Tiếp tục
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Button Đặt hàng -->
            <button type="button" onclick="showOrderConfirmation()" 
                    class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-500/50 transition-all font-medium mt-4">
                Đặt hàng
            </button>

            <input type="hidden" id="cartItems" name="Items" />
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            if (!@Json.Serialize(User.Identity?.IsAuthenticated == true)) {
                loadGuestCart();
                // Recalculate originalPrice from guestCart and update vipPrice accordingly.
                let guestCart = JSON.parse(localStorage.getItem('guestCart') || '[]');
                window.originalPrice = guestCart.reduce((sum, item) => {
                    return sum + (parseFloat(item.price) * parseInt(item.quantity));
                }, 0);
                // For guest users, vipDiscount is 0.
                vipPrice = window.originalPrice * (1 - vipDiscount / 100);
                document.getElementById('originalTotal').textContent = window.originalPrice.toLocaleString('vi-VN') + 'đ';
                if (document.getElementById('vipPrice')) {
                    document.getElementById('vipPrice').textContent = vipPrice.toLocaleString('vi-VN') + 'đ';
                }
            }
        });

        function loadGuestCart() {
            const cart = JSON.parse(localStorage.getItem('guestCart')) || [];
            const checkoutItems = document.getElementById('checkoutItems');
            let totalAmount = 0;
            if (cart.length === 0) {
                window.location.href = '/';
                return;
            }
            let itemsHtml = '';
            cart.forEach(item => {
                const subtotal = item.price * item.quantity;
                totalAmount += subtotal;
                itemsHtml += `
                    <div class="cart-item" 
                         data-product-id="${item.id}"
                         data-product-name="${item.name}"
                         data-image-url="${item.image}"
                         data-quantity="${item.quantity}"
                         data-price="${item.price}">
                        <div class="flex items-center mb-4 last:mb-0">
                            <img src="http://localhost:5177/${item.image}" alt="${item.name}" 
                                 class="w-20 h-20 object-cover rounded">
                            <div class="ml-4">
                                <div>${item.name}</div>
                                <div>Số lượng: ${item.quantity}</div>
                                <div class="text-red-500">Giá: ${item.price.toLocaleString('vi-VN')} VNĐ</div>
                            </div>
                            <input type="hidden" name="Items[${cart.indexOf(item)}].ProductId" value="${item.id}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].ProductName" value="${item.name}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].ImageUrl" value="${item.image}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].Quantity" value="${item.quantity}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].Price" value="${item.price}" />
                        </div>
                    </div>
                `;
            });
            checkoutItems.innerHTML = itemsHtml;
            document.getElementById('originalTotal').textContent = totalAmount.toLocaleString('vi-VN') + 'đ';
            window.originalPrice = totalAmount;
        }

        function showOrderConfirmation() {
            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
            const form = document.getElementById('checkoutForm');
            const name = form.querySelector('[name="ReceiverName"]').value;
            const phone = form.querySelector('[name="ReceiverPhone"]').value;
            const deliveryMethod = form.querySelector('input[name="DeliveryMethod"]:checked').value;
            
            let address = '';
            if (deliveryMethod === '0') {
                address = '@Model.StoreAddress';
            } else {
                const street = form.querySelector('[name="StreetAddress"]').value;
                const ward = form.querySelector('[name="Ward"]').value;
                const district = form.querySelector('[name="District"]').value;
                const city = form.querySelector('[name="City"]').value;
                address = `${street}, ${ward}, ${district}, ${city}`;
            }
            
            var discountCodeInput = document.querySelector('[name="DiscountCode"]');
            var code = discountCodeInput ? discountCodeInput.value.trim() : "";
            var codeDiscount = 0;
            if (availableDiscounts.hasOwnProperty(code)) {
                codeDiscount = availableDiscounts[code];
            }
            
            var finalTotal = isAuthenticated ? vipPrice * (1 - codeDiscount / 100) : originalPrice;
            
            if (isAuthenticated) {
                document.getElementById('confirmName').textContent = name;
                document.getElementById('confirmPhone').textContent = phone;
                document.getElementById('confirmAddress').textContent = address;
                document.getElementById('confirmTotal').textContent = finalTotal.toLocaleString('vi-VN') + 'đ';
                
                document.getElementById('loggedInOrderConfirmModal').classList.remove('hidden');
                document.getElementById('loggedInOrderConfirmModal').classList.add('flex');
            } else {
                // For guests, show the guest modal without setting confirm* fields.
                document.getElementById('orderConfirmModal').classList.remove('hidden');
                document.getElementById('orderConfirmModal').classList.add('flex');
            }
        }

        function closeOrderConfirm() {
            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
            if (isAuthenticated) {
                document.getElementById('loggedInOrderConfirmModal').classList.add('hidden');
                document.getElementById('loggedInOrderConfirmModal').classList.remove('flex');
            } else {
                document.getElementById('orderConfirmModal').classList.add('hidden');
                document.getElementById('orderConfirmModal').classList.remove('flex');
            }
        }

        function submitOrder() {
            const form = document.getElementById('checkoutForm');
            if (!form) {
                console.error('Không tìm thấy form checkout');
                return;
            }
            try {
                let cartItems;
                const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
                if (!isAuthenticated) {
                    const guestCart = localStorage.getItem('guestCart');
                    if (!guestCart) {
                        alert('Giỏ hàng trống');
                        return;
                    }
                    cartItems = JSON.parse(guestCart).map(item => ({
                        ProductId: item.id,
                        ProductName: item.name,
                        Quantity: parseInt(item.quantity),
                        Price: parseFloat(item.price)
                    }));
                } else {
                    cartItems = Array.from(document.querySelectorAll('.cart-item')).map(item => ({
                        ProductId: item.dataset.productId,
                        ProductName: item.dataset.productName,
                        Quantity: parseInt(item.dataset.quantity),
                        Price: parseFloat(item.dataset.price)
                    }));
                }
                const deliveryMethod = parseInt(form.querySelector('input[name="DeliveryMethod"]:checked').value);
                const paymentMethod = document.getElementById('paymentMethod').value;
                
                // Xử lý riêng cho các phương thức thanh toán khác
                if (paymentMethod === 'Momo') {
                    processMomoPayment(cartItems);
                    return;
                }
                
                // Xử lý thanh toán PayPal
                if (paymentMethod === 'Paypal') {
                    processPaypalPayment(cartItems);
                    return;
                }
                
                // Tiếp tục xử lý đơn hàng như bình thường cho COD và phương thức khác
                const formData = {
                    ReceiverName: form.querySelector('[name="ReceiverName"]').value,
                    Email: form.querySelector('[name="Email"]').value,
                    ReceiverPhone: form.querySelector('[name="ReceiverPhone"]').value,
                    DeliveryMethod: deliveryMethod,
                    PaymentMethod: paymentMethod,
                    City: form.querySelector('[name="City"]').value,
                    District: form.querySelector('[name="District"]').value,
                    Ward: form.querySelector('[name="Ward"]').value,
                    StreetAddress: form.querySelector('[name="StreetAddress"]').value,
                    Note: form.querySelector('[name="Note"]').value,
                    DiscountCode: form.querySelector('[name="DiscountCode"]').value.trim(),
                    Items: cartItems
                };
                fetch(form.action, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (!isAuthenticated) {
                            localStorage.removeItem('guestCart');
                        }
                        window.location.href = data.redirectUrl;
                    } else {
                        alert(data.message || 'Có lỗi xảy ra khi đặt hàng');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi đặt hàng');
                });
            } catch (error) {
                console.error('Lỗi khi xử lý đơn hàng:', error);
                alert('Có lỗi xảy ra khi xử lý đơn hàng');
            }
        }
        
        // Thêm hàm xử lý thanh toán Momo
        function processMomoPayment(cartItems) {
            const form = document.getElementById('checkoutForm');
            if (!form) {
                console.error('Không tìm thấy form checkout');
                return;
            }
            
            // Tính tổng tiền
            let totalAmount = 0;
            cartItems.forEach(item => {
                totalAmount += item.Price * item.Quantity;
            });
            
            // Áp dụng giảm giá VIP nếu có
            const vipDiscount = @((User.Identity?.IsAuthenticated == true) ? Model.VipDiscountPercentage : 0);
            if (vipDiscount > 0) {
                totalAmount = totalAmount * (1 - vipDiscount / 100);
            }
            
            // Áp dụng mã giảm giá nếu có
            const discountCode = form.querySelector('[name="DiscountCode"]').value.trim();
            if (discountCode && availableDiscounts[discountCode]) {
                const codeDiscount = availableDiscounts[discountCode];
                totalAmount = totalAmount * (1 - codeDiscount / 100);
            }
            
            // Làm tròn số
            totalAmount = Math.round(totalAmount);
            
            // Tạo mã đơn hàng
            const orderId = 'DH' + new Date().getTime();
            
            // Tạo thông tin đơn hàng
            const orderInfo = 'Thanh toán đơn hàng ' + orderId;
            
            // Lấy thông tin người nhận
            const receiverName = form.querySelector('[name="ReceiverName"]').value;
            const receiverPhone = form.querySelector('[name="ReceiverPhone"]').value;
            
            // Lấy thông tin địa chỉ giao hàng
            let shippingAddress = "";
            const deliveryMethod = form.querySelector('input[name="DeliveryMethod"]:checked').value;
            if (deliveryMethod === '1') { // Giao hàng tận nơi
                const city = form.querySelector('[name="City"]').value;
                const district = form.querySelector('[name="District"]').value;
                const ward = form.querySelector('[name="Ward"]').value;
                const streetAddress = form.querySelector('[name="StreetAddress"]').value;
                shippingAddress = `${receiverName}, ${receiverPhone}, ${streetAddress}, ${ward}, ${district}, ${city}`;
            } else { // Nhận tại cửa hàng
                shippingAddress = `${receiverName}, ${receiverPhone}, Nhận tại cửa hàng: 123 Nguyễn Văn A, Phường 1, Quận 1, TP.HCM`;
            }
            
            // Ghi log thông tin
            console.log('Thông tin thanh toán Momo:');
            console.log('- Mã đơn hàng:', orderId);
            console.log('- Tổng tiền:', totalAmount);
            console.log('- Địa chỉ giao hàng:', shippingAddress);
            console.log('- Giỏ hàng:', cartItems);
            
            // Gọi API tạo thanh toán Momo
            fetch('/Momo/CreatePayment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    amount: totalAmount,
                    orderId: orderId,
                    orderInfo: orderInfo,
                    extraData: '',
                    requestType: 'payWithMethod',
                    shippingAddress: shippingAddress,
                    cartItems: JSON.stringify(cartItems)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.payUrl) {
                    // Lưu thông tin đơn hàng vào localStorage để sử dụng sau khi thanh toán
                    const orderData = {
                        orderId: orderId,
                        receiverName: receiverName,
                        receiverPhone: receiverPhone,
                        email: form.querySelector('[name="Email"]').value,
                        deliveryMethod: deliveryMethod,
                        city: form.querySelector('[name="City"]')?.value || '',
                        district: form.querySelector('[name="District"]')?.value || '',
                        ward: form.querySelector('[name="Ward"]')?.value || '',
                        streetAddress: form.querySelector('[name="StreetAddress"]')?.value || '',
                        note: form.querySelector('[name="Note"]')?.value || '',
                        discountCode: discountCode,
                        items: cartItems,
                        totalAmount: totalAmount,
                        paymentMethod: 'Momo'
                    };
                    localStorage.setItem('pendingOrder', JSON.stringify(orderData));
                    
                    // Chuyển hướng đến trang thanh toán Momo
                    window.location.href = data.payUrl;
                } else {
                    alert(data.message || 'Có lỗi xảy ra khi tạo thanh toán Momo');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi tạo thanh toán Momo');
            });
        }

        // Thêm hàm xử lý thanh toán PayPal
        function processPaypalPayment(cartItems) {
            const form = document.getElementById('checkoutForm');
            if (!form) {
                console.error('Không tìm thấy form checkout');
                return;
            }

            // Lấy thông tin đơn hàng
            const formData = {
                ReceiverName: form.querySelector('[name="ReceiverName"]').value,
                Email: form.querySelector('[name="Email"]').value,
                ReceiverPhone: form.querySelector('[name="ReceiverPhone"]').value,
                DeliveryMethod: parseInt(form.querySelector('input[name="DeliveryMethod"]:checked').value),
                PaymentMethod: 'Paypal',
                City: form.querySelector('[name="City"]').value,
                District: form.querySelector('[name="District"]').value,
                Ward: form.querySelector('[name="Ward"]').value,
                StreetAddress: form.querySelector('[name="StreetAddress"]').value,
                Note: form.querySelector('[name="Note"]').value,
                DiscountCode: form.querySelector('[name="DiscountCode"]').value.trim(),
                Items: cartItems
            };

            // Tạo đơn hàng trước
            fetch('@Url.Action("ProcessPayPalPayment", "Checkout")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Nếu tạo đơn hàng thành công, gửi request đến PayPal
                    fetch('@Url.Action("CreatePayment", "Paypal")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data.paypalData)
                    })
                    .then(response => response.json())
                    .then(paypalData => {
                        if (paypalData.success) {
                            // Xóa giỏ hàng nếu là khách vãng lai
                            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
                            if (!isAuthenticated) {
                                localStorage.removeItem('guestCart');
                            }
                            // Chuyển hướng đến trang thanh toán PayPal
                            window.location.href = paypalData.payUrl;
                        } else {
                            alert(paypalData.message || 'Có lỗi xảy ra khi tạo thanh toán PayPal');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi tạo thanh toán PayPal');
                    });
                } else {
                    alert(data.message || 'Có lỗi xảy ra khi tạo đơn hàng');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi tạo đơn hàng');
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            const checkoutForm = document.getElementById('checkoutForm');
            if (checkoutForm) {
                checkoutForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    submitOrder();
                });
            }
            const guestCart = localStorage.getItem('guestCart');
            if (guestCart) {
                try {
                    const cartItems = JSON.parse(guestCart);
                    console.log('Current cart:', cartItems);
                    displayCartItems(cartItems);
                } catch (error) {
                    console.error('Lỗi khi load giỏ hàng:', error);
                }
            }
        });

        function displayCartItems(cartItems) {
            const cartContainer = document.querySelector('.cart-items-container');
            if (!cartContainer) return;
            let total = 0;
            cartContainer.innerHTML = cartItems.map(item => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                return `
                    <div class="cart-item" data-product-id="${item.productId}">
                        <div class="flex justify-between items-center p-4 border-b">
                            <div class="flex-1">
                                <h3 class="font-semibold">${item.productName}</h3>
                                <p>Số lượng: ${item.quantity}</p>
                                <p>Giá: ${new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND'
                                }).format(item.price)}</p>
                            </div>
                            <div class="text-right">
                                <p class="font-semibold">${new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND'
                                }).format(itemTotal)}</p>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            const totalElement = document.getElementById('cartTotal');
            if (totalElement) {
                totalElement.textContent = new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                }).format(total);
            }
        }

        function showLoginPopup() {
            document.getElementById('orderConfirmModal').classList.add('hidden');
            document.getElementById('orderConfirmModal').classList.remove('flex');
            const loginPopup = document.getElementById('loginPopup');
            if (loginPopup) {
                loginPopup.classList.remove('hidden');
                loginPopup.classList.add('flex');
            }
        }

        // Build mapping of available discount codes
        var availableDiscounts = {};
        @foreach(var d in Model.AvailableDiscounts)
        {
            @:availableDiscounts["@d.IdMgg"] = @d.Tilechietkhau;
        }

        // Get original and VIP price from the model.
        var originalPrice = @Model.TotalAmount;
        var vipDiscount = @((User.Identity?.IsAuthenticated == true) ? Model.VipDiscountPercentage : 0);
        var vipPrice = originalPrice * (1 - vipDiscount / 100);
        // For guest users, originalPrice has been re-calculated in loadGuestCart

        var vipPriceElem = document.getElementById('vipPrice');
        if (vipPriceElem) {
            vipPriceElem.textContent = vipPrice.toLocaleString('vi-VN') + 'đ';
        }

        function updateFinalPrice() {
            var codeInput = document.querySelector('[name="DiscountCode"]');
            var code = codeInput.value.trim();
            var codeDiscount = 0;
            if (availableDiscounts.hasOwnProperty(code)) {
                codeDiscount = availableDiscounts[code];
            }
            document.getElementById('codeDiscountPercentage').textContent = codeDiscount;
            var afterDiscountCodePrice = vipPrice * (1 - codeDiscount / 100);
            if (codeDiscount > 0) {
                document.getElementById('discountCodeBlock').style.display = "flex";
            } else {
                document.getElementById('discountCodeBlock').style.display = "none";
            }
            document.getElementById('finalPrice').textContent = afterDiscountCodePrice.toLocaleString('vi-VN') + 'đ';
        }

        var discountCodeInput = document.querySelector('[name="DiscountCode"]');
        if (discountCodeInput) {
            discountCodeInput.addEventListener('change', updateFinalPrice);
            discountCodeInput.addEventListener('blur', updateFinalPrice);
        }

        // Thêm biến toàn cục để theo dõi trạng thái
        let isValidCustomerInfo = true;
        let existingCustomerInfo = null;

        // Thêm hàm kiểm tra thông tin khách hàng
        async function checkExistingCustomer() {
            const email = document.querySelector('[name="Email"]').value;
            const phone = document.querySelector('[name="ReceiverPhone"]').value;
            
            if (!email && !phone) return;

            try {
                const response = await fetch('@Url.Action("CheckExistingCustomer", "Checkout")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, phone })
                });

                const data = await response.json();
                
                if (data.exists) {
                    const name = document.querySelector('[name="ReceiverName"]').value;
                    
                    if (email !== data.customer.email || 
                        phone !== data.customer.phone || 
                        name !== data.customer.name) {
                        
                        isValidCustomerInfo = false;
                        existingCustomerInfo = data.customer;
                        
                        const confirmMessage = `Đã tìm thấy thông tin khách hàng với ${data.customer.matchType} này:

Họ tên: ${data.customer.name}
Email: ${data.customer.email}
Số điện thoại: ${data.customer.phone}

Bạn phải sử dụng thông tin này để đặt hàng. Bạn có muốn sử dụng thông tin này không?`;

                        if (confirm(confirmMessage)) {
                            useExistingInfo();
                        }
                    } else {
                        isValidCustomerInfo = true;
                    }
                } else {
                    isValidCustomerInfo = true;
                }
            } catch (error) {
                console.error('Error checking existing customer:', error);
            }
        }

        // Hàm sử dụng thông tin có sẵn
        function useExistingInfo() {
            if (existingCustomerInfo) {
                document.querySelector('[name="ReceiverName"]').value = existingCustomerInfo.name;
                document.querySelector('[name="Email"]').value = existingCustomerInfo.email;
                document.querySelector('[name="ReceiverPhone"]').value = existingCustomerInfo.phone;
                
                if (existingCustomerInfo.address) {
                    const addressParts = existingCustomerInfo.address.split(',').map(part => part.trim());
                    if (addressParts.length >= 4) {
                        document.querySelector('[name="StreetAddress"]').value = addressParts[0];
                        document.querySelector('[name="Ward"]').value = addressParts[1];
                        document.querySelector('[name="District"]').value = addressParts[2];
                        document.querySelector('[name="City"]').value = addressParts[3];
                    }
                }
                isValidCustomerInfo = true;
            }
        }

        // Sửa lại hàm submitOrder để thêm kiểm tra
        const originalSubmitOrder = submitOrder;
        submitOrder = function() {
            if (!isValidCustomerInfo && existingCustomerInfo) {
                alert(`Vui lòng sử dụng thông tin đã đăng ký trước đó:

Họ tên: ${existingCustomerInfo.name}
Email: ${existingCustomerInfo.email}
Số điện thoại: ${existingCustomerInfo.phone}`);
                return;
            }
            
            // Gọi hàm gốc
            originalSubmitOrder();
        };

        // Thêm event listeners để kiểm tra khi người dùng thay đổi thông tin
        document.addEventListener('DOMContentLoaded', function() {
            const existingDOMContentLoaded = document.onDOMContentLoaded;
            
            document.querySelector('[name="Email"]').addEventListener('change', () => { 
                isValidCustomerInfo = false; 
                checkExistingCustomer(); 
            });
            
            document.querySelector('[name="ReceiverPhone"]').addEventListener('change', () => { 
                isValidCustomerInfo = false; 
                checkExistingCustomer(); 
            });
            
            document.querySelector('[name="ReceiverName"]').addEventListener('change', () => { 
                isValidCustomerInfo = false; 
                checkExistingCustomer(); 
            });
            
            // Kiểm tra ban đầu
            checkExistingCustomer();
            
            // Gọi hàm gốc nếu có
            if (existingDOMContentLoaded) {
                existingDOMContentLoaded();
            }
        });
    </script>
}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const storePickup = document.getElementById('store-pickup');
        const homeDelivery = document.getElementById('home-delivery');
        const storeAddress = document.getElementById('store-address');
        const deliveryAddress = document.getElementById('delivery-address');

        function toggleDeliveryMethod() {
            if (storePickup.checked) {
                storeAddress.classList.remove('hidden');
                deliveryAddress.classList.add('hidden');
            } else {
                storeAddress.classList.add('hidden');
                deliveryAddress.classList.remove('hidden');
            }
        }

        storePickup.addEventListener('change', toggleDeliveryMethod);
        homeDelivery.addEventListener('change', toggleDeliveryMethod);
    });
</script>