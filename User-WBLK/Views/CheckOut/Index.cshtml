@model CheckoutViewModel

<div class="container mx-auto px-4 md:px-8 lg:px-32">
    <div class="max-w-[700px] mx-auto py-5">
        <h4 class="text-xl font-normal mb-4">Thông tin đặt hàng</h4>

        <form id="checkoutForm" method="post" action="@Url.Action("Index", "Checkout")">
            <!-- Thông tin khách hàng -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-3 font-bold">Thông tin người nhận</h5>
                <div class="border-b border-gray-100 py-2 last:border-b-0">
                    <input asp-for="ReceiverName" placeholder="Tên người nhận" 
                           class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                    <span asp-validation-for="ReceiverName" class="text-red-500 text-sm"></span>
                </div>
                <div class="border-b border-gray-100 py-2 last:border-b-0">
                    <input asp-for="Email" type="email" placeholder="Email" 
                           class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                    <span asp-validation-for="Email" class="text-red-500 text-sm"></span>
                </div>
                <div class="border-b border-gray-100 py-2 last:border-b-0">
                    <input asp-for="ReceiverPhone" placeholder="Số điện thoại" 
                           class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                    <span asp-validation-for="ReceiverPhone" class="text-red-500 text-sm"></span>
                </div>
            </div>

            <!-- Sản phẩm -->
            <div id="checkoutItems" class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    @foreach (var item in Model.Items)
                    {
                        <div class="cart-item" 
                             data-product-id="@item.ProductId"
                             data-product-name="@item.ProductName"
                             data-image-url="@item.ImageUrl"
                             data-quantity="@item.Quantity"
                             data-price="@item.Price">
                            <div class="flex items-center mb-4 last:mb-0">
                                <img src="http://localhost:5177/@item.ImageUrl" alt="@item.ProductName" 
                                     class="w-20 h-20 object-cover rounded">
                                <div class="ml-4">
                                    <div>@item.ProductName</div>
                                    <div>Số lượng: @item.Quantity</div>
                                    <div class="text-red-500">Giá: @item.Price.ToString("N0") VNĐ</div>
                                </div>
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].ProductId" value="${item.ProductId}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].ProductName" value="${item.ProductName}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].ImageUrl" value="${item.ImageUrl}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].Quantity" value="${item.Quantity}" />
                                <input type="hidden" name="Items[${Model.Items.IndexOf(item)}].Price" value="${item.Price}" />
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Thông tin nhận hàng -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-3 font-bold">Thông tin giao - nhận hàng</h5>
                <!-- Phương thức nhận hàng -->
                <div class="bg-gray-100 p-4 rounded-lg mb-6">
                    <div class="flex justify-between">
                        <label class="flex items-center cursor-pointer">
                            <input type="radio" name="DeliveryMethod" value="0" id="store-pickup" class="hidden peer">
                            <span class="w-4 h-4 border border-gray-300 rounded-full inline-block mr-2 relative
                                       peer-checked:border-blue-500 peer-checked:before:content-[''] 
                                       peer-checked:before:absolute peer-checked:before:w-2 peer-checked:before:h-2 
                                       peer-checked:before:bg-blue-500 peer-checked:before:rounded-full 
                                       peer-checked:before:top-1/2 peer-checked:before:left-1/2 
                                       peer-checked:before:-translate-x-1/2 peer-checked:before:-translate-y-1/2">
                            </span>
                            <span class="text-gray-700">Nhận tại cửa hàng</span>
                        </label>
                        <label class="flex items-center cursor-pointer">
                            <input type="radio" name="DeliveryMethod" value="1" id="home-delivery" checked class="hidden peer">
                            <span class="w-4 h-4 border border-gray-300 rounded-full inline-block mr-2 relative
                                       peer-checked:border-blue-500 peer-checked:before:content-[''] 
                                       peer-checked:before:absolute peer-checked:before:w-2 peer-checked:before:h-2 
                                       peer-checked:before:bg-blue-500 peer-checked:before:rounded-full 
                                       peer-checked:before:top-1/2 peer-checked:before:left-1/2 
                                       peer-checked:before:-translate-x-1/2 peer-checked:before:-translate-y-1/2">
                            </span>
                            <span class="text-gray-700">Giao hàng tận nơi</span>
                        </label>
                    </div>
                </div>
                <!-- Địa chỉ cửa hàng (ẩn mặc định) -->
                <div id="store-address" class="bg-gray-50 p-4 rounded-lg mb-4 hidden">
                    <p class="font-medium mb-2">Địa chỉ cửa hàng:</p>
                    <p class="text-gray-600">123 Nguyễn Văn A, Phường 1, Quận 1, TP.HCM</p>
                    <p class="text-gray-600 mt-2">Thời gian làm việc: 8:00 - 21:00 (Thứ 2 - Chủ nhật)</p>
                </div>
                <!-- Form địa chỉ giao hàng -->
                <div id="delivery-address" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Tỉnh/Thành phố</label>
                            <input type="text" name="City" placeholder="Nhập tỉnh/thành phố"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Quận/Huyện</label>
                            <input type="text" name="District" placeholder="Nhập quận/huyện"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Phường/Xã</label>
                            <input type="text" name="Ward" placeholder="Nhập phường/xã"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                        <div>
                            <label class="block text-sm text-gray-600 mb-1">Số nhà, tên đường</label>
                            <input type="text" name="StreetAddress" placeholder="Nhập số nhà, tên đường"
                                   class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Ghi chú -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-2 font-bold">Ghi chú (nếu có):</h5>
                <textarea name="Note" 
                          class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all resize-none" 
                          rows="2" 
                          placeholder="Nhập ghi chú"></textarea>
            </div>

            <!-- Phương thức thanh toán -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-2 font-bold">Phương thức thanh toán</h5>
                <select id="paymentMethod" name="PaymentMethod" class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all appearance-none bg-white bg-[url('data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 20 20\'%3e%3cpath stroke=\'%236b7280\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'M6 8l4 4 4-4\'/%3e%3c/svg%3e')] bg-[length:1.5em_1.5em] bg-no-repeat bg-[right_0.5rem_center] cursor-pointer">
                    <option value="COD">Thanh toán khi nhận hàng</option>
                    <option value="Momo">Momo</option>
                    <option value="Paypal">Paypal</option>
                </select>
            </div>

            <!-- Mã giảm giá -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg mb-4">
                <h5 class="text-lg mb-2 font-bold">Mã giảm giá</h5>
                @if (User.Identity?.IsAuthenticated != true)
                {
                    <div class="bg-blue-50 border-l-4 border-blue-500 p-3 mb-3 text-sm">
                        <p class="text-blue-700">Đăng nhập để xem thêm các mã giảm giá hấp dẫn hơn!</p>
                    </div>
                }
                <input type="text" name="DiscountCode" list="discountCodes" placeholder="Nhập mã giảm giá hoặc chọn"
                    class="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all">
                <datalist id="discountCodes">
                    @{
                        var filteredDiscounts = User.Identity?.IsAuthenticated == true 
                            ? Model.AvailableDiscounts.OrderByDescending(d => d.Tilechietkhau)
                            : Model.AvailableDiscounts.Where(d => d.Tilechietkhau <= 5);
                    }
                    @foreach(var discount in filteredDiscounts)
                    {
                        <option value="@discount.IdMgg">
                            @discount.Ten - @discount.Tilechietkhau% 
                            (Từ @discount.Ngaysudung.ToString("yyyy-MM-dd") đến @discount.Ngayhethan.ToString("yyyy-MM-dd"))
                        </option>
                    }
                </datalist>
            </div>

            <!-- Tổng tiền -->
            <div class="bg-white p-4 border border-gray-200 rounded-lg">
                <div class="flex justify-between items-center">
                    <span class="text-lg">Tổng tiền ban đầu:</span>
                    <span id="originalTotal" class="text-xl text-gray-700 font-medium">
                        @Model.TotalAmount.ToString("N0")đ
                    </span>
                </div>
                @if (User.Identity?.IsAuthenticated == true && Model.VipDiscountPercentage > 0)
                {
                    <div id="vipDiscountBlock" class="flex justify-between items-center mt-2">
                        <span class="text-lg">
                            Tổng tiền sau VIP discount (<span id="vipDiscountPercentage">@Model.VipDiscountPercentage</span>%):
                        </span>
                        <span id="vipPrice" class="text-xl text-blue-500 font-medium">
                            @(Model.TotalAmount * (1 - Model.VipDiscountPercentage / 100)).ToString("N0")đ
                        </span>
                    </div>
                }
                <div id="discountCodeBlock" class="flex justify-between items-center mt-2" style="display: none;">
                    <span class="text-lg">
                        Tổng tiền sau mã giảm giá (<span id="codeDiscountPercentage">0</span>%):
                    </span>
                    <span id="finalPrice" class="text-xl text-red-500 font-medium">
                        @(User.Identity?.IsAuthenticated == true && Model.VipDiscountPercentage > 0 
                            ? (Model.TotalAmount * (1 - Model.VipDiscountPercentage / 100)).ToString("N0") 
                            : Model.TotalAmount.ToString("N0"))đ
                    </span>
                </div>
            </div>

            <!-- Modal xác nhận đặt hàng cho khách đã đăng nhập -->
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div id="loggedInOrderConfirmModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
                    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
                        <h3 class="text-lg font-bold mb-4">Xác nhận đơn hàng</h3>
                        <div class="mb-4">
                            <p class="font-medium">Thông tin giao hàng:</p>
                            <div class="mt-2 text-gray-600">
                                <p>Người nhận: <span id="confirmName"></span></p>
                                <p>Số điện thoại: <span id="confirmPhone"></span></p>
                                <p>Địa chỉ: <span id="confirmAddress"></span></p>
                            </div>
                        </div>
                        <div class="mb-4">
                            <p class="font-medium">Tổng giá trị đơn hàng:</p>
                            <p class="text-red-500 text-lg font-medium" id="confirmTotal"></p>
                        </div>
                        <div class="flex justify-end gap-4">
                            <button type="button" onclick="closeOrderConfirm()" 
                                    class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                                Hủy
                            </button>
                            <button type="button" onclick="submitOrder()" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                                Xác nhận đặt hàng
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Modal xác nhận đặt hàng (khách vãng lai) -->
            @if (!(User.Identity?.IsAuthenticated ?? false))
            {
                <div id="orderConfirmModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
                    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
                        <h3 class="text-lg font-bold mb-4">Xác nhận đặt hàng</h3>
                        <p class="mb-4">Bạn có muốn đặt hàng với tư cách khách vãng lai?</p>
                        <p class="text-sm text-gray-600 mb-4">
                            Nếu đăng nhập, bạn sẽ được tích điểm khi mua hàng thành công:
                            <br>- Bạc (500-999 điểm): Giảm 3%
                            <br>- Vàng (1000-4999 điểm): Giảm 7%
                            <br>- Kim cương (5000+ điểm): Giảm 10%
                        </p>
                        <div class="flex justify-end gap-4">
                            <button type="button" onclick="showLoginPopup()" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                                Đăng nhập
                            </button>
                            <button type="button" onclick="submitOrder()" class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                                Tiếp tục
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Button Đặt hàng -->
            <button type="button" onclick="showOrderConfirmation()" 
                    class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-500/50 transition-all font-medium mt-4">
                Đặt hàng
            </button>

            <input type="hidden" id="cartItems" name="Items" />
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            if (!@Json.Serialize(User.Identity?.IsAuthenticated == true)) {
                loadGuestCart();
                // Recalculate originalPrice from guestCart and update vipPrice accordingly.
                let guestCart = JSON.parse(localStorage.getItem('guestCart') || '[]');
                window.originalPrice = guestCart.reduce((sum, item) => {
                    return sum + (parseFloat(item.price) * parseInt(item.quantity));
                }, 0);
                // For guest users, vipDiscount is 0.
                vipPrice = window.originalPrice * (1 - vipDiscount / 100);
                document.getElementById('originalTotal').textContent = window.originalPrice.toLocaleString('vi-VN') + 'đ';
                if (document.getElementById('vipPrice')) {
                    document.getElementById('vipPrice').textContent = vipPrice.toLocaleString('vi-VN') + 'đ';
                }
            }
        });

        function loadGuestCart() {
            // Kiểm tra xem có đang trong quá trình mua ngay không
            const isBuyNow = localStorage.getItem('isBuyNow') === 'true';
            
            // Lấy giỏ hàng hiện tại
            const cart = JSON.parse(localStorage.getItem('guestCart')) || [];
            const checkoutItems = document.getElementById('checkoutItems');
            let totalAmount = 0;
            
            if (cart.length === 0) {
                window.location.href = '/';
                return;
            }
            
            let itemsHtml = '';
            cart.forEach(item => {
                const subtotal = item.price * item.quantity;
                totalAmount += subtotal;
                itemsHtml += `
                    <div class="cart-item" 
                         data-product-id="${item.id}"
                         data-product-name="${item.name}"
                         data-image-url="${item.image}"
                         data-quantity="${item.quantity}"
                         data-price="${item.price}">
                        <div class="flex items-center mb-4 last:mb-0">
                            <img src="http://localhost:5177/${item.image}" alt="${item.name}" 
                                 class="w-20 h-20 object-cover rounded">
                            <div class="ml-4">
                                <div>${item.name}</div>
                                <div>Số lượng: ${item.quantity}</div>
                                <div class="text-red-500">Giá: ${item.price.toLocaleString('vi-VN')} VNĐ</div>
                            </div>
                            <input type="hidden" name="Items[${cart.indexOf(item)}].ProductId" value="${item.id}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].ProductName" value="${item.name}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].ImageUrl" value="${item.image}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].Quantity" value="${item.quantity}" />
                            <input type="hidden" name="Items[${cart.indexOf(item)}].Price" value="${item.price}" />
                        </div>
                    </div>
                `;
            });
            checkoutItems.innerHTML = itemsHtml;
            document.getElementById('originalTotal').textContent = totalAmount.toLocaleString('vi-VN') + 'đ';
            window.originalPrice = totalAmount;
        }

        function showOrderConfirmation() {
            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
            const form = document.getElementById('checkoutForm');
            const name = form.querySelector('[name="ReceiverName"]').value;
            const phone = form.querySelector('[name="ReceiverPhone"]').value;
            const deliveryMethod = form.querySelector('input[name="DeliveryMethod"]:checked').value;
            
            let address = '';
            if (deliveryMethod === '0') {
                address = '123 Nguyễn Văn A, Phường 1, Quận 1, TP.HCM (Nhận tại cửa hàng)';
            } else {
                const street = form.querySelector('[name="StreetAddress"]').value;
                const ward = form.querySelector('[name="Ward"]').value;
                const district = form.querySelector('[name="District"]').value;
                const city = form.querySelector('[name="City"]').value;
                address = `${street}, ${ward}, ${district}, ${city}`;
            }
            
            var discountCodeInput = document.querySelector('[name="DiscountCode"]');
            var code = discountCodeInput ? discountCodeInput.value.trim() : "";
            var codeDiscount = 0;
            if (availableDiscounts && availableDiscounts.hasOwnProperty(code)) {
                codeDiscount = availableDiscounts[code];
            }
            
            var finalTotal = isAuthenticated ? vipPrice * (1 - codeDiscount / 100) : originalPrice;
            
            if (isAuthenticated) {
                // Cập nhật modal xác nhận đơn hàng cho người dùng đã đăng nhập
                updateLoggedInOrderConfirmModal();
                
                document.getElementById('confirmName').textContent = name;
                document.getElementById('confirmPhone').textContent = phone;
                document.getElementById('confirmAddress').textContent = address;
                document.getElementById('confirmTotal').textContent = finalTotal.toLocaleString('vi-VN') + 'đ';
                
                document.getElementById('loggedInOrderConfirmModal').classList.remove('hidden');
                document.getElementById('loggedInOrderConfirmModal').classList.add('flex');
            } else {
                // Cập nhật modal xác nhận đơn hàng cho khách vãng lai
                updateGuestOrderConfirmModal();
                
                document.getElementById('orderConfirmModal').classList.remove('hidden');
                document.getElementById('orderConfirmModal').classList.add('flex');
            }
        }

        function closeOrderConfirm() {
            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
            if (isAuthenticated) {
                document.getElementById('loggedInOrderConfirmModal').classList.add('hidden');
                document.getElementById('loggedInOrderConfirmModal').classList.remove('flex');
            } else {
                document.getElementById('orderConfirmModal').classList.add('hidden');
                document.getElementById('orderConfirmModal').classList.remove('flex');
            }
        }

        function submitOrder() {
            const form = document.getElementById('checkoutForm');
            if (!form) {
                console.error('Không tìm thấy form checkout');
                return;
            }
            try {
                let cartItems;
                const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
                if (!isAuthenticated) {
                    const guestCart = localStorage.getItem('guestCart');
                    if (!guestCart) {
                        alert('Giỏ hàng trống');
                        return;
                    }
                    cartItems = JSON.parse(guestCart).map(item => ({
                        ProductId: item.id,
                        ProductName: item.name,
                        Quantity: parseInt(item.quantity),
                        Price: parseFloat(item.price)
                    }));
                } else {
                    cartItems = Array.from(document.querySelectorAll('.cart-item')).map(item => ({
                        ProductId: item.dataset.productId,
                        ProductName: item.dataset.productName,
                        Quantity: parseInt(item.dataset.quantity),
                        Price: parseFloat(item.dataset.price)
                    }));
                }
                const deliveryMethod = parseInt(form.querySelector('input[name="DeliveryMethod"]:checked').value);
                const paymentMethod = document.getElementById('paymentMethod').value;
                
                // Xử lý riêng cho các phương thức thanh toán khác
                if (paymentMethod === 'Momo') {
                    processMomoPayment(cartItems);
                    return;
                }
                
                // Xử lý thanh toán PayPal
                if (paymentMethod === 'Paypal') {
                    processPaypalPayment(cartItems);
                    return;
                }
                
                // Tiếp tục xử lý đơn hàng như bình thường cho COD và phương thức khác
                const formData = {
                    ReceiverName: form.querySelector('[name="ReceiverName"]').value,
                    Email: form.querySelector('[name="Email"]').value,
                    ReceiverPhone: form.querySelector('[name="ReceiverPhone"]').value,
                    DeliveryMethod: deliveryMethod,
                    PaymentMethod: paymentMethod,
                    City: form.querySelector('[name="City"]').value,
                    District: form.querySelector('[name="District"]').value,
                    Ward: form.querySelector('[name="Ward"]').value,
                    StreetAddress: form.querySelector('[name="StreetAddress"]').value,
                    Note: form.querySelector('[name="Note"]').value,
                    DiscountCode: form.querySelector('[name="DiscountCode"]').value.trim(),
                    Items: cartItems
                };
                
                // Show loading overlay
                AppLoading.show("Đang xử lý đơn hàng...");
                
                fetch(form.action, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (!isAuthenticated) {
                            // Kiểm tra xem có đang trong quá trình mua ngay không
                            const isBuyNow = localStorage.getItem('isBuyNow') === 'true';
                            
                            // Nếu đang trong quá trình mua ngay, khôi phục giỏ hàng gốc
                            if (isBuyNow) {
                                const backupCart = localStorage.getItem('guestCartBackup');
                                if (backupCart) {
                                    localStorage.setItem('guestCart', backupCart);
                                }
                                localStorage.removeItem('isBuyNow');
                                localStorage.removeItem('guestCartBackup');
                            } else {
                                // Nếu không phải mua ngay, xóa giỏ hàng
                                localStorage.removeItem('guestCart');
                            }
                        }
                        // Show loading before redirect
                        AppLoading.showBeforeRedirect(data.redirectUrl, "Đang chuyển hướng...");
                    } else {
                        // Hide loading on error
                        AppLoading.hide();
                        alert(data.message || 'Có lỗi xảy ra khi đặt hàng');
                    }
                })
                .catch(error => {
                    // Hide loading on error
                    AppLoading.hide();
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi đặt hàng');
                });
            } catch (error) {
                console.error('Lỗi khi xử lý đơn hàng:', error);
                alert('Có lỗi xảy ra khi xử lý đơn hàng');
            }
        }
        
        // Thêm hàm xử lý thanh toán Momo
        function processMomoPayment(cartItems) {
            const form = document.getElementById('checkoutForm');
            if (!form) {
                console.error('Không tìm thấy form checkout');
                return;
            }
            
            // Kiểm tra thông tin bắt buộc
            const receiverName = form.querySelector('[name="ReceiverName"]').value;
            const email = form.querySelector('[name="Email"]').value;
            const receiverPhone = form.querySelector('[name="ReceiverPhone"]').value;
            
            if (!receiverName || !email || !receiverPhone) {
                alert('Vui lòng điền đầy đủ thông tin người nhận');
                return;
            }
            
            // Kiểm tra địa chỉ nếu chọn giao hàng tận nơi
            const deliveryMethod = parseInt(form.querySelector('input[name="DeliveryMethod"]:checked').value);
            if (deliveryMethod === 1) {
                const city = form.querySelector('[name="City"]').value;
                const district = form.querySelector('[name="District"]').value;
                const ward = form.querySelector('[name="Ward"]').value;
                const streetAddress = form.querySelector('[name="StreetAddress"]').value;
                
                if (!city || !district || !ward || !streetAddress) {
                    alert('Vui lòng điền đầy đủ thông tin địa chỉ giao hàng');
                    return;
                }
            }
            
            // Lấy thông tin đơn hàng
            const formData = {
                ReceiverName: receiverName,
                Email: email,
                ReceiverPhone: receiverPhone,
                DeliveryMethod: deliveryMethod,
                PaymentMethod: 'Momo',
                City: form.querySelector('[name="City"]').value,
                District: form.querySelector('[name="District"]').value,
                Ward: form.querySelector('[name="Ward"]').value,
                StreetAddress: form.querySelector('[name="StreetAddress"]').value,
                Note: form.querySelector('[name="Note"]').value,
                DiscountCode: form.querySelector('[name="DiscountCode"]').value.trim(),
                Items: cartItems
            };

            // Show loading overlay
            AppLoading.show("Đang xử lý thanh toán Momo...");

            // Tạo đơn hàng trước
            fetch('@Url.Action("ProcessMomoPayment", "Checkout")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Nếu tạo đơn hàng thành công, gửi request đến Momo
                    // Đảm bảo extraData không null
                    const momoData = data.momoData;
                    if (momoData && momoData.extraData === null) {
                        momoData.extraData = "";
                    }
                    
                    fetch('@Url.Action("CreatePayment", "Momo")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(momoData)
                    })
                    .then(response => response.json())
                    .then(momoData => {
                        if (momoData.payUrl) {
                            // Xóa giỏ hàng nếu là khách vãng lai
                            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
                            if (!isAuthenticated) {
                                // Kiểm tra xem có đang trong quá trình mua ngay không
                                const isBuyNow = localStorage.getItem('isBuyNow') === 'true';
                                
                                // Nếu đang trong quá trình mua ngay, khôi phục giỏ hàng gốc
                                if (isBuyNow) {
                                    const backupCart = localStorage.getItem('guestCartBackup');
                                    if (backupCart) {
                                        localStorage.setItem('guestCart', backupCart);
                                    }
                                    localStorage.removeItem('isBuyNow');
                                    localStorage.removeItem('guestCartBackup');
                                } else {
                                    // Nếu không phải mua ngay, xóa giỏ hàng
                                    localStorage.removeItem('guestCart');
                                }
                            }
                            // Chuyển hướng đến trang thanh toán Momo
                            AppLoading.showBeforeRedirect(momoData.payUrl, "Đang chuyển đến cổng thanh toán Momo...");
                        } else {
                            // Hide loading on error
                            AppLoading.hide();
                            alert(momoData.message || 'Có lỗi xảy ra khi tạo thanh toán Momo');
                        }
                    })
                    .catch(error => {
                        // Hide loading on error
                        AppLoading.hide();
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi tạo thanh toán Momo');
                    });
                } else {
                    // Hide loading on error
                    AppLoading.hide();
                    alert(data.message || 'Có lỗi xảy ra khi tạo đơn hàng');
                }
            })
            .catch(error => {
                // Hide loading on error
                AppLoading.hide();
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi tạo đơn hàng');
            });
        }

        // Thêm hàm xử lý thanh toán PayPal
        function processPaypalPayment(cartItems) {
            const form = document.getElementById('checkoutForm');
            if (!form) {
                console.error('Không tìm thấy form checkout');
                return;
            }

            // Lấy thông tin đơn hàng
            const formData = {
                ReceiverName: form.querySelector('[name="ReceiverName"]').value,
                Email: form.querySelector('[name="Email"]').value,
                ReceiverPhone: form.querySelector('[name="ReceiverPhone"]').value,
                DeliveryMethod: parseInt(form.querySelector('input[name="DeliveryMethod"]:checked').value),
                PaymentMethod: 'Paypal',
                City: form.querySelector('[name="City"]').value,
                District: form.querySelector('[name="District"]').value,
                Ward: form.querySelector('[name="Ward"]').value,
                StreetAddress: form.querySelector('[name="StreetAddress"]').value,
                Note: form.querySelector('[name="Note"]').value,
                DiscountCode: form.querySelector('[name="DiscountCode"]').value.trim(),
                Items: cartItems
            };

            // Tạo đơn hàng trước
            fetch('@Url.Action("ProcessPayPalPayment", "Checkout")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Nếu tạo đơn hàng thành công, gửi request đến PayPal
                    fetch('@Url.Action("CreatePayment", "Paypal")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data.paypalData)
                    })
                    .then(response => response.json())
                    .then(paypalData => {
                        if (paypalData.success) {
                            // Xóa giỏ hàng nếu là khách vãng lai
                            const isAuthenticated = @Json.Serialize(User.Identity?.IsAuthenticated == true);
                            if (!isAuthenticated) {
                                // Kiểm tra xem có đang trong quá trình mua ngay không
                                const isBuyNow = localStorage.getItem('isBuyNow') === 'true';
                                
                                // Nếu đang trong quá trình mua ngay, khôi phục giỏ hàng gốc
                                if (isBuyNow) {
                                    const backupCart = localStorage.getItem('guestCartBackup');
                                    if (backupCart) {
                                        localStorage.setItem('guestCart', backupCart);
                                    }
                                    localStorage.removeItem('isBuyNow');
                                    localStorage.removeItem('guestCartBackup');
                                } else {
                                    // Nếu không phải mua ngay, xóa giỏ hàng
                                    localStorage.removeItem('guestCart');
                                }
                            }
                            // Chuyển hướng đến trang thanh toán PayPal
                            window.location.href = paypalData.payUrl;
                        } else {
                            alert(paypalData.message || 'Có lỗi xảy ra khi tạo thanh toán PayPal');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi tạo thanh toán PayPal');
                    });
                } else {
                    alert(data.message || 'Có lỗi xảy ra khi tạo đơn hàng');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi tạo đơn hàng');
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            const checkoutForm = document.getElementById('checkoutForm');
            if (checkoutForm) {
                checkoutForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    submitOrder();
                });
            }
            const guestCart = localStorage.getItem('guestCart');
            if (guestCart) {
                try {
                    const cartItems = JSON.parse(guestCart);
                    console.log('Current cart:', cartItems);
                    displayCartItems(cartItems);
                } catch (error) {
                    console.error('Lỗi khi load giỏ hàng:', error);
                }
            }
        });

        function displayCartItems(cartItems) {
            const cartContainer = document.querySelector('.cart-items-container');
            if (!cartContainer) return;
            let total = 0;
            cartContainer.innerHTML = cartItems.map(item => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                return `
                    <div class="cart-item" data-product-id="${item.productId}">
                        <div class="flex justify-between items-center p-4 border-b">
                            <div class="flex-1">
                                <h3 class="font-semibold">${item.productName}</h3>
                                <p>Số lượng: ${item.quantity}</p>
                                <p>Giá: ${new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND'
                                }).format(item.price)}</p>
                            </div>
                            <div class="text-right">
                                <p class="font-semibold">${new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND'
                                }).format(itemTotal)}</p>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            const totalElement = document.getElementById('cartTotal');
            if (totalElement) {
                totalElement.textContent = new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                }).format(total);
            }
        }

        function showLoginPopup() {
            document.getElementById('orderConfirmModal').classList.add('hidden');
            document.getElementById('orderConfirmModal').classList.remove('flex');
            const loginPopup = document.getElementById('loginPopup');
            if (loginPopup) {
                loginPopup.classList.remove('hidden');
                loginPopup.classList.add('flex');
            }
        }

        // Build mapping of available discount codes
        var availableDiscounts = {};
        @{
            var filteredDiscounts = User.Identity?.IsAuthenticated == true 
                ? Model.AvailableDiscounts.OrderByDescending(d => d.Tilechietkhau)
                : Model.AvailableDiscounts.Where(d => d.Tilechietkhau <= 5);
        }
        @foreach(var discount in filteredDiscounts)
        {
            @:availableDiscounts["@discount.IdMgg"] = @discount.Tilechietkhau;
        }

        // Get original and VIP price from the model.
        var originalPrice = @Model.TotalAmount;
        var vipDiscount = @((User.Identity?.IsAuthenticated == true) ? Model.VipDiscountPercentage : 0);
        var vipPrice = originalPrice * (1 - vipDiscount / 100);
        // For guest users, originalPrice has been re-calculated in loadGuestCart

        var vipPriceElem = document.getElementById('vipPrice');
        if (vipPriceElem) {
            vipPriceElem.textContent = vipPrice.toLocaleString('vi-VN') + 'đ';
        }

        function updateFinalPrice() {
            var codeInput = document.querySelector('[name="DiscountCode"]');
            var code = codeInput.value.trim();
            var codeDiscount = 0;
            if (availableDiscounts.hasOwnProperty(code)) {
                codeDiscount = availableDiscounts[code];
            }
            document.getElementById('codeDiscountPercentage').textContent = codeDiscount;
            var afterDiscountCodePrice = vipPrice * (1 - codeDiscount / 100);
            if (codeDiscount > 0) {
                document.getElementById('discountCodeBlock').style.display = "flex";
            } else {
                document.getElementById('discountCodeBlock').style.display = "none";
            }
            document.getElementById('finalPrice').textContent = afterDiscountCodePrice.toLocaleString('vi-VN') + 'đ';
        }

        var discountCodeInput = document.querySelector('[name="DiscountCode"]');
        if (discountCodeInput) {
            discountCodeInput.addEventListener('change', updateFinalPrice);
            discountCodeInput.addEventListener('blur', updateFinalPrice);
        }

        // Thêm biến toàn cục để theo dõi trạng thái
        let isValidCustomerInfo = true;
        let existingCustomerInfo = null;
        let isUserLoggedIn = @Json.Serialize(User.Identity?.IsAuthenticated == true);
        let hasRegisteredAccount = false;

        // Sửa lại hàm kiểm tra thông tin khách hàng
        async function checkExistingCustomer() {
            // Nếu người dùng đã đăng nhập, không cần kiểm tra
            if (isUserLoggedIn) {
                isValidCustomerInfo = true;
                return;
            }
            
            const email = document.querySelector('[name="Email"]').value;
            const phone = document.querySelector('[name="ReceiverPhone"]').value;
            
            if (!email && !phone) return;

            try {
                const response = await fetch('@Url.Action("CheckExistingCustomer", "Checkout")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, phone })
                });

                const data = await response.json();
                
                if (data.exists) {
                    const name = document.querySelector('[name="ReceiverName"]').value;
                    
                    // Kiểm tra xem khách hàng này đã có tài khoản chưa
                    if (data.hasAccount && data.customer) {
                        hasRegisteredAccount = true;
                        existingCustomerInfo = data.customer;
                        showRegisteredAccountModal(data.customer);
                        return;
                    }
                    
                    if (data.customer && (
                        email !== data.customer.email || 
                        phone !== data.customer.phone || 
                        name !== data.customer.name)) {
                        
                        isValidCustomerInfo = false;
                        existingCustomerInfo = data.customer;
                        
                        showCustomerInfoModal(data.customer);
                    } else {
                        isValidCustomerInfo = true;
                    }
                } else {
                    isValidCustomerInfo = true;
                    hasRegisteredAccount = false;
                }
            } catch (error) {
                console.error('Error checking existing customer:', error);
            }
        }

        // Thêm hàm hiển thị modal thông báo khách hàng đã có tài khoản
        function showRegisteredAccountModal(customer) {
            // Kiểm tra customer có null không
            if (!customer) {
                console.error('Customer data is null');
                return;
            }
            
            // Tạo modal nếu chưa tồn tại
            let modal = document.getElementById('registeredAccountModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'registeredAccountModal';
                modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden';
                modal.innerHTML = `
                    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4 shadow-xl relative">
                        <button type="button" class="absolute top-3 right-3 text-gray-400 hover:text-gray-600" onclick="closeRegisteredAccountModal()">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-bold text-gray-800">Tài khoản đã tồn tại</h3>
                        </div>
                        <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-yellow-700">
                                        Thông tin này đã được đăng ký tài khoản trong hệ thống.
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <div class="grid grid-cols-3 gap-4 mb-2">
                                <div class="text-gray-600">Họ tên:</div>
                                <div class="col-span-2 font-medium text-gray-800" id="registeredName"></div>
                            </div>
                            <div class="grid grid-cols-3 gap-4 mb-2">
                                <div class="text-gray-600">Email:</div>
                                <div class="col-span-2 font-medium text-gray-800" id="registeredEmail"></div>
                            </div>
                            <div class="grid grid-cols-3 gap-4">
                                <div class="text-gray-600">Số điện thoại:</div>
                                <div class="col-span-2 font-medium text-gray-800" id="registeredPhone"></div>
                            </div>
                        </div>
                        <p class="text-sm text-gray-600 mb-4">
                            Bạn cần đăng nhập để tiếp tục đặt hàng. Đăng nhập sẽ giúp bạn tích điểm và nhận được các ưu đãi.
                        </p>
                        <div class="flex justify-end gap-4">
                            <button type="button" onclick="showLoginPopup()" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                                Đăng nhập ngay
                            </button>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                
                // Thêm sự kiện click bên ngoài để đóng modal
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        closeRegisteredAccountModal();
                    }
                });
            }
            
            // Cập nhật thông tin trong modal
            document.getElementById('registeredName').textContent = customer.name || 'Không có thông tin';
            document.getElementById('registeredEmail').textContent = customer.email || 'Không có thông tin';
            document.getElementById('registeredPhone').textContent = customer.phone || 'Không có thông tin';
            
            // Hiển thị modal
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        // Hàm đóng modal thông báo tài khoản đã tồn tại
        function closeRegisteredAccountModal() {
            const modal = document.getElementById('registeredAccountModal');
            if (modal) {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
            }
        }

        // Sửa lại hàm submitOrder để thêm kiểm tra
        const originalSubmitOrder = submitOrder;
        submitOrder = function() {
            // Nếu người dùng đã đăng nhập, không cần kiểm tra
            if (isUserLoggedIn) {
                originalSubmitOrder();
                return;
            }
            
            // Nếu khách hàng đã có tài khoản, yêu cầu đăng nhập
            if (hasRegisteredAccount && existingCustomerInfo) {
                showRegisteredAccountModal(existingCustomerInfo);
                return;
            }
            
            // Nếu thông tin khách hàng không hợp lệ
            if (!isValidCustomerInfo && existingCustomerInfo) {
                showCustomerInfoModal(existingCustomerInfo);
                return;
            }
            
            // Gọi hàm gốc
            originalSubmitOrder();
        };

        // Thêm event listeners để kiểm tra khi người dùng thay đổi thông tin
        document.addEventListener('DOMContentLoaded', function() {
            const existingDOMContentLoaded = document.onDOMContentLoaded;
            
            // Nếu người dùng đã đăng nhập, vô hiệu hóa các trường thông tin cá nhân
            if (isUserLoggedIn) {
                const personalFields = ['ReceiverName', 'Email', 'ReceiverPhone'];
                personalFields.forEach(field => {
                    const element = document.querySelector(`[name="${field}"]`);
                    if (element) {
                        element.readOnly = true;
                        element.classList.add('bg-gray-100');
                        
                        // Thêm tooltip khi click vào trường bị vô hiệu hóa
                        element.addEventListener('click', function(e) {
                            showUserInfoTooltip(e.target);
                        });
                    }
                });
            } else {
                // Chỉ thêm event listeners nếu người dùng chưa đăng nhập
                document.querySelector('[name="Email"]')?.addEventListener('change', () => { 
                    isValidCustomerInfo = false; 
                    hasRegisteredAccount = false;
                    checkExistingCustomer(); 
                });
                
                document.querySelector('[name="ReceiverPhone"]')?.addEventListener('change', () => { 
                    isValidCustomerInfo = false; 
                    hasRegisteredAccount = false;
                    checkExistingCustomer(); 
                });
                
                document.querySelector('[name="ReceiverName"]')?.addEventListener('change', () => { 
                    isValidCustomerInfo = false; 
                    hasRegisteredAccount = false;
                    checkExistingCustomer(); 
                });
                
                // Kiểm tra ban đầu chỉ khi chưa đăng nhập
                checkExistingCustomer();
            }
            
            // Gọi hàm gốc nếu có
            if (existingDOMContentLoaded) {
                existingDOMContentLoaded();
            }
        });
        
        // Hàm hiển thị tooltip khi người dùng đã đăng nhập nhấp vào trường bị vô hiệu hóa
        function showUserInfoTooltip(element) {
            // Xóa tooltip cũ nếu có
            const existingTooltip = document.getElementById('userInfoTooltip');
            if (existingTooltip) {
                existingTooltip.remove();
            }
            
            // Tạo tooltip mới
            const tooltip = document.createElement('div');
            tooltip.id = 'userInfoTooltip';
            tooltip.className = 'absolute bg-gray-800 text-white text-sm rounded py-2 px-3 z-50 shadow-lg';
            tooltip.style.maxWidth = '250px';
            tooltip.innerHTML = `
                <div class="relative">
                    <div class="absolute -top-2 left-3 w-3 h-3 bg-gray-800 transform rotate-45"></div>
                    <p>Nếu bạn muốn thay đổi thông tin vui lòng truy cập trang quản lý thông tin</p>
                </div>
            `;
            
            // Tính toán vị trí tooltip
            const rect = element.getBoundingClientRect();
            tooltip.style.top = `${rect.bottom + window.scrollY + 10}px`;
            tooltip.style.left = `${rect.left + window.scrollX}px`;
            
            // Thêm tooltip vào body
            document.body.appendChild(tooltip);
            
            // Tự động xóa tooltip sau 3 giây
            setTimeout(() => {
                if (tooltip && tooltip.parentNode) {
                    tooltip.remove();
                }
            }, 3000);
        }

        // Hàm cập nhật modal xác nhận đơn hàng cho người dùng đã đăng nhập
        function updateLoggedInOrderConfirmModal() {
            let modal = document.getElementById('loggedInOrderConfirmModal');
            if (modal) {
                // Kiểm tra xem đã có nút đóng chưa
                if (!modal.querySelector('.close-button')) {
                    const modalContent = modal.querySelector('div');
                    
                    // Thêm nút đóng
                    const closeButton = document.createElement('button');
                    closeButton.className = 'close-button absolute top-3 right-3 text-gray-400 hover:text-gray-600';
                    closeButton.onclick = function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        closeOrderConfirm();
                    };
                    closeButton.innerHTML = `
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    `;
                    
                    // Thêm class relative cho modal content để định vị nút đóng
                    modalContent.classList.add('relative');
                    
                    // Thêm nút đóng vào modal
                    modalContent.insertBefore(closeButton, modalContent.firstChild);
                    
                    // Thêm sự kiện click bên ngoài để đóng modal
                    modal.addEventListener('click', function(e) {
                        if (e.target === modal) {
                            e.preventDefault();
                            e.stopPropagation();
                            closeOrderConfirm();
                        }
                    });
                }
            }
        }

        // Hàm cập nhật modal xác nhận đơn hàng cho khách vãng lai
        function updateGuestOrderConfirmModal() {
            let modal = document.getElementById('orderConfirmModal');
            if (modal) {
                // Kiểm tra xem đã có nút đóng chưa
                if (!modal.querySelector('.close-button')) {
                    const modalContent = modal.querySelector('div');
                    
                    // Thêm nút đóng
                    const closeButton = document.createElement('button');
                    closeButton.className = 'close-button absolute top-3 right-3 text-gray-400 hover:text-gray-600';
                    closeButton.onclick = function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        closeOrderConfirm();
                    };
                    closeButton.innerHTML = `
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    `;
                    
                    // Thêm class relative cho modal content để định vị nút đóng
                    modalContent.classList.add('relative');
                    
                    // Thêm nút đóng vào modal
                    modalContent.insertBefore(closeButton, modalContent.firstChild);
                    
                    // Thêm sự kiện click bên ngoài để đóng modal
                    modal.addEventListener('click', function(e) {
                        if (e.target === modal) {
                            e.preventDefault();
                            e.stopPropagation();
                            closeOrderConfirm();
                        }
                    });
                }
            }
        }

        // Thêm hàm hiển thị modal thông tin khách hàng đã tồn tại
        function showCustomerInfoModal(customer) {
            // Tạo modal nếu chưa tồn tại
            let modal = document.getElementById('customerInfoModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'customerInfoModal';
                modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden';
                modal.innerHTML = `
                    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4 shadow-xl relative">
                        <button type="button" class="absolute top-3 right-3 text-gray-400 hover:text-gray-600" onclick="closeCustomerInfoModal()">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-bold text-gray-800">Thông tin khách hàng</h3>
                        </div>
                        <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-blue-700">
                                        Chúng tôi đã tìm thấy thông tin của bạn trong hệ thống.
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <div class="grid grid-cols-3 gap-4 mb-2">
                                <div class="text-gray-600">Họ tên:</div>
                                <div class="col-span-2 font-medium text-gray-800" id="existingName"></div>
                            </div>
                            <div class="grid grid-cols-3 gap-4 mb-2">
                                <div class="text-gray-600">Email:</div>
                                <div class="col-span-2 font-medium text-gray-800" id="existingEmail"></div>
                            </div>
                            <div class="grid grid-cols-3 gap-4">
                                <div class="text-gray-600">Số điện thoại:</div>
                                <div class="col-span-2 font-medium text-gray-800" id="existingPhone"></div>
                            </div>
                        </div>
                        <p class="text-sm text-gray-600 mb-4">
                            Bạn phải sử dụng thông tin này để đặt hàng.
                        </p>
                        <div class="flex justify-end gap-4">
                            <button type="button" onclick="rejectExistingCustomerInfo()" 
                                    class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors">
                                Không
                            </button>
                            <button type="button" onclick="useExistingCustomerInfo()" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                                Sử dụng thông tin này
                            </button>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                
                // Thêm sự kiện click bên ngoài để đóng modal
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        closeCustomerInfoModal();
                    }
                });
            }
            
            // Cập nhật thông tin trong modal
            document.getElementById('existingName').textContent = customer.name || 'Không có thông tin';
            document.getElementById('existingEmail').textContent = customer.email || 'Không có thông tin';
            document.getElementById('existingPhone').textContent = customer.phone || 'Không có thông tin';
            
            // Hiển thị modal
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        // Hàm đóng modal thông tin khách hàng
        function closeCustomerInfoModal() {
            const modal = document.getElementById('customerInfoModal');
            if (modal) {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
            }
            isValidCustomerInfo = true; // Cho phép tiếp tục với thông tin mới
        }

        // Hàm sử dụng thông tin khách hàng đã tồn tại
        function useExistingCustomerInfo() {
            if (existingCustomerInfo) {
                document.querySelector('[name="ReceiverName"]').value = existingCustomerInfo.name;
                document.querySelector('[name="Email"]').value = existingCustomerInfo.email;
                document.querySelector('[name="ReceiverPhone"]').value = existingCustomerInfo.phone;
                
                // Nếu có địa chỉ và đang chọn giao hàng tận nơi
                if (existingCustomerInfo.address && document.getElementById('home-delivery').checked) {
                    const addressParts = existingCustomerInfo.address.split(',').map(part => part.trim());
                    if (addressParts.length >= 4) {
                        document.querySelector('[name="StreetAddress"]').value = addressParts[0];
                        document.querySelector('[name="Ward"]').value = addressParts[1];
                        document.querySelector('[name="District"]').value = addressParts[2];
                        document.querySelector('[name="City"]').value = addressParts[3];
                    }
                }
                
                isValidCustomerInfo = true;
                closeCustomerInfoModal();
            }
        }

        // Thêm hàm mới để xử lý khi người dùng chọn "Không"
        function rejectExistingCustomerInfo() {
            // Xóa email để tránh trùng lặp với khách hàng hiện có
            document.querySelector('[name="Email"]').value = '';
            
            isValidCustomerInfo = true;
            closeCustomerInfoModal();
        }
    </script>
}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const storePickup = document.getElementById('store-pickup');
        const homeDelivery = document.getElementById('home-delivery');
        const storeAddress = document.getElementById('store-address');
        const deliveryAddress = document.getElementById('delivery-address');

        function toggleDeliveryMethod() {
            if (storePickup.checked) {
                storeAddress.classList.remove('hidden');
                deliveryAddress.classList.add('hidden');
            } else {
                storeAddress.classList.add('hidden');
                deliveryAddress.classList.remove('hidden');
            }
        }

        storePickup.addEventListener('change', toggleDeliveryMethod);
        homeDelivery.addEventListener('change', toggleDeliveryMethod);
    });
</script>