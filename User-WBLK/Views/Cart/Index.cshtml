@model Giohang
@{
    ViewData["Title"] = "Giỏ hàng";
    var isAuthenticated = User.Identity?.IsAuthenticated == true;
}

<div class="container mx-auto px-4">
    <div class="flex items-center gap-2 text-sm text-gray-600 mb-4">
        <a href="/" class="hover:text-blue-600">Trang chủ</a>
        <span>/</span>
        <span>Thông tin giỏ hàng</span>
    </div>

    <h1 class="text-2xl font-bold mb-6">Giỏ hàng của bạn</h1>

    <div id="cartContent">
        @if (isAuthenticated)
        {
            if (Model?.Chitietgiohangs != null && Model.Chitietgiohangs.Any())
            {
                <div class="bg-white rounded-lg shadow-sm p-6">
                    @foreach (var item in Model.Chitietgiohangs)
                    {
                        // Compute product detail URL based on product type and id.
                        var productUrl = "#";
                        if (item.IdSpNavigation != null)
                        {
                            var type = item.IdSpNavigation.Loaisanpham.ToLower();
                            var id = item.IdSpNavigation.IdSp;
                            switch (type)
                            {
                                case "pc":
                                    productUrl = $"/pc/{id}";
                                    break;
                                case "laptop":
                                    productUrl = $"/laptop/{id}";
                                    break;
                                case "components":
                                    productUrl = $"/components/{id}";
                                    break;
                                case "storage":
                                    productUrl = $"/storage/{id}";
                                    break;
                                case "monitor":
                                    productUrl = $"/monitor/{id}";
                                    break;
                                case "speaker":
                                case "microphone":
                                case "webcam":
                                case "audio":
                                    productUrl = $"/audio/{item.IdSpNavigation.Loaisanpham}/{id}";
                                    break;
                                case "keyboard":
                                case "mouse":
                                case "headphone":
                                case "peripherals":
                                    productUrl = $"/peripherals/{item.IdSpNavigation.Loaisanpham}/{id}";
                                    break;
                                case "network":
                                    productUrl = $"/network/{id}";
                                    break;
                                default:
                                    productUrl = "#";
                                    break;
                            }
                        }
                        <div class="flex items-center gap-4 py-4 border-b last:border-b-0" data-product-id="@item.IdSp">
                            <!-- Product Image wrapped in a link -->
                            <a href="@productUrl" class="flex-shrink-0">
                                <img src="http://0.0.0.0:5177/@item.IdSpNavigation.Hinhanh" 
                                     alt="@item.IdSpNavigation.Tensanpham"
                                     class="w-24 h-24 object-contain rounded-lg border p-2">
                            </a>

                            <!-- Product Title / Price wrapped in a link -->
                            <div class="flex-grow">
                                <a href="@productUrl" class="hover:text-blue-600">
                                    <h3 class="font-medium">@item.IdSpNavigation.Tensanpham</h3>
                                </a>
                                <div class="text-red-600 font-medium mt-1">
                                    Giá: <span class="unit-price" data-price="@item.IdSpNavigation.Gia">
                                        @item.IdSpNavigation.Gia.ToString("N0")
                                    </span>đ
                                    <div class="text-sm text-gray-500">
                                        Tổng: 
                                        <span class="row-total">
                                            @( (item.IdSpNavigation.Gia * item.Soluongsanpham).ToString("N0") )
                                        </span>đ
                                    </div>
                                </div>
                            </div>

                            <!-- Quantity Controls -->
                            <div class="flex items-center gap-2">
                                <div class="flex items-center border rounded">
                                    <button type="button" class="decrease px-3 py-1 border-r hover:bg-gray-100">-</button>
                                    <input type="number" 
                                           class="quantity w-16 text-center [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" 
                                           value="@item.Soluongsanpham" min="1" max="5" />
                                    <button type="button" class="increase px-3 py-1 border-l hover:bg-gray-100">+</button>
                                </div>
                                <button type="button" class="remove ml-4 text-blue-600 hover:text-blue-800">Xóa</button>
                            </div>
                        </div>
                    }
                    <!-- Footer: Continue shopping & Overall Cart Total -->
                    <div class="mt-6 flex justify-between items-center">
                        <a href="/" class="text-blue-600 hover:text-blue-800 flex items-center gap-2">
                            <i class="fas fa-arrow-left"></i>
                            Tiếp tục mua sắm
                        </a>
                        <div class="text-right">
                            <div class="text-lg">
                                Tạm tính: 
                                <span id="cartTotal" class="text-red-600 font-bold">
                                    @Model.Chitietgiohangs.Sum(c => c.IdSpNavigation.Gia * c.Soluongsanpham).ToString("N0")
                                </span>đ
                            </div>
                            <a href="@Url.Action("Index", "Checkout")" onclick="AppLoading.showBeforeRedirect('@Url.Action("Index", "Checkout")', 'Đang chuyển đến trang thanh toán...'); return false;" class="mt-4 bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 inline-block">
                                Tiến hành đặt hàng
                            </a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div id="emptyCartMessage" class="text-center py-12">
                    <i class="fas fa-shopping-cart text-gray-400 text-6xl mb-4"></i>
                    <h3 class="text-xl font-medium mb-2">Giỏ hàng của bạn đang trống</h3>
                    <p class="text-gray-600 mb-6">Hãy thêm sản phẩm vào giỏ hàng của bạn</p>
                    <a href="/" class="inline-flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-shopping-bag"></i> Mua sắm ngay
                    </a>
                </div>
            }
        }
        else
        {
            <div id="guestCartContent">
                <!-- Guest cart content will be loaded via JavaScript -->
            </div>
        }
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Helper: Retrieve anti-forgery token
        function getAntiForgeryToken() {
            var tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }

        // Helper: Show an inline toast message using SweetAlert2
        function showInlineMessage(message) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'warning',
                title: message,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }

        // Logged-in user event bindings
        document.addEventListener("DOMContentLoaded", function() {
            var isAuthenticated = @isAuthenticated.ToString().ToLower();
            if (isAuthenticated) {
                document.querySelectorAll("[data-product-id]").forEach(function(itemRow) {
                    var productId = itemRow.getAttribute("data-product-id");
                    var decreaseBtn = itemRow.querySelector(".decrease");
                    var increaseBtn = itemRow.querySelector(".increase");
                    var quantityInput = itemRow.querySelector(".quantity");
                    var removeBtn = itemRow.querySelector(".remove");

                    // Decrease quantity
                    decreaseBtn.addEventListener("click", function() {
                        var currentQty = parseInt(quantityInput.value);
                        if (currentQty > 1) {
                            quantityInput.value = currentQty - 1;
                            updateQuantity(productId, quantityInput.value, quantityInput);
                        } else if (currentQty === 1) {
                            // Nếu số lượng = 1 và nhấn giảm, xóa sản phẩm
                            removeItem(productId, itemRow);
                        }
                    });

                    // Increase quantity with check
                    increaseBtn.addEventListener("click", function() {
                        var currentQty = parseInt(quantityInput.value);
                        var newQty = currentQty + 1;
                        if (newQty > 5) {
                            showInlineMessage("Sản phẩm chỉ cho phép mua tối đa 5.");
                            newQty = 5;
                        }
                        quantityInput.value = newQty;
                        updateQuantity(productId, quantityInput.value, quantityInput);
                    });

                    // Manual change with minimum and maximum check
                    quantityInput.addEventListener("change", function() {
                        var newQty = parseInt(quantityInput.value);
                        if (isNaN(newQty)) {
                            showInlineMessage("Vui lòng nhập số hợp lệ.");
                            newQty = 1;
                        }
                        if (newQty < 1) {
                            showInlineMessage("Số lượng không thể nhỏ hơn 1.");
                            newQty = 1;
                        }
                        if (newQty > 5) {
                            showInlineMessage("Sản phẩm chỉ cho phép mua tối đa 5.");
                            newQty = 5;
                        }
                        quantityInput.value = newQty;
                        updateQuantity(productId, newQty, quantityInput);
                    });
                    
                    quantityInput.addEventListener("blur", function() {
                    var newQty = parseInt(quantityInput.value);
                    if (isNaN(newQty) || newQty < 1) {
                        showInlineMessage("Số lượng không thể nhỏ hơn 1.");
                        newQty = 1;
                    }
                    if (newQty > 5) {
                        showInlineMessage("Sản phẩm chỉ cho phép mua tối đa 5.");
                        newQty = 5;
                    }
                    quantityInput.value = newQty;
                    updateQuantity(productId, newQty, quantityInput);
                });

                    // Remove item
                    removeBtn.addEventListener("click", function() {
                        removeItem(productId, itemRow);
                    });
                });
            } else {
                // For guest users: load the guest cart
                loadGuestCart();
            }
        });

        // Function: Update quantity for logged-in users
        function updateQuantity(productId, quantity, inputEl) {
            fetch('/Cart/UpdateQuantityAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: parseInt(quantity)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById("cartTotal").innerText = data.cartTotal;
                    const itemRow = document.querySelector(`[data-product-id="${productId}"]`);
                    if (itemRow) {
                        const unitPriceEl = itemRow.querySelector(".unit-price");
                        const rowTotalEl = itemRow.querySelector(".row-total");
                        const unitPrice = parseFloat(unitPriceEl.getAttribute("data-price"));
                        const qty = parseInt(quantity);
                        const newRowTotal = unitPrice * qty;
                        rowTotalEl.textContent = new Intl.NumberFormat('vi-VN').format(newRowTotal);
                    }
                } else {
                    showInlineMessage(data.message);
                    if (inputEl) {
                        inputEl.value = 5;
                        const itemRow = document.querySelector(`[data-product-id="${productId}"]`);
                        if (itemRow) {
                            const unitPriceEl = itemRow.querySelector(".unit-price");
                            const rowTotalEl = itemRow.querySelector(".row-total");
                            const unitPrice = parseFloat(unitPriceEl.getAttribute("data-price"));
                            rowTotalEl.textContent = new Intl.NumberFormat('vi-VN').format(unitPrice * 5);
                        }
                    }
                }
                // If no items remain, show empty cart message.
                if (document.querySelectorAll("[data-product-id]").length === 0) {
                    document.getElementById("cartContent").innerHTML = `
                        <div id="emptyCartMessage" class="text-center py-12">
                            <i class="fas fa-shopping-cart text-gray-400 text-6xl mb-4"></i>
                            <h3 class="text-xl font-medium mb-2">Giỏ hàng của bạn đang trống</h3>
                            <p class="text-gray-600 mb-6">Hãy thêm sản phẩm vào giỏ hàng của bạn</p>
                            <a href="/" class="inline-flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
                                <i class="fas fa-shopping-bag"></i> Mua sắm ngay
                            </a>
                        </div>
                    `;
                }
            })
            .catch(error => console.error("Error updating quantity:", error));
        }

        // Function: Remove item for logged-in users
        function removeItem(productId, itemRow) {
            fetch('/Cart/RemoveItemAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ productId: productId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    itemRow.remove();
                    document.getElementById("cartTotal").innerText = data.cartTotal;
                    if (document.querySelectorAll("[data-product-id]").length === 0) {
                        document.getElementById("cartContent").innerHTML = `
                            <div id="emptyCartMessage" class="text-center py-12">
                                <i class="fas fa-shopping-cart text-gray-400 text-6xl mb-4"></i>
                                <h3 class="text-xl font-medium mb-2">Giỏ hàng của bạn đang trống</h3>
                                <p class="text-gray-600 mb-6">Hãy thêm sản phẩm vào giỏ hàng của bạn</p>
                                <a href="/" class="inline-flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
                                    <i class="fas fa-shopping-bag"></i> Mua sắm ngay
                                </a>
                            </div>
                        `;
                    }
                } else {
                    showInlineMessage(data.message);
                }
            })
            .catch(error => console.error("Error removing item:", error));
        }

        // ------------------------------
        // Guest Cart Functions
        // ------------------------------
        function loadGuestCart() {
            const guestCartContent = document.getElementById('guestCartContent');
            const cart = JSON.parse(localStorage.getItem('guestCart')) || [];
            if (cart.length === 0) {
                guestCartContent.innerHTML = `
                    <div class="text-center py-12">
                        <i class="fas fa-shopping-cart text-gray-400 text-6xl mb-4"></i>
                        <h3 class="text-xl font-medium mb-2">Giỏ hàng của bạn đang trống</h3>
                        <p class="text-gray-600 mb-6">Hãy thêm sản phẩm vào giỏ hàng của bạn</p>
                        <a href="/" class="inline-flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-shopping-bag"></i> Mua sắm ngay
                        </a>
                    </div>
                `;
                return;
            }

            let cartHTML = `<div class="bg-white rounded-lg shadow-sm p-6">`;
            let total = 0;
            cart.forEach(item => {
                total += item.price * item.quantity;
                // Compute product URL similarly to product card style.
                var productUrl = "#";
                if(item.type) {
                    switch(item.type.toLowerCase()) {
                        case "pc":
                            productUrl = `/pc/${item.id}`;
                            break;
                        case "laptop":
                            productUrl = `/laptop/${item.id}`;
                            break;
                        case "components":
                            productUrl = `/components/${item.id}`;
                            break;
                        case "storage":
                            productUrl = `/storage/${item.id}`;
                            break;
                        case "monitor":
                            productUrl = `/monitor/${item.id}`;
                            break;
                        case "speaker":
                        case "microphone":
                        case "webcam":
                        case "audio":
                            productUrl = `/audio/${item.type}/${item.id}`;
                            break;
                        case "keyboard":
                        case "mouse":
                        case "headphone":
                        case "peripherals":
                            productUrl = `/peripherals/${item.type}/${item.id}`;
                            break;
                        case "network":
                            productUrl = `/network/${item.id}`;
                            break;
                        default:
                            productUrl = "#";
                            break;
                    }
                }
                cartHTML += `
                    <div class="flex items-center gap-4 py-4 border-b last:border-b-0">
                        <div class="flex-shrink-0">
                            <a href="${productUrl}">
                                <img src="http://0.0.0.0:5177/${item.image}" 
                                     alt="${item.name}"
                                     class="w-24 h-24 object-contain rounded-lg border p-2">
                            </a>
                        </div>
                        <div class="flex-grow">
                            <a href="${productUrl}" class="hover:text-blue-600">
                                <h3 class="font-medium">${item.name}</h3>
                            </a>
                            <div class="text-red-600 font-medium mt-1">
                                Giá: ${item.price.toLocaleString('vi-VN')}đ
                                <div class="text-sm text-gray-500">
                                    Tổng: <span class="row-total">${(item.price * item.quantity).toLocaleString('vi-VN')}</span>đ
                                </div>
                            </div>
                        </div>
                        <div class="flex items-center gap-2">
                            <div class="flex items-center border rounded">
                                <button onclick="updateGuestCartQuantity('${item.id}', ${item.quantity - 1})" 
                                        class="px-3 py-1 border-r hover:bg-gray-100">-</button>
                                <input type="number" value="${item.quantity}" 
                                       min="1" class="w-16 text-center [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                                       onchange="updateGuestCartQuantity('${item.id}', this.value)" />
                                <button onclick="updateGuestCartQuantity('${item.id}', ${item.quantity + 1})" 
                                        class="px-3 py-1 border-l hover:bg-gray-100">+</button>
                            </div>
                            <button onclick="removeGuestCartItem('${item.id}')" 
                                    class="ml-4 text-blue-600 hover:text-blue-800">
                                Xóa
                            </button>
                        </div>
                    </div>
                `;
            });
            cartHTML += `
                <div class="mt-6 flex justify-between items-center">
                    <a href="/" class="text-blue-600 hover:text-blue-800 flex items-center gap-2">
                        <i class="fas fa-arrow-left"></i>
                        Tiếp tục mua sắm
                    </a>
                    <div class="text-right">
                        <div class="text-lg">
                            Tạm tính: <span class="text-red-600 font-bold">${total.toLocaleString('vi-VN')}đ</span>
                        </div>
                        <a href="/Checkout" onclick="AppLoading.showBeforeRedirect('/Checkout', 'Đang chuyển đến trang thanh toán...'); return false;" class="inline-block mt-4 bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700">
                            Tiến hành đặt hàng
                        </a>
                    </div>
                </div>
            </div>`;
            guestCartContent.innerHTML = cartHTML;
        }

        // Update guest cart quantity with inline toast message and minimum enforcement.
        function updateGuestCartQuantity(productId, newQuantity) {
            const maxAllowed = 5;
            let cart = JSON.parse(localStorage.getItem('guestCart')) || [];
            const index = cart.findIndex(item => item.id === productId);
            if (index !== -1) {
                newQuantity = parseInt(newQuantity);
                if (newQuantity < 1) {
                    // Nếu số lượng < 1, xóa sản phẩm khỏi giỏ hàng
                    removeGuestCartItem(productId);
                    return;
                }
                const availableStock = cart[index].stock ? parseInt(cart[index].stock) : maxAllowed;
                const allowed = Math.min(maxAllowed, availableStock);
                if (newQuantity > allowed) {
                    showInlineMessage(`Sản phẩm chỉ cho phép mua tối đa ${allowed}.`);
                    newQuantity = allowed;
                }
                cart[index].quantity = newQuantity;
                localStorage.setItem('guestCart', JSON.stringify(cart));
                loadGuestCart();
            }
        }

        function removeGuestCartItem(productId) {
            let cart = JSON.parse(localStorage.getItem('guestCart')) || [];
            cart = cart.filter(item => item.id !== productId);
            localStorage.setItem('guestCart', JSON.stringify(cart));
            loadGuestCart();
        }

        // Load guest cart on page load if user is not authenticated.
        if (!@Json.Serialize(User.Identity?.IsAuthenticated == true)) {
            loadGuestCart();
        }
    </script>
}

@section Styles {
    <style>
        .table img {
            border-radius: 4px;
        }
        .btn-outline-primary:hover {
            color: #fff;
        }
    </style>
}
