<style>
        input[type="search"]::-webkit-search-cancel-button,
        input[type="search"]::-webkit-search-decoration,
        input[type="search"]::-webkit-search-results-button,
        input[type="search"]::-webkit-search-results-decoration {
            display: none;
        }
        /* Target only the desktop & mobile suggestions containers */
        #desktopSearchSuggestions::-webkit-scrollbar,
        #mobileSearchSuggestions::-webkit-scrollbar {
            width: 8px;
            background-color: #f0f0f0; /* Or transparent */
        }

        #desktopSearchSuggestions::-webkit-scrollbar-track,
        #mobileSearchSuggestions::-webkit-scrollbar-track {
            background: #f0f0f0;
            border-radius: 8px;
        }

        #desktopSearchSuggestions::-webkit-scrollbar-thumb,
        #mobileSearchSuggestions::-webkit-scrollbar-thumb {
            background-color: #888;
            border-radius: 8px;
            border: 2px solid #f0f0f0; /* Optional border to create space around the thumb */
        }

        #desktopSearchSuggestions::-webkit-scrollbar-thumb:hover,
        #mobileSearchSuggestions::-webkit-scrollbar-thumb:hover {
            background-color: #555;
        }
        /* Basic styling for the suggestions container */
        .suggestion-box {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: #fff;
        max-height: 300px;
        overflow-y: auto;
        border-radius: 0.5rem;
        box-shadow: 0 0 5px rgba(0,0,0,0.2);

        /* Start "invisible" */
        opacity: 0;
        transform: translateY(-5px);
        pointer-events: none;

        /* Animate opacity & transform over 0.3s */
        transition: opacity 0.3s ease, transform 0.3s ease;
        }

        /* When "visible" is added, fade in */
        .suggestion-box.visible {
        opacity: 1;
        transform: translateY(0);
        pointer-events: auto; /* allow clicks */
        }

        /* Style the scrollbar as before */
        .suggestion-box::-webkit-scrollbar {
        width: 8px;
        background-color: #f0f0f0; /* Or transparent */
        }
        .suggestion-box::-webkit-scrollbar-track {
        background: #f0f0f0;
        border-radius: 8px;
        }
        .suggestion-box::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 8px;
        border: 2px solid #f0f0f0;
        }
        .suggestion-box::-webkit-scrollbar-thumb:hover {
        background-color: #555;
        }

    </style>
    <header>
        <nav class="bg-[#3182CE] py-3">
            <div class="container mx-auto px-4 md:px-8 lg:px-32">
                <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
                    <!-- Mobile & Tablet header -->
                    <div class="flex items-center space-x-3 lg:hidden">
                        <button id="mobileMenuBtn" class="text-white">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                            </svg>
                        </button>
                        <div class="flex items-center space-x-2">
                            <a href="/" class="text-white text-xl font-bold">BPT</a>
                        </div>

                        <!-- Search bar for mobile & tablet -->
                        <div class="flex-1">
                            <div class="relative flex w-full">
                                <form action="/Home/SearchResult" method="get" class="relative flex w-full">
                                    <input type="search" name="query" id="mobileSearchInput" placeholder="Bạn cần tìm gì?" class="w-full px-3 py-1.5 rounded-lg focus:outline-none" autocomplete="off">
                                    <button type="submit" class="absolute right-2 top-1/2 -translate-y-1/2">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-gray-500">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                                        </svg>
                                    </button>
                                </form>
                                <!-- Mobile Suggestions container -->
                                <div id="mobileSearchSuggestions"
                                    class="suggestion-box z-10"
                                    style="margin-top: 0.5rem;">
                                </div>
                            </div>
                        </div>


                        <!-- Cart -->
                        <a href="/cart" class="text-white relative">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
                            </svg>
                            <span id="mobileCartCount" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"></span>
                        </a>
                    </div>

                    <!-- Desktop header -->
                    <div class="hidden lg:flex lg:items-center space-x-4">
                        <a href="/" class="text-white text-2xl font-bold">BPT</a>
                    </div>
                    
                    <!-- Desktop search bar -->
                    <div class="hidden lg:flex flex-1 mx-8">
                        <div class="relative flex w-full">
                            <form action="/Home/SearchResult" method="get" class="relative flex w-full">
                                <input type="search" name="query" id="desktopSearchInput" placeholder="Bạn cần tìm gì?" class="w-full px-4 py-2 rounded-lg focus:outline-none" autocomplete="off">
                                <button type="submit" class="absolute right-2 top-1/2 -translate-y-1/2">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-gray-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                                    </svg>
                                </button>
                            </form>
                            <!-- Desktop Suggestions container -->
                            <div id="desktopSearchSuggestions"
                                class="suggestion-box z-10"
                                style="margin-top: 0.5rem;">
                            </div>

                        </div>
                    </div>

                    <!-- Desktop Navigation Items -->
                    <div class="hidden lg:flex lg:items-center space-x-8">
                        <a href="/CustomBuild" class="text-white text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mx-auto">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25" />
                            </svg>
                            <span class="text-sm font-bold">Xây dựng cấu hình</span>
                        </a>

                        <a href="/cart" class="text-white text-center relative">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mx-auto">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
                            </svg>
                            <span id="desktopCartCount" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"></span>
                            <span class="text-sm font-bold">Giỏ hàng</span>
                        </a>

                        <a href="/contact" class="text-white text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mx-auto">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 0 0 2.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 0 1-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 0 0-1.091-.852H4.5A2.25 2.25 0 0 0 2.25 4.5v2.25Z" />
                            </svg>
                            <span class="text-sm font-bold">Liên hệ</span>
                        </a>

                        <div class="account-section">
                            @if (User.Identity.IsAuthenticated)
                            {
                                <a href="/account" class="text-white text-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mx-auto">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                                    </svg>
                                    <span class="text-sm font-bold">@User.FindFirst("FullName")?.Value</span>
                                </a>
                            }
                            else
                            {
                                <a href="#" class="text-white text-center" id="showLoginBtn">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mx-auto">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                                    </svg>
                                    <span class="text-sm font-bold">Tài khoản</span>
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Navigation Bar-->
        <nav class="bg-[#1266A6] border-t border-white/20">
            <div class="container mx-auto px-4 md:px-8 lg:px-32">
                <div class="flex items-center py-4 md:h-12">
                    <!-- Category Menu - Hidden on mobile and tablet, visible on desktop -->
                    <div class="hidden lg:block">
                        <partial name="_CategoryMenu" />
                    </div>

                    <!-- Scrollable Navigation Links -->
                    <div class="flex items-center space-x-6 md:space-x-16 ml-0 md:ml-6 text-white text-sm font-bold overflow-x-auto whitespace-nowrap [&::-webkit-scrollbar]:hidden [-ms-overflow-style:'none'] [scrollbar-width:'none']">
                        <a href="@Url.Action("PC", "ProductsList")" class="flex items-center hover:text-white/80 space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25" />
                            </svg>
                            <span>PC</span>
                        </a>

                        <a href="/productslist/laptop" class="flex items-center hover:text-white/80 space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3 17.25h18M5.25 3.75h13.5a2.25 2.25 0 0 1 2.25 2.25v9.75H3V6a2.25 2.25 0 0 1 2.25-2.25zM3 19.5h18a2.25 2.25 0 0 1 2.25 2.25v.75H.75v-.75a2.25 2.25 0 0 1 2.25-2.25z" />
                            </svg>
                            <span>Laptop</span>
                        </a>

                        <a href="/productslist/components" class="flex items-center hover:text-white/80 space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 19.5V21M12 3v1.5m0 15V21m3.75-18v1.5m0 15V21" />
                            </svg>
                            <span>Linh kiện PC</span>
                        </a>

                        <a href="/productslist/monitor" class="flex items-center hover:text-white/80 space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25" />
                            </svg>
                            <span>Màn hình</span>
                        </a>

                        <a href="/productslist/audio" class="flex items-center hover:text-white/80 space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.114 5.636a9 9 0 0 1 0 12.728M16.463 8.288a5.25 5.25 0 0 1 0 7.424M6.75 8.25l4.72-4.72a.75.75 0 0 1 1.28.53v15.88a.75.75 0 0 1-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.009 9.009 0 0 1 2.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75Z" />
                            </svg>
                            <span>Thiết bị âm thanh</span>
                        </a>

                        <a href="/others" class="flex items-center hover:text-white/80 space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6.429 9.75 2.25 12l4.179 2.25m0-4.5 5.571 3 5.571-3m-11.142 0L2.25 7.5 12 2.25l9.75 5.25-4.179 2.25m0 0L21.75 12l-4.179 2.25m0 0 4.179 2.25L12 21.75 2.25 16.5l4.179-2.25m11.142 0-5.571 3-5.571-3" />
                            </svg>
                            <span>Các thiết bị khác</span>
                        </a>
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <!-- Overlay for mobile sidebar -->
    <div id="sidebarOverlay" class="fixed inset-0 bg-black opacity-50 hidden z-40"></div>

    <!-- Mobile Sidebar Menu -->
    <partial name="_MoblieSidebar" />

    <!-- Add this script at the end of the file -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const mobileMenuBtn = document.getElementById('mobileMenuBtn');
            const closeSidebarBtn = document.getElementById('closeSidebarBtn');
            const mobileSidebar = document.getElementById('mobileSidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            const categoryItems = document.querySelectorAll('.mobile-category-item');

            function openSidebar() {
                mobileSidebar.classList.remove('-translate-x-full');
                sidebarOverlay.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }

            function closeSidebar() {
                mobileSidebar.classList.add('-translate-x-full');
                sidebarOverlay.classList.add('hidden');
                document.body.style.overflow = '';
            }

            // Xử lý đóng/mở danh mục
            categoryItems.forEach(item => {
                const button = item.querySelector('button');
                const content = item.querySelector('div');
                const arrow = button.querySelector('svg');

                button.addEventListener('click', () => {
                    const isExpanded = content.classList.contains('hidden');
                    
                    // Đóng tất cả các mục khác
                    categoryItems.forEach(otherItem => {
                        if (otherItem !== item) {
                            otherItem.querySelector('div').classList.add('hidden');
                            otherItem.querySelector('svg').classList.remove('rotate-180');
                        }
                    });

                    // Mở/đóng mục hiện tại
                    content.classList.toggle('hidden');
                    if (isExpanded) {
                        arrow.classList.add('rotate-180');
                    } else {
                        arrow.classList.remove('rotate-180');
                    }
                });
            });

            mobileMenuBtn.addEventListener('click', openSidebar);
            closeSidebarBtn.addEventListener('click', closeSidebar);
            sidebarOverlay.addEventListener('click', closeSidebar);
        });
    </script>

    <!-- Thêm script này vào cuối file, trước </header> -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const showLoginBtn = document.getElementById('showLoginBtn');
            const loginPopup = document.getElementById('loginPopup');
            const closeLoginBtn = document.getElementById('closeLoginBtn');

            if (showLoginBtn) {
                showLoginBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    loginPopup.classList.remove('hidden');
                    loginPopup.classList.add('flex');
                });
            }

            if (closeLoginBtn) {
                closeLoginBtn.addEventListener('click', function() {
                    loginPopup.classList.add('hidden');
                    loginPopup.classList.remove('flex');
                });
            }
        });
    </script>

    <!-- Add this script at the end of the file -->
    <script>
        function updateCartCount() {
            const mobileCount = document.getElementById('mobileCartCount');
            const desktopCount = document.getElementById('desktopCartCount');
            
            if (@User.Identity?.IsAuthenticated.ToString().ToLower()) {
                // For logged in users, get count from server
                fetch('/Cart/GetCartCount')
                    .then(response => response.json())
                    .then(count => {
                        updateCountDisplay(count);
                    });
            } else {
                // For guest users, get count from localStorage
                const cart = JSON.parse(localStorage.getItem('guestCart')) || [];
                const count = cart.reduce((sum, item) => sum + item.quantity, 0);
                updateCountDisplay(count);
            }

            function updateCountDisplay(count) {
                if (count > 0) {
                    mobileCount.textContent = count;
                    desktopCount.textContent = count;
                    mobileCount.classList.remove('hidden');
                    desktopCount.classList.remove('hidden');
                } else {
                    mobileCount.classList.add('hidden');
                    desktopCount.classList.add('hidden');
                }
            }
        }

        // Update count when page loads
        document.addEventListener('DOMContentLoaded', updateCartCount);

        // Update count when cart changes
        window.addEventListener('storage', function(e) {
            if (e.key === 'guestCart') {
                updateCartCount();
            }
        });

        // Custom event for updating cart count after adding items
        window.addEventListener('cartUpdated', updateCartCount);
    </script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Debounce helper
        function debounce(func, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(this, args), delay);
            }
        }

        // Match the same logic from _ProductCard.cshtml
        function getProductUrl(loaiSp, idSp) {
            if (!loaiSp) return "#";
            loaiSp = loaiSp.toLowerCase();
            switch (loaiSp) {
                case "pc":
                    return `/pc/${idSp}`;
                case "laptop":
                    return `/laptop/${idSp}`;
                case "components":
                    return `/components/${idSp}`;
                case "storage":
                    return `/storage/${idSp}`;
                case "monitor":
                    return `/monitor/${idSp}`;
                case "speaker":
                case "microphone":
                case "webcam":
                case "audio":
                    return `/audio/${loaiSp}/${idSp}`;
                case "keyboard":
                case "mouse":
                case "headphone":
                case "peripherals":
                    return `/peripherals/${loaiSp}/${idSp}`;
                case "network":
                    return `/network/${idSp}`;
                default:
                    return "#";
            }
        }

        function setupSearchSuggestions(inputElement, suggestionsBox) {
            inputElement.addEventListener('keyup', debounce(function (e) {
                const query = e.target.value.trim();
                if (query.length < 2) {
                    // Fade out
                    suggestionsBox.classList.remove('visible');
                    suggestionsBox.innerHTML = "";
                    return;
                }
                fetch('/Home/SearchSuggestions?query=' + encodeURIComponent(query))
                    .then(response => response.json())
                    .then(data => {
                        if (data && data.length > 0) {
                            let html = "";
                            data.forEach(item => {
                                const productUrl = getProductUrl(item.loaiSp, item.idSp);
                                const imageSrc = "http://localhost:5177/" + item.imageUrl;
                                const formattedPrice = new Intl.NumberFormat('vi-VN').format(item.gia) + "đ";

                                html += `
                                    <div class="flex items-center justify-between p-2 border-b hover:bg-gray-100 cursor-pointer pl-4 pr-4"
                                        onclick="window.location.href='${productUrl}'">
                                        <!-- Text on the left -->
                                        <div class="flex flex-col mr-2">
                                            <div class="font-semibold">${item.tenSp}</div>
                                            <div class="text-red-500">${formattedPrice}</div>
                                        </div>
                                        <!-- Image on the right -->
                                        <img src="${imageSrc}"
                                            alt="${item.tenSp}"
                                            class="w-12 h-12 object-cover rounded"
                                            onerror="this.onerror=null; this.src='/imgs/default-product.jpg';">
                                    </div>
                                `;
                            });
                            suggestionsBox.innerHTML = html;

                            // Fade in
                            suggestionsBox.classList.add('visible');
                        } else {
                            // Fade out
                            suggestionsBox.classList.remove('visible');
                            suggestionsBox.innerHTML = "";
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching search suggestions:', error);
                        suggestionsBox.classList.remove('visible');
                        suggestionsBox.innerHTML = "";
                    });
            }, 300));

            // Hide suggestions when clicking outside
            document.addEventListener('click', function (evt) {
                if (!inputElement.contains(evt.target) && !suggestionsBox.contains(evt.target)) {
                    // Fade out
                    suggestionsBox.classList.remove('visible');
                }
            });
        }


        // Setup suggestions for mobile
        const mobileSearchInput = document.getElementById('mobileSearchInput');
        const mobileSearchSuggestions = document.getElementById('mobileSearchSuggestions');
        if (mobileSearchInput && mobileSearchSuggestions) {
            setupSearchSuggestions(mobileSearchInput, mobileSearchSuggestions);
        }

        // Setup suggestions for desktop
        const desktopSearchInput = document.getElementById('desktopSearchInput');
        const desktopSearchSuggestions = document.getElementById('desktopSearchSuggestions');
        if (desktopSearchInput && desktopSearchSuggestions) {
            setupSearchSuggestions(desktopSearchInput, desktopSearchSuggestions);
        }
    });
    </script>

