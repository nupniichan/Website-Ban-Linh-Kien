@model Admin_WBLK.Models.Donhang

@{
    ViewData["Title"] = "Thêm đơn hàng mới";
    // Initially, VIP discount is 0 because no customer is selected yet.
    var initialVipDiscount = 0;
    var initialVipRankName = "";
}

<div class="p-6 w-full h-full bg-gray-50">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-6">
            <h1 class="text-3xl font-bold text-gray-900">Thêm đơn hàng mới</h1>
            <p class="mt-2 text-sm text-gray-600">Nhập thông tin chi tiết cho đơn hàng mới</p>
        </div>

        <!-- Card chứa form -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <form asp-action="Create" method="post" class="w-full h-full" id="createOrderForm">
                <div asp-validation-summary="ModelOnly" class="mb-4 p-4 rounded-lg bg-red-50 text-red-500"></div>

                <!-- Grid layout cho các trường input -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Mã khách hàng -->
                    <div>
                        <label asp-for="IdKh" class="block text-sm font-medium text-gray-700 mb-1">
                            Mã khách hàng <span class="text-red-500">*</span>
                        </label>
                        <input asp-for="IdKh" id="customerId"
                               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                               required pattern="^KH[0-9]{5}$" title="Mã khách hàng phải bắt đầu bằng 'KH' và theo sau là 5 số" />
                        <span asp-validation-for="IdKh" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Tên khách hàng (readonly) -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Tên khách hàng</label>
                        <input type="text" id="tenKhachHang" readonly 
                               class="w-full px-4 py-2 bg-gray-50 border border-gray-300 rounded-lg" />
                        <span id="customerError" class="text-red-500 text-sm mt-1 hidden"></span>
                    </div>

                    <!-- Phương thức thanh toán -->
                    <div>
                        <label asp-for="Phuongthucthanhtoan" class="block text-sm font-medium text-gray-700 mb-1">
                            Phương thức thanh toán <span class="text-red-500">*</span>
                        </label>
                        <select asp-for="Phuongthucthanhtoan" id="paymentMethod" 
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                            <option value="COD">COD</option>
                            <option value="Paypal">Paypal</option>
                            <option value="Momo">Momo</option>
                        </select>
                        <span asp-validation-for="Phuongthucthanhtoan" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Mã giảm giá -->
                    <div>
                        <label asp-for="IdMgg" class="block text-sm font-medium text-gray-700 mb-1">
                            Mã giảm giá
                        </label>
                        <input asp-for="IdMgg" id="discountCode"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                            pattern="^MGG[0-9]{3}$" title="Mã giảm giá phải bắt đầu bằng 'MGG' và theo sau là 3 số" />
                        <span asp-validation-for="IdMgg" class="text-red-500 text-sm mt-1"></span>
                        <span id="discountError" class="text-red-500 text-sm mt-1 hidden"></span>
                        <span id="discountSuccess" class="text-green-500 text-sm mt-1 hidden"></span>
                        <!-- Container for discount suggestions -->
                        <div id="discountSuggestions" class="absolute z-10 bg-white border border-gray-300 rounded-lg shadow-sm mt-1 hidden"></div>
                    </div>


                    <!-- Trạng thái -->
                    <div>
                        <label asp-for="Trangthai" class="block text-sm font-medium text-gray-700 mb-1">
                            Trạng thái <span class="text-red-500">*</span>
                        </label>
                        <select asp-for="Trangthai" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" required>
                            <option value="">Chọn trạng thái</option>
                            <option value="Chờ xác nhận">Chờ xác nhận</option>
                            <option value="Đã thanh toán">Đã thanh toán</option>
                            <option value="Thanh toán không thành công">Thanh toán không thành công</option>
                            <option value="Đã duyệt đơn">Đã duyệt đơn</option>
                            <option value="Đang giao">Đang giao</option>
                            <option value="Giao thành công">Giao thành công</option>
                            <option value="Không nhận hàng">Không nhận hàng</option>
                            <option value="Hủy đơn">Hủy đơn</option>
                            <option value="Đã kết thúc">Đã kết thúc</option>
                        </select>
                        <span asp-validation-for="Trangthai" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Địa chỉ giao hàng -->
                    <div class="md:col-span-2">
                        <label asp-for="Diachigiaohang" class="block text-sm font-medium text-gray-700 mb-1">
                            Địa chỉ giao hàng <span class="text-red-500">*</span>
                        </label>
                        <input asp-for="Diachigiaohang" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                               required minlength="10" maxlength="200" title="Địa chỉ phải từ 10-200 ký tự" />
                        <span asp-validation-for="Diachigiaohang" class="text-red-500 text-sm mt-1"></span>
                    </div>
                </div>

                <!-- Sản phẩm đặt -->
                <div class="mt-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Sản phẩm đặt</label>
                    <div class="border border-gray-300 rounded-lg overflow-hidden">
                        <table class="w-full" id="productTable">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b">Mã SP</th>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b">Tên SP</th>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b">Số lượng</th>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b">Đơn giá</th>
                                    <th class="px-4 py-3 w-16 border-b"></th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows will be added dynamically -->
                            </tbody>
                        </table>
                        <div class="p-4 bg-gray-50 border-t border-gray-300">
                            <button type="button" onclick="addProductRow()" 
                                    class="flex items-center text-sm font-medium text-blue-600 hover:text-blue-700 transition-colors">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                Thêm sản phẩm
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Sau bảng sản phẩm: Price Summary & VIP Discount -->
                <div class="mt-4 text-right">
                    <input type="hidden" asp-for="Tongtien" id="Tongtien" />
                    <div id="discountInfo" class="text-green-600 text-base mb-2"></div>
                    <div class="text-lg space-y-1">
                        <div>Tạm tính: <span id="originalTotal" class="font-medium">0</span> VNĐ</div>
                        <div id="vipDiscountRow" class="hidden">Giảm giá <span id="vipRankName"></span>: <span id="vipDiscountAmount" class="text-green-600 font-medium">-0</span> VNĐ</div>
                        <div id="codeDiscountRow" class="hidden">Giảm giá: <span id="codeDiscountAmount" class="text-green-600 font-medium">-0</span> VNĐ</div>
                        <div>Tổng tiền: <span id="displayTotal" class="font-bold text-red-600">0</span> VNĐ</div>
                    </div>
                </div>

                <!-- Thông tin thanh toán online (nếu có) -->
                <div id="onlinePaymentInfo" class="mt-6 hidden">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Thông tin thanh toán</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Mã thanh toán <span class="text-red-500">*</span></label>
                            <input type="text" name="Mathanhtoan" class="w-full px-4 py-2 border border-gray-300 rounded-lg" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Trạng thái thanh toán</label>
                            <select name="TrangthaiThanhtoan" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
                                <option value="Chờ thanh toán">Chờ thanh toán</option>
                                <option value="Đã thanh toán">Đã thanh toán</option>
                                <option value="Thanh toán thất bại">Thanh toán thất bại</option>
                            </select>
                        </div>
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Nội dung thanh toán</label>
                            <textarea name="Noidungthanhtoan" class="w-full px-4 py-2 border border-gray-300 rounded-lg" rows="3"></textarea>
                        </div>
                    </div>
                </div>

                <!-- Thêm trường ghi chú -->
                <div class="mt-6">
                    <label asp-for="Ghichu" class="block text-sm font-medium text-gray-700 mb-1">Ghi chú</label>
                    <textarea asp-for="Ghichu" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" rows="3"></textarea>
                    <span asp-validation-for="Ghichu" class="text-red-500 text-sm mt-1"></span>
                </div>

                <!-- Ngày đặt hàng sẽ tự động set ở controller -->
                <input type="hidden" asp-for="Ngaydathang" />

                <!-- Buttons -->
                <div class="mt-8 flex items-center justify-end gap-4">
                    <a asp-action="Index" class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-800 transition-colors">
                        Quay lại
                    </a>
                    <button type="submit" class="px-6 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        Tạo đơn hàng
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/OrderManagement.js"></script>
    <script>
        // Global variable to store VIP discount info (default to 0)
        let vipDiscountPercentage = 0;
        let vipRankName = "";

        // When customer ID loses focus, fetch customer info including VIP discount
        document.getElementById('customerId').addEventListener('blur', function () {
            const customerId = this.value.trim();
            if (!customerId) {
                document.getElementById('tenKhachHang').value = "";
                document.getElementById('customerError').classList.add('hidden');
                return;
            }
            
            document.getElementById('customerError').classList.add('hidden');
            console.log("Fetching customer info for ID:", customerId);
            
            fetch('/OrderManagement/GetCustomerInfo?id=' + encodeURIComponent(customerId))
                .then(response => response.json())
                .then(data => {
                    console.log("Customer data received:", data);
                    if (data && data.idKh) {
                        document.getElementById('tenKhachHang').value = data.hoten;
                        vipDiscountPercentage = parseFloat(data.vipDiscount) || 0;
                        vipRankName = data.vipRankName || "";
                        document.getElementById('vipRankName').textContent = vipRankName;
                        document.getElementById('customerError').classList.add('hidden');
                        updateTotalAmount(); // recalc totals with new VIP discount
                    } else {
                        document.getElementById('tenKhachHang').value = "";
                        vipDiscountPercentage = 0;
                        vipRankName = "";
                        document.getElementById('customerError').classList.remove('hidden');
                        document.getElementById('customerError').textContent = "Không tìm thấy khách hàng";
                    }
                })
                .catch(error => {
                    console.error("Error fetching customer:", error);
                    document.getElementById('tenKhachHang').value = "";
                    document.getElementById('customerError').classList.remove('hidden');
                    document.getElementById('customerError').textContent = "Lỗi khi tìm kiếm khách hàng";
                });
        });

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN').format(amount);
        }

        async function updateTotalAmount() {
            let total = 0;
            const rows = document.querySelectorAll('#productTable tbody tr');
            rows.forEach(row => {
                const quantityInput = row.querySelector('input[name*="Soluongsanpham"]');
                const priceInput = row.querySelector('input[name*="Dongia"]');
                const quantity = quantityInput ? parseInt(quantityInput.value) || 0 : 0;
                const price = priceInput ? parseFloat(priceInput.value) || 0 : 0;
                total += quantity * price;
            });
            document.getElementById('originalTotal').textContent = formatCurrency(total);

            // Calculate VIP discount
            let vipDiscountAmount = total * vipDiscountPercentage / 100;
            let priceAfterVip = total - vipDiscountAmount;
            if (vipDiscountAmount > 0) {
                document.getElementById('vipDiscountAmount').textContent = "-" + formatCurrency(vipDiscountAmount);
                document.getElementById('vipDiscountRow').classList.remove('hidden');
            } else {
                document.getElementById('vipDiscountRow').classList.add('hidden');
            }

            // Code discount calculation
            const discountCode = document.getElementById('discountCode').value.trim();
            let codeDiscountAmount = 0;
            if (discountCode === "") {
                codeDiscountAmount = 0;
                document.getElementById('codeDiscountRow').classList.add('hidden');
            } else {
                try {
                    const response = await fetch('/OrderManagement/GetDiscountInfo?id=' + encodeURIComponent(discountCode) + '&isEdit=true');
                    const data = await response.json();
                    if (data.success) {
                        let discountCodePercentage = parseFloat(data.tilechietkhau);
                        codeDiscountAmount = priceAfterVip * discountCodePercentage / 100;
                        document.getElementById('codeDiscountAmount').textContent = "-" + formatCurrency(codeDiscountAmount);
                        document.getElementById('codeDiscountRow').classList.remove('hidden');
                    } else {
                        document.getElementById('codeDiscountRow').classList.add('hidden');
                    }
                }
                catch (error) {
                    document.getElementById('codeDiscountRow').classList.add('hidden');
                }
            }

            let finalPrice = priceAfterVip - codeDiscountAmount;
            document.getElementById('displayTotal').textContent = formatCurrency(finalPrice);
            document.getElementById('Tongtien').value = finalPrice;
        }

        document.addEventListener('DOMContentLoaded', function () {
            updateTotalAmount();
            document.getElementById('discountCode').addEventListener('input', function () {
                updateTotalAmount();
            });
        });

        // Prevent multiple submissions
        document.getElementById('createOrderForm').addEventListener('submit', function (e) {
            e.preventDefault(); // Ngăn form submit mặc định
            
            if (this.hasAttribute('data-submitting')) {
                return;
            }
            
            const paymentMethod = document.getElementById('paymentMethod');
            if (!paymentMethod.value) {
                alert('Vui lòng chọn phương thức thanh toán');
                paymentMethod.focus();
                return;
            }
            
            // Kiểm tra mã thanh toán cho phương thức thanh toán online
            if ((paymentMethod.value === 'Momo' || paymentMethod.value === 'Paypal')) {
                const mathanhtoanInput = document.querySelector('input[name="Mathanhtoan"]');
                if (!mathanhtoanInput || !mathanhtoanInput.value.trim()) {
                    alert('Vui lòng nhập mã thanh toán cho phương thức thanh toán online!');
                    if (mathanhtoanInput) mathanhtoanInput.focus();
                    return;
                }
            }
            
            // Kiểm tra các trường bắt buộc
            const requiredFields = {
                'customerId': 'Mã khách hàng',
                'Diachigiaohang': 'Địa chỉ giao hàng',
                'Trangthai': 'Trạng thái đơn hàng'
            };
            
            let isValid = true;
            let errorMessages = [];
            
            for (const [id, label] of Object.entries(requiredFields)) {
                const field = document.getElementById(id);
                if (!field || !field.value.trim()) {
                    errorMessages.push(`Vui lòng nhập ${label}`);
                    field?.classList.add('border-red-500');
                    isValid = false;
                }
            }
            
            // Kiểm tra bảng sản phẩm
            const productRows = document.querySelectorAll('#productTable tbody tr');
            if (productRows.length === 0) {
                errorMessages.push('Vui lòng thêm ít nhất một sản phẩm');
                isValid = false;
            }
            
            // Hiển thị lỗi nếu có
            const validationSummary = document.getElementById('validation-summary');
            if (!isValid && validationSummary) {
                validationSummary.innerHTML = errorMessages.map(msg => `<li>${msg}</li>`).join('');
                validationSummary.classList.remove('hidden');
                return;
            }
            
            // Thu thập thông tin chi tiết đơn hàng
            const chitietdonhangs = [];
            let hasProductError = false;
            
            for (const row of productRows) {
                const idSp = row.querySelector('[name="IdSp"]').value;
                const soluong = parseInt(row.querySelector('.quantity-input').value);
                const priceElement = row.querySelector('.product-price');
                const dongia = parseFloat(priceElement.dataset.price);
                const productName = row.querySelector('.product-name')?.value;
                
                if (!idSp || isNaN(soluong) || isNaN(dongia) || dongia <= 0 || 
                    productName === 'Không tìm thấy sản phẩm' || productName === 'Lỗi khi tìm kiếm sản phẩm') {
                    row.classList.add('bg-red-50');
                    hasProductError = true;
                    continue;
                }
                
                chitietdonhangs.push({ IdSp: idSp, Soluongsanpham: soluong, Dongia: dongia });
            }
            
            if (hasProductError) {
                if (validationSummary) {
                    validationSummary.innerHTML = '<li>Vui lòng kiểm tra lại thông tin sản phẩm</li>';
                    validationSummary.classList.remove('hidden');
                }
                return;
            }
            
            // Thêm hidden input cho chitietdonhangs
            let chitietdonhangsInput = this.querySelector('input[name="chitietdonhangs"]');
            if (!chitietdonhangsInput) {
                chitietdonhangsInput = document.createElement('input');
                chitietdonhangsInput.type = 'hidden';
                chitietdonhangsInput.name = 'chitietdonhangs';
                this.appendChild(chitietdonhangsInput);
            }
            
            // Chuyển đổi mảng thành chuỗi JSON
            chitietdonhangsInput.value = JSON.stringify(chitietdonhangs);
            
            // Log để debug
            console.log('Submitting form with chitietdonhangs:', chitietdonhangsInput.value);
            console.log('Tổng tiền:', document.getElementById('Tongtien').value);
            
            // Đánh dấu form đang submit và vô hiệu hóa nút submit
            this.setAttribute('data-submitting', 'true');
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.innerHTML = 'Đang xử lý...';
            
            // Submit form
            this.submit();
        });

        // Add discount suggestion functionality
        document.getElementById('discountCode').addEventListener('input', async function () {
            const term = this.value.trim();
            const suggestionsContainer = document.getElementById('discountSuggestions');

            // If no term, hide suggestions
            if (!term) {
                suggestionsContainer.innerHTML = '';
                suggestionsContainer.classList.add('hidden');
                updateTotalAmount();
                return;
            }

            try {
                const response = await fetch('/OrderManagement/GetDiscountSuggestions?term=' + encodeURIComponent(term));
                const suggestions = await response.json();
                
                // Clear any previous suggestions
                suggestionsContainer.innerHTML = '';

                if (suggestions && suggestions.length > 0) {
                    suggestions.forEach(suggestion => {
                        const suggestionItem = document.createElement('div');
                        suggestionItem.classList.add('p-2', 'cursor-pointer', 'hover:bg-gray-100', 'text-sm');
                        suggestionItem.textContent = `${suggestion.id} - ${suggestion.ten} (${suggestion.tilechietkhau}%)`;
                        suggestionItem.addEventListener('click', function () {
                            // Fill in the discount code field with the chosen suggestion
                            document.getElementById('discountCode').value = suggestion.id;
                            // Hide the suggestions container
                            suggestionsContainer.innerHTML = '';
                            suggestionsContainer.classList.add('hidden');
                            // Update totals based on new discount code
                            updateTotalAmount();
                        });
                        suggestionsContainer.appendChild(suggestionItem);
                    });
                    suggestionsContainer.classList.remove('hidden');
                } else {
                    suggestionsContainer.classList.add('hidden');
                }
            } catch (error) {
                console.error('Error fetching discount suggestions:', error);
                suggestionsContainer.classList.add('hidden');
            }
        });

        // Add a new product row to the table
        function addProductRow() {
            const table = document.querySelector('#productTable tbody');
            const row = document.createElement('tr');
            
            // Generate a unique ID for the row
            const rowId = 'product-row-' + Date.now();
            row.id = rowId;
            
            // Add the HTML content
            row.innerHTML = `
                <td class="p-2">
                    <input type="text" name="IdSp" class="form-control product-id w-full px-3 py-2 border border-gray-300 rounded-lg" placeholder="Mã SP" required />
                </td>
                <td class="p-2">
                    <input type="text" class="form-control product-name w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100" readonly />
                </td>
                <td class="p-2">
                    <input type="number" name="Soluongsanpham" class="form-control quantity-input w-full px-3 py-2 border border-gray-300 rounded-lg" value="1" min="1" onchange="updateRowTotal(this.parentElement.parentElement)" />
                </td>
                <td class="p-2">
                    <input type="number" name="Dongia" class="form-control price-input w-full px-3 py-2 border border-gray-300 rounded-lg" readonly />
                    <span class="product-price hidden" data-price="0"></span>
                </td>
                <td class="p-2 row-total">0 ₫</td>
                <td class="p-2">
                    <button type="button" class="btn btn-danger btn-sm px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600" onclick="removeProductRow(this.parentElement.parentElement)">Xóa</button>
                </td>
            `;
            
            // Add the row to the table
            table.appendChild(row);
            
            // Add event listeners for product search
            const productIdInput = row.querySelector('[name="IdSp"]');
            
            // Debounce function to prevent too many API calls
            function debounce(func, timeout = 300) {
                let timer;
                return (...args) => {
                    clearTimeout(timer);
                    timer = setTimeout(() => { func.apply(this, args); }, timeout);
                };
            }
            
            // Product search function
            const searchProduct = async function(value) {
                if (!row.isConnected) return;
                
                const productNameField = row.querySelector('.product-name');
                const priceInput = row.querySelector('.price-input');
                const priceElement = row.querySelector('.product-price');
                const quantityInput = row.querySelector('.quantity-input');
                
                if (!productNameField || !priceInput || !priceElement || !quantityInput) return;
                
                if (!value) {
                    productNameField.value = '';
                    priceInput.value = '';
                    priceElement.dataset.price = '0';
                    updateRowTotal(row);
                    return;
                }
                
                try {
                    console.log(`Tìm kiếm sản phẩm: ${value}`);
                    const response = await fetch(`/OrderManagement/GetProductInfo?id=${encodeURIComponent(value)}`);
                    const data = await response.json();
                    console.log('Kết quả tìm kiếm:', data);
                    
                    if (data && data.success) {
                        productNameField.value = data.tensanpham;
                        productNameField.classList.remove('text-red-500');
                        priceInput.value = data.gia;
                        priceElement.dataset.price = data.gia;
                        quantityInput.max = data.soluongton;
                        updateRowTotal(row);
                    } else {
                        productNameField.value = data.message || 'Không tìm thấy sản phẩm';
                        productNameField.classList.add('text-red-500');
                        priceInput.value = '';
                        priceElement.dataset.price = '0';
                        updateRowTotal(row);
                    }
                } catch (error) {
                    console.error('Lỗi khi tìm kiếm sản phẩm:', error);
                    productNameField.value = 'Lỗi khi tìm kiếm sản phẩm';
                    productNameField.classList.add('text-red-500');
                }
            };
            
            const debouncedSearch = debounce(searchProduct, 300);
            
            productIdInput.addEventListener('input', function() {
                const value = this.value;
                if (!value) {
                    const productNameField = row.querySelector('.product-name');
                    if (productNameField) productNameField.value = '';
                    const priceInput = row.querySelector('.price-input');
                    if (priceInput) priceInput.value = '';
                    const priceElement = row.querySelector('.product-price');
                    if (priceElement) priceElement.dataset.price = '0';
                    updateRowTotal(row);
                    return;
                }
                debouncedSearch(value);
            });
            
            productIdInput.addEventListener('blur', function() {
                searchProduct(this.value);
            });
            
            // Focus on the new input
            productIdInput.focus();
        }
        
        // Function to update row total
        function updateRowTotal(row) {
            const quantityInput = row.querySelector('.quantity-input');
            const priceElement = row.querySelector('.product-price');
            const rowTotalElement = row.querySelector('.row-total');
            
            if (quantityInput && priceElement && rowTotalElement) {
                const quantity = parseInt(quantityInput.value) || 0;
                const price = parseFloat(priceElement.dataset.price) || 0;
                const total = quantity * price;
                
                rowTotalElement.textContent = formatCurrency(total) + ' ₫';
                console.log(`Cập nhật dòng: Số lượng=${quantity}, Đơn giá=${price}, Thành tiền=${total}`);
                
                // Update order total
                updateTotalAmount();
            }
        }
        
        // Function to remove a product row
        function removeProductRow(row) {
            row.remove();
            updateTotalAmount();
        }
    </script>
}
