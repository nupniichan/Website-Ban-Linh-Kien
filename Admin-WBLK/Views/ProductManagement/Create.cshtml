@model Admin_WBLK.Models.Sanpham

<script src="~/js/ProductManagement.js"></script>

@{
    ViewData["Title"] = "Thêm sản phẩm mới";
}

<div class="p-6 w-full h-full bg-gray-50">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-6">
            <h1 class="text-3xl font-bold text-gray-900">Thêm sản phẩm mới</h1>
            <p class="mt-2 text-sm text-gray-600">Nhập thông tin chi tiết cho sản phẩm mới</p>
        </div>

        <!-- Card chứa form -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <form asp-action="Create" 
                  method="post" 
                  enctype="multipart/form-data" 
                  class="w-full h-full"
                  id="productForm">
                <input type="hidden" name="thongsokythuat" id="thongsokythuat" />
                <div asp-validation-summary="ModelOnly" class="mb-4 p-4 rounded-lg bg-red-50 text-red-500"></div>

                <!-- Grid layout cho các trường input -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Tên sản phẩm -->
                    <div class="md:col-span-2">
                        <label asp-for="Tensanpham" class="block text-sm font-medium text-gray-700 mb-1">Tên sản phẩm</label>
                        <input asp-for="Tensanpham" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" required />
                        <span asp-validation-for="Tensanpham" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Giá -->
                    <div>
                        <label asp-for="Gia" class="block text-sm font-medium text-gray-700 mb-1">Giá</label>
                        <div class="relative">
                            <input asp-for="Gia" type="number" class="w-full pl-4 pr-12 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" required />
                            <span class="absolute right-4 top-2 text-gray-500">VNĐ</span>
                        </div>
                        <span asp-validation-for="Gia" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Số lượng tồn -->
                    <div>
                        <label asp-for="Soluongton" class="block text-sm font-medium text-gray-700 mb-1">Số lượng tồn</label>
                        <input asp-for="Soluongton" type="number" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" required />
                        <span asp-validation-for="Soluongton" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Loại sản phẩm -->
                    <div>
                        <label asp-for="Loaisanpham" class="block text-sm font-medium text-gray-700 mb-1">Loại sản phẩm</label>
                        <select asp-for="Loaisanpham" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" required>
                            <option value="">Chọn loại sản phẩm</option>
                            <option value="PC">PC</option>
                            <option value="Laptop">Laptop</option>
                            <option value="Components">Linh kiện máy tính</option>
                            <option value="Monitor">Màn hình</option>
                            <option value="Audio">Thiết bị âm thanh</option>
                            <option value="Network">Thiết bị mạng</option>
                            <option value="Peripherals">Thiết bị ngoại vi</option>
                            <option value="Storage">Thiết bị lưu trữ</option>
                        </select>
                        <span asp-validation-for="Loaisanpham" class="text-red-500 text-sm mt-1"></span>
                    </div>

                    <!-- Thương hiệu -->
                    <div>
                        <label asp-for="Thuonghieu" class="block text-sm font-medium text-gray-700 mb-1">Thương hiệu</label>
                        <input asp-for="Thuonghieu" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" required />
                        <span asp-validation-for="Thuonghieu" class="text-red-500 text-sm mt-1"></span>
                    </div>
                </div>

                <!-- Hình ảnh -->
                <div class="mt-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Hình ảnh sản phẩm</label>
                    <input type="hidden" asp-for="Hinhanh" />
                    <div class="flex items-start gap-6">
                        <!-- Preview hình ảnh -->
                        <div class="w-48 h-48 border border-gray-300 rounded-lg overflow-hidden bg-gray-50">
                            <img id="preview" src="#" alt="Preview" class="w-full h-full object-contain hidden">
                            <div id="uploadIcon" class="w-full h-full flex items-center justify-center">
                                <svg class="w-12 h-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </div>
                        </div>
                        
                        <!-- Upload section -->
                        <div class="flex-1">
                            <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-500 transition-colors"
                                 ondrop="dropHandler(event)" 
                                 ondragover="dragOverHandler(event)"
                                 ondragleave="dragLeaveHandler(event)">
                                <input type="file" id="imageFile" name="imageFile" accept="image/*" 
                                       class="w-full"
                                       onchange="previewImage(this)" />
                                <p class="mt-2 text-sm text-gray-500">
                                    Kéo thả hoặc click để chọn hình ảnh. Kích thước tối đa 5MB.
                                </p>
                            </div>
                            <div id="imageError" class="text-red-500 text-sm mt-2"></div>
                        </div>
                    </div>
                </div>

                <!-- Mô tả -->
                <div class="mt-6">
                    <label asp-for="Mota" class="block text-sm font-medium text-gray-700 mb-2">Mô tả</label>
                    <div class="border border-gray-300 rounded-lg overflow-hidden">
                        <!-- Thanh công cụ định dạng -->
                        <div class="flex flex-wrap gap-1 p-2 bg-gray-50 border-b border-gray-300">
                            <div class="flex gap-1 items-center">
                                <button type="button" onclick="formatText('bold')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="In đậm">
                                    <i class="fas fa-bold text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('italic')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="In nghiêng">
                                    <i class="fas fa-italic text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('strikethrough')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Gạch ngang">
                                    <i class="fas fa-strikethrough text-gray-700"></i>
                                </button>
                                <div class="w-px bg-gray-300 mx-1"></div>
                                <button type="button" onclick="formatText('justifyLeft')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Căn trái">
                                    <i class="fas fa-align-left text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('justifyCenter')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Căn giữa">
                                    <i class="fas fa-align-center text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('justifyRight')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Căn phải">
                                    <i class="fas fa-align-right text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('lineHeight')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Giãn dòng">
                                    <i class="fas fa-text-height text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('insertorderedlist')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Danh sách số">
                                    <i class="fas fa-list-ol text-gray-700"></i>
                                </button>
                                <button type="button" onclick="formatText('insertunorderedlist')" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Danh sách">
                                    <i class="fas fa-list-ul text-gray-700"></i>
                                </button>
                            </div>
                            
                            <div class="w-full"></div>
                            <div class="flex gap-1 items-center">
                                <select onchange="formatText('fontName', this.value)" class="p-1 border rounded text-sm" title="Font chữ">
                                    <option value="Arial">Arial</option>
                                    <option value="Times New Roman">Times New Roman</option>
                                    <option value="Courier New">Courier New</option>
                                </select>
                                <select onchange="formatText('fontSize', this.value)" class="p-1 border rounded text-sm" title="Cỡ chữ">
                                    <option value="1">Nhỏ</option>
                                    <option value="3">Bình thường</option>
                                    <option value="5">Lớn</option>
                                    <option value="7">Rất lớn</option>
                                </select>
                                <div class="w-px bg-gray-300 mx-1"></div>
                                <button type="button" onclick="insertLink()" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Chèn link">
                                    <i class="fas fa-link text-gray-700"></i>
                                </button>
                                <button type="button" onclick="insertTable()" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Chèn bảng">
                                    <i class="fas fa-table text-gray-700"></i>
                                </button>
                                <button type="button" onclick="insertCode()" class="p-1.5 hover:bg-gray-200 rounded transition-colors" title="Chèn code">
                                    <i class="fas fa-code text-gray-700"></i>
                                </button>
                            </div>
                        </div>
                        <div contenteditable="true" id="moTaEditor" class="min-h-[250px] p-4 focus:outline-none"></div>
                        <textarea asp-for="Mota" class="hidden"></textarea>
                    </div>
                    <span asp-validation-for="Mota" class="text-red-500 text-sm mt-1"></span>
                </div>

                <!-- Thông số kỹ thuật -->
                <div class="mt-6" id="specificationSection" style="display: none;">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Thông số kỹ thuật</label>
                    <div class="border border-gray-300 rounded-lg overflow-hidden">
                        <table class="w-full" id="specTable">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b w-1/3">Thông số</th>
                                    <th class="px-4 py-3 text-left text-sm font-medium text-gray-700 border-b">Giá trị</th>
                                    <th class="px-4 py-3 w-16 border-b"></th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows will be added dynamically -->
                            </tbody>
                        </table>
                        <div class="p-4 bg-gray-50 border-t border-gray-300">
                            <button type="button" onclick="addRow()" 
                                    class="flex items-center text-sm font-medium text-blue-600 hover:text-blue-700 transition-colors">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                Thêm thông số
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="mt-8 flex items-center justify-end gap-4">
                    <a asp-action="Index" class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-800 transition-colors">
                        Quay lại
                    </a>
                    <button type="submit" class="px-6 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        Thêm sản phẩm
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    
    <script>
        // Khai báo biến toàn cục
        const editor = document.getElementById('moTaEditor');
        const hiddenTextarea = document.querySelector('[name="mota"]');
        let isResizing = false;

        // Thêm định nghĩa needOptions trước khi sử dụng
        const needOptions = ['Gaming', 'Graphics', 'Workstation', 'Office', 'Server'];

        // Định nghĩa mapping cho các danh mục
        const categoryMapping = {
            'Components': ['CPU', 'VGA', 'Mainboard', 'RAM', 'PSU', 'Case'],
            'Audio': ['Speaker', 'Microphone'],
            'Network': ['Router Wifi', 'Wifi Card'],
            'Peripherals': ['Keyboard', 'Mouse', 'Headphone', 'Webcam'],
            'Storage': ['SSD', 'HDD']
        };

        // Định nghĩa mapping cho Components và thông số kỹ thuật tương ứng
        const componentSpecs = {
            'CPU': [
                { key: 'Socket', value: '' },
                { key: 'Dòng CPU', value: '' },
                { key: 'Số nhân', value: '' },
                { key: 'Số luồng', value: '' },
                { key: 'Xung nhịp', value: '' },
                { key: 'Xung nhịp cơ bản', value: '' },
                { key: 'Điện năng tiêu thụ', value: '' },
                { key: 'Bộ nhớ đệm', value: '' },
                { key: 'Nhân đồ hoạ tích hợp', value: '' }
            ],
            'VGA': [
                { key: 'Xung nhịp', value: '' },
                { key: 'Nhân CUDA', value: '' },
                { key: 'Bộ nhớ', value: '' },
                { key: 'Cổng kết nối', value: '' },
                { key: 'Nguồn khuyến nghị', value: '' },
                { key: 'Điện năng tiêu thụ', value: '' }
            ],
            'Mainboard': [
                { key: 'Socket hỗ trợ', value: '' },
                { key: 'Kích thước', value: '' },
                { key: 'Số khe RAM', value: '' }
            ],
            'RAM': [
                { key: 'Dung lượng', value: '' },
                { key: 'Chuẩn RAM', value: '' },
                { key: 'Tốc độ', value: '' }
            ],
            'PSU': [
                { key: 'Công suất', value: '' },
                { key: 'Kích thước', value: '' }
            ],
            'Case': [
                { key: 'Kích thước', value: '' },
                { key: 'Chất liệu', value: '' },
                { key: 'Khoang ổ đĩa', value: '' },
                { key: 'Mainboard hỗ trợ', value: '' },
                { key: 'Khối lượng', value: '' }
            ]
        };

        // Định nghĩa mapping cho các danh mục khác
        const categorySpecs = {
            // Audio
            'Speaker': [
                { key: 'Kích thước', value: '' },
                { key: 'Loại loa', value: '' }
            ],
            'Microphone': [
                { key: 'Sample / bit rate', value: '' },
                { key: 'Điện năng tiêu thụ', value: '' },
                { key: 'Tần số đáp ứng', value: '' },
                { key: 'Độ nhạy', value: '' }
            ],

            // Network
            'Router Wifi': [
                { key: 'Tiêu chuẩn mạng', value: '' },
                { key: 'Công nghệ AX', value: '' },
                { key: 'Truyền/nhận', value: '' },
                { key: 'Bộ xử lý', value: '' },
                { key: 'Bộ nhớ', value: '' }
            ],
            'Wifi Card': [
                { key: 'Tiêu chuẩn mạng', value: '' },
                { key: 'Công nghệ AX', value: '' },
                { key: 'Truyền/nhận', value: '' },
                { key: 'Bộ xử lý', value: '' },
                { key: 'Bộ nhớ', value: '' }
            ],

            // Peripherals
            'Keyboard': [
                { key: 'Switch', value: '' },
                { key: 'Màu sắc', value: '' },
                { key: 'Kết nối', value: '' },
                { key: 'Chất liệu', value: '' },
                { key: 'Phụ kiện', value: '' },
                { key: 'Kích thước', value: '' }
            ],
            'Mouse': [
                { key: 'Switch', value: '' },
                { key: 'Độ dài dây', value: '' },
                { key: 'IPS', value: '' },
                { key: 'Tuổi thọ', value: '' },
                { key: 'Tần số', value: '' }
            ],
            'Headphone': [
                { key: 'Drivers', value: '' },
                { key: 'Dải tần số', value: '' },
                { key: 'Kết nối', value: '' },
                { key: 'Micro', value: '' },
                { key: 'Chất liệu', value: '' },
                { key: 'Trọng lượng', value: '' }
            ],
            'Webcam': [
                { key: 'Góc nhìn', value: '' },
                { key: 'Video encoding', value: '' },
                { key: 'Độ phân giải', value: '' },
                { key: 'Kết nối', value: '' }
            ]
        };

        // Cập nhật defaultSpecsMapping
        const defaultSpecsMapping = {
            'PC': [
                { key: 'Nhu cầu', value: '', type: 'select', options: needOptions },
                { key: 'Mainboard', value: '' },
                { key: 'CPU', value: '' },
                { key: 'RAM', value: '' },
                { key: 'VGA', value: '' },
                { key: 'HDD', value: '' },
                { key: 'SSD', value: '' },
                { key: 'PSU', value: '' },
                { key: 'Case', value: '' },
                { key: 'Tản nhiệt', value: '' },
                { key: 'Quạt', value: '' }
            ],
            'Laptop': [
                { key: 'Nhu cầu', value: '', type: 'select', options: needOptions },
                { key: 'CPU', value: '' },
                { key: 'RAM', value: '' },
                { key: 'VGA', value: '' },
                { key: 'HDD', value: '' },
                { key: 'SSD', value: '' },
                { key: 'Màn hình', value: '' },
                { key: 'Cổng giao tiếp', value: '' },
                { key: 'Bàn phím', value: '' },
                { key: 'Chuẩn LAN', value: '' },
                { key: 'Chuẩn Wifi', value: '' },
                { key: 'Bluetooth', value: '' },
                { key: 'Webcam', value: '' },
                { key: 'Hệ điều hành', value: '' },
                { key: 'Pin', value: '' },
                { key: 'Trọng lượng', value: '' },
                { key: 'Màu sắc', value: '' },
                { key: 'Kích thước', value: '' }
            ],
            'Monitor': [
                { key: 'Kích thước', value: '' },
                { key: 'Độ phân giải', value: '' },
                { key: 'Tần số quét', value: '' },
                { key: 'Công nghệ màn hình', value: '' },
                { key: 'Cổng kết nối', value: '' }
            ],
            'Components': [
                { key: 'Danh mục', value: '', type: 'select', options: ['CPU', 'VGA', 'Mainboard', 'RAM', 'PSU', 'Case'] }
            ],
            'Audio': [
                { key: 'Danh mục', value: '' }
            ],
            'Network': [
                { key: 'Danh mục', value: '' }
            ],
            'Peripherals': [
                { key: 'Danh mục', value: '' }
            ],
            'Storage': [
                { key: 'Loại ổ cứng', value: '', type: 'select', options: ['SSD', 'HDD'] },
                { key: 'Dung lượng', value: '' },
                { key: 'Kích thước', value: '' },
                { key: 'Chuẩn kết nối', value: '' },
                { key: 'Tốc độ đọc', value: '' },
                { key: 'Tốc độ ghi', value: '' }
            ]
        };

        // Thêm biến để kiểm tra loại sản phẩm có cho phép thêm thông số
        const allowAddSpecs = ['Components', 'Audio', 'Network', 'Peripherals'];

        // Cập nhật phần xử lý hiển thị thông số
        document.addEventListener('DOMContentLoaded', function() {
            const loaiSpSelect = document.querySelector('select[name="Loaisanpham"]');
            const specificationSection = document.getElementById('specificationSection');
            const addSpecButton = document.querySelector('.p-4.bg-gray-50.border-t.border-gray-300');
            
            if (loaiSpSelect) {
                loaiSpSelect.addEventListener('change', function(e) {
                    const productType = e.target.value;
                    
                    // Hiển thị section thông số kỹ thuật
                    if (!productType) {
                        specificationSection.style.display = 'none';
                        return;
                    }

                    specificationSection.style.display = 'block';
                    const tbody = document.querySelector('#specTable tbody');
                    tbody.innerHTML = '';

                    // Xử lý hiển thị thông số kỹ thuật dựa trên loại sản phẩm
                    if (['Audio', 'Network', 'Peripherals'].includes(productType)) {
                        // Hiển thị dropdown danh mục
                        const categories = categoryMapping[productType];
                        const row = document.createElement('tr');
                        row.className = 'border';
                        row.innerHTML = `
                            <td class="px-4 py-2 border">
                                <input type="text" 
                                       name="specs[0].key" 
                                       value="Danh mục" 
                                       class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                       readonly>
                            </td>
                            <td class="px-4 py-2 border">
                                <select name="specs[0].value" 
                                        class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                        onchange="handleCategoryChange(this.value, '${productType}')"
                                        required>
                                    <option value="">Chọn danh mục</option>
                                    ${categories.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                                </select>
                            </td>
                            <td class="px-4 py-2 border text-center"></td>
                        `;
                        tbody.appendChild(row);
                        addSpecButton.style.display = 'block';
                    } else {
                        // Hiển thị thông số mặc định cho các loại sản phẩm khác
                        const specs = defaultSpecsMapping[productType] || [];
                        specs.forEach((spec, index) => {
                            const row = document.createElement('tr');
                            row.className = 'border';
                            
                            // Tạo cell cho input hoặc select tùy thuộc vào type
                            let valueCell;
                            if (spec.type === 'select') {
                                valueCell = `
                                    <select name="specs[${index}].value" 
                                            class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                            ${spec.key === 'Danh mục' ? 'onchange="handleComponentChange(this.value)"' : ''}
                                            required>
                                        <option value="">Chọn ${spec.key.toLowerCase()}</option>
                                        ${spec.options.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                                    </select>`;
                            } else {
                                valueCell = `
                                    <input type="text" 
                                           name="specs[${index}].value" 
                                           value="${spec.value}"
                                           class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                           placeholder="Giá trị"
                                           required>`;
                            }

                            row.innerHTML = `
                                <td class="px-4 py-2 border">
                                    <input type="text" 
                                           name="specs[${index}].key" 
                                           value="${spec.key}" 
                                           class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                           readonly>
                                </td>
                                <td class="px-4 py-2 border">
                                    ${valueCell}
                                </td>
                                <td class="px-4 py-2 border text-center"></td>
                            `;
                            tbody.appendChild(row);
                        });
                        
                        // Hiển thị/ẩn nút thêm thông số
                        addSpecButton.style.display = productType === 'Components' ? 'block' : 'none';
                    }
                });
            }
        });

        // Thêm hàm xử lý khi thay đổi danh mục
        function handleCategoryChange(category, productType) {
            const tbody = document.querySelector('#specTable tbody');
            const firstRow = tbody.querySelector('tr'); // Giữ lại row đầu tiên (Danh mục)
            const customRows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
                !row.querySelector('input[readonly]') && row !== firstRow
            );
            
            tbody.innerHTML = '';
            tbody.appendChild(firstRow);

            if (categorySpecs[category]) {
                categorySpecs[category].forEach((spec, index) => {
                    const row = document.createElement('tr');
                    row.className = 'border';
                    
                    row.innerHTML = `
                        <td class="px-4 py-2 border">
                            <input type="text" 
                                   name="specs[${index + 1}].key" 
                                   value="${spec.key}" 
                                   class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                   readonly>
                        </td>
                        <td class="px-4 py-2 border">
                            <input type="text" 
                                   name="specs[${index + 1}].value" 
                                   value="${spec.value}"
                                   class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                   placeholder="Giá trị"
                                   required>
                        </td>
                        <td class="px-4 py-2 border text-center">
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                // Thêm lại các row tùy chỉnh
                customRows.forEach(row => tbody.appendChild(row));
            }
        }

        // Thêm hàm xử lý khi chọn danh mục linh kiện
        function handleComponentChange(category) {
            if (!category) return;
            
            const tbody = document.querySelector('#specTable tbody');
            const firstRow = tbody.querySelector('tr'); // Giữ lại row đầu tiên (Danh mục)
            const customRows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
                !row.querySelector('input[readonly]') && row !== firstRow
            );
            
            tbody.innerHTML = '';
            tbody.appendChild(firstRow);

            if (componentSpecs[category]) {
                componentSpecs[category].forEach((spec, index) => {
                    const row = document.createElement('tr');
                    row.className = 'border';
                    
                    row.innerHTML = `
                        <td class="px-4 py-2 border">
                            <input type="text" 
                                   name="specs[${index + 1}].key" 
                                   value="${spec.key}" 
                                   class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                   readonly>
                        </td>
                        <td class="px-4 py-2 border">
                            <input type="text" 
                                   name="specs[${index + 1}].value" 
                                   value="${spec.value}"
                                   class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                                   placeholder="Giá trị"
                                   required>
                        </td>
                        <td class="px-4 py-2 border text-center"></td>
                    `;
                    tbody.appendChild(row);
                });

                // Thêm lại các row tùy chỉnh
                customRows.forEach(row => tbody.appendChild(row));
            }
        }

        // Xóa hoặc ẩn nút "Thêm thông số"
        document.querySelector('.p-4.bg-gray-50.border-t.border-gray-300').style.display = 'none';

        // Đảm bảo nội dung editor được cập nhật vào textarea khi submit
        editor.addEventListener('input', function() {
            hiddenTextarea.value = editor.innerHTML;
        });

        // Cải thiện hàm formatText
        function formatText(command, value = null) {
            editor.focus(); // Focus vào editor trước khi thực hiện lệnh
            
            switch(command) {
                case 'lineHeight':
                    const currentValue = getComputedStyle(editor).lineHeight;
                    const newValue = prompt('Nhập khoảng cách dòng (VD: 1.5):', currentValue === 'normal' ? '1' : currentValue);
                    if (newValue && !isNaN(newValue)) {
                        editor.style.lineHeight = newValue;
                    }
                    break;
                    
                case 'fontSize':
                    // Chuyển đổi giá trị size thành px
                    const sizes = {
                        '1': '12px',
                        '3': '16px',
                        '5': '20px',
                        '7': '24px'
                    };
                    document.execCommand(command, false, value);
                    break;
                    
                case 'fontName':
                    document.execCommand(command, false, value);
                    break;
                    
                default:
                    document.execCommand(command, false, value);
            }
            
            // Cập nhật nội dung vào textarea
            hiddenTextarea.value = editor.innerHTML;
        }

        // Cải thiện hàm insertLink
        function insertLink() {
            const selection = window.getSelection();
            const url = prompt('Nhập URL:');
            
            if (url) {
                if (selection.toString().length === 0) {
                    // Nếu không có text được chọn, tạo link với URL làm text
                    const link = document.createElement('a');
                    link.href = url;
                    link.textContent = url;
                    link.target = '_blank';
                    
                    const range = selection.getRangeAt(0);
                    range.insertNode(link);
                } else {
                    // Nếu có text được chọn, tạo link với text đó
                    document.execCommand('createLink', false, url);
                    // Thêm target="_blank" cho link vừa tạo
                    const links = editor.getElementsByTagName('a');
                    const lastLink = links[links.length - 1];
                    if (lastLink) {
                        lastLink.target = '_blank';
                    }
                }
            }
            
            // Cập nhật nội dung vào textarea
            hiddenTextarea.value = editor.innerHTML;
        }

        // Thêm hàm insertTable
        function insertTable() {
            const rows = prompt('Số hàng:', '3');
            const cols = prompt('Số cột:', '3');
            
            if (rows && cols) {
                let table = '<table style="border-collapse: collapse; width: 100%; margin: 10px 0;">';
                
                for (let i = 0; i < rows; i++) {
                    table += '<tr>';
                    for (let j = 0; j < cols; j++) {
                        table += '<td style="border: 1px solid #ddd; padding: 8px;">Nội dung</td>';
                    }
                    table += '</tr>';
                }
                
                table += '</table>';
                document.execCommand('insertHTML', false, table);
            }
            
            // Cập nhật nội dung vào textarea
            hiddenTextarea.value = editor.innerHTML;
        }

        // Thêm hàm insertCode
        function insertCode() {
            const code = prompt('Nhập code:');
            if (code) {
                const formattedCode = `<pre style="background-color: #f5f5f5; padding: 10px; border-radius: 4px; font-family: monospace;">${code}</pre>`;
                document.execCommand('insertHTML', false, formattedCode);
            }
            
            // Cập nhật nội dung vào textarea
            hiddenTextarea.value = editor.innerHTML;
        }

        // Thêm xử lý form submit
        document.querySelector('form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Xử lý thông số kỹ thuật
            const specs = {};
            const rows = document.querySelectorAll('#specTable tbody tr');
            
            rows.forEach(row => {
                const keyInput = row.querySelector('input[name$="].key"]');
                const valueInput = row.querySelector('input[name$="].value"]') || 
                                 row.querySelector('select[name$="].value"]');
                
                if (keyInput && valueInput && keyInput.value.trim() && valueInput.value.trim()) {
                    specs[keyInput.value.trim()] = valueInput.value.trim();
                }
            });

            // Lưu thông số kỹ thuật vào input hidden
            const thongSoKyThuatInput = document.getElementById('thongsokythuat');
            if (thongSoKyThuatInput) {
                thongSoKyThuatInput.value = JSON.stringify(specs);
                console.log('Thông số kỹ thuật được gửi:', specs);
                console.log('JSON string:', thongSoKyThuatInput.value);
            } else {
                console.error('Không tìm thấy input hidden cho thongsokythuat');
            }

            // Kiểm tra các trường bắt buộc khác
            if (this.checkValidity()) {
                this.submit();
            }
        });

        function previewImage(input) {
            const preview = document.getElementById('preview');
            const uploadIcon = document.getElementById('uploadIcon');
            const file = input.files[0];
            
            if (file) {
                if (file.size > 5 * 1024 * 1024) {
                    document.getElementById('imageError').textContent = 'Kích thước file không được vượt quá 5MB';
                    input.value = '';
                    preview.src = '#';
                    preview.classList.add('hidden');
                    uploadIcon.classList.remove('hidden');
                    return;
                }

                if (!file.type.startsWith('image/')) {
                    document.getElementById('imageError').textContent = 'Vui lòng chọn file hình ảnh';
                    input.value = '';
                    preview.src = '#';
                    preview.classList.add('hidden');
                    uploadIcon.classList.remove('hidden');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.classList.remove('hidden');
                    uploadIcon.classList.add('hidden');
                    document.getElementById('imageError').textContent = '';
                }
                reader.readAsDataURL(file);
            }
        }

        function dragOverHandler(ev) {
            ev.preventDefault();
            ev.currentTarget.classList.add('border-blue-500');
            ev.currentTarget.classList.add('bg-blue-50');
        }

        function dragLeaveHandler(ev) {
            ev.currentTarget.classList.remove('border-blue-500');
            ev.currentTarget.classList.remove('bg-blue-50');
        }

        function dropHandler(ev) {
            ev.preventDefault();
            ev.currentTarget.classList.remove('border-blue-500');
            ev.currentTarget.classList.remove('bg-blue-50');

            if (ev.dataTransfer.items) {
                const file = ev.dataTransfer.items[0].getAsFile();
                if (file) {
                    const input = document.getElementById('imageFile');
                    const container = new DataTransfer();
                    container.items.add(file);
                    input.files = container.files;
                    previewImage(input);
                }
            }
        }

        // Khôi phục nội dung đã lưu
        const savedContent = document.querySelector('[name="mota"]').value;
        if (savedContent) {
            document.getElementById('moTaEditor').innerHTML = savedContent;
        }

        // Thêm style mặc định cho editor
        document.getElementById('moTaEditor').style.lineHeight = 'normal';

        function prepareMetaTags() {
            // Lấy nội dung mô tả
            const moTaContent = document.getElementById('moTaEditor').innerHTML;
            
            // Lấy thông số kỹ thuật
            const specs = [];
            const rows = document.querySelectorAll('#specTable tbody tr');
            rows.forEach(row => {
                const inputs = row.querySelectorAll('input');
                if (inputs[0].value && inputs[1].value) {
                    specs.push({
                        key: inputs[0].value,
                        value: inputs[1].value
                    });
                }
            });

            // Tạo meta tags
            const metaTags = [];

            // Meta description từ mô tả
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = moTaContent;
            const plainText = tempDiv.textContent || tempDiv.innerText;
            // Giới hạn độ dài description trong khoảng 150-160 ký tự
            const description = plainText.substring(0, 155) + (plainText.length > 155 ? '...' : '');
            metaTags.push(`<meta name="description" content="${escapeHtml(description)}">`);

            // Meta keywords từ thông số kỹ thuật
            const keywords = specs.map(spec => `${spec.key} ${spec.value}`).join(', ');
            metaTags.push(`<meta name="keywords" content="${escapeHtml(keywords)}">`);

            // Meta tags cho từng thông số kỹ thuật
            specs.forEach(spec => {
                metaTags.push(`<meta property="product:${escapeHtml(spec.key)}" content="${escapeHtml(spec.value)}">`);
            });

            // Meta tags cho Open Graph
            metaTags.push(`<meta property="og:title" content="${escapeHtml(document.querySelector('[name="tensanpham"]').value)}">`);
            metaTags.push(`<meta property="og:description" content="${escapeHtml(description)}">`);
            metaTags.push(`<meta property="og:type" content="product">`);
            
            // Lưu meta tags vào hidden input
            document.getElementById('metaTags').value = metaTags.join('\n');

            // Lưu nội dung gốc của mô tả
            document.querySelector('[name="mota"]').value = moTaContent;

            return true;
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Thêm hàm isDuplicateKey
        function isDuplicateKey(newKey) {
            const tbody = document.querySelector('#specTable tbody');
            const existingKeys = Array.from(tbody.querySelectorAll('input[name$="].key"]'))
                .map(input => input.value.trim().toLowerCase());
            
            // Đếm số lần xuất hiện của key mới
            return existingKeys.filter(key => key === newKey.toLowerCase()).length > 0;
        }

        // Cập nhật hàm validateKey
        function validateKey(input) {
            const key = input.value.trim();
            if (!key) return; // Bỏ qua nếu input rỗng

            // Kiểm tra trùng lặp với các key hiện có
            if (isDuplicateKey(key)) {
                alert('Thông số này đã tồn tại!');
                input.value = '';
                input.focus();
            }
        }

        // Cập nhật hàm addRow
        function addRow() {
            const tbody = document.querySelector('#specTable tbody');
            const index = tbody.children.length;
            const row = document.createElement('tr');
            row.className = 'border';
            
            row.innerHTML = `
                <td class="px-4 py-2 border">
                    <input type="text" 
                           name="specs[${index}].key" 
                           class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                           placeholder="Tên thông số"
                           onblur="validateKey(this)"
                           required>
                </td>
                <td class="px-4 py-2 border">
                    <input type="text" 
                           name="specs[${index}].value" 
                           class="w-full px-2 py-1 border-0 focus:outline-none focus:ring-0"
                           placeholder="Giá trị"
                           required>
                </td>
                <td class="px-4 py-2 border text-center">
                    <button type="button" onclick="removeRow(this)" 
                            class="text-red-500 hover:text-red-700 transition-colors">
                        <i class="fas fa-times"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        }

        // Cập nhật hàm removeRow
        function removeRow(button) {
            const row = button.closest('tr');
            const tbody = row.parentElement;
            
            // Kiểm tra xem có phải là thông số mặc định không
            const isDefaultSpec = row.querySelector('input[readonly]');
            
            if (!isDefaultSpec) {
                tbody.removeChild(row);
                reindexRows();
            } else {
                alert('Không thể xóa thông số mặc định!');
            }
        }

        // Hàm đánh lại index cho các row
        function reindexRows() {
            const tbody = document.querySelector('#specTable tbody');
            const rows = tbody.children;
            
            for (let i = 0; i < rows.length; i++) {
                const inputs = rows[i].querySelectorAll('input');
                inputs.forEach(input => {
                    const name = input.getAttribute('name');
                    if (name) {
                        input.setAttribute('name', name.replace(/\d+/, i));
                    }
                });
            }
        }
    </script>
}
